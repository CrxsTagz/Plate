
Prueba Proyecto 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032bc  080032bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c4  080032c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080032d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080032d8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c69  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001877  00000000  00000000  00027c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00029518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013876  00000000  00000000  0002a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000955f  00000000  00000000  0003dc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007907b  00000000  00000000  000471b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a78  00000000  00000000  000c0284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003164 	.word	0x08003164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003164 	.word	0x08003164

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <plate>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void plate(int time, int rounds){
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]

int i = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]


HAL_UART_Transmit(&huart2, "Tiro: ", 6 , HAL_MAX_DELAY);
 80004aa:	2301      	movs	r3, #1
 80004ac:	425b      	negs	r3, r3
 80004ae:	49b8      	ldr	r1, [pc, #736]	; (8000790 <plate+0x2f4>)
 80004b0:	48b8      	ldr	r0, [pc, #736]	; (8000794 <plate+0x2f8>)
 80004b2:	2206      	movs	r2, #6
 80004b4:	f001 fec8 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "Puntuacion: ", 12, HAL_MAX_DELAY);
 80004b8:	2301      	movs	r3, #1
 80004ba:	425b      	negs	r3, r3
 80004bc:	49b6      	ldr	r1, [pc, #728]	; (8000798 <plate+0x2fc>)
 80004be:	48b5      	ldr	r0, [pc, #724]	; (8000794 <plate+0x2f8>)
 80004c0:	220c      	movs	r2, #12
 80004c2:	f001 fec1 	bl	8002248 <HAL_UART_Transmit>

int cont = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
HAL_UART_Transmit(&huart2, "\r-\t-\t-\t-\t-\t-\t-\t*\t-\t-\t\n", 23, HAL_MAX_DELAY);
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	49b3      	ldr	r1, [pc, #716]	; (800079c <plate+0x300>)
 80004d0:	48b0      	ldr	r0, [pc, #704]	; (8000794 <plate+0x2f8>)
 80004d2:	2217      	movs	r2, #23
 80004d4:	f001 feb8 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r@", 2, HAL_MAX_DELAY);
 80004d8:	2301      	movs	r3, #1
 80004da:	425b      	negs	r3, r3
 80004dc:	49b0      	ldr	r1, [pc, #704]	; (80007a0 <plate+0x304>)
 80004de:	48ad      	ldr	r0, [pc, #692]	; (8000794 <plate+0x2f8>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	f001 feb1 	bl	8002248 <HAL_UART_Transmit>
cont++;
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fbc4 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80004f4:	2301      	movs	r3, #1
 80004f6:	425b      	negs	r3, r3
 80004f8:	49aa      	ldr	r1, [pc, #680]	; (80007a4 <plate+0x308>)
 80004fa:	48a6      	ldr	r0, [pc, #664]	; (8000794 <plate+0x2f8>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	f001 fea3 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, " ",  1, HAL_MAX_DELAY);
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	49a8      	ldr	r1, [pc, #672]	; (80007a8 <plate+0x30c>)
 8000508:	48a2      	ldr	r0, [pc, #648]	; (8000794 <plate+0x2f8>)
 800050a:	2201      	movs	r2, #1
 800050c:	f001 fe9c 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000510:	2301      	movs	r3, #1
 8000512:	425b      	negs	r3, r3
 8000514:	49a3      	ldr	r1, [pc, #652]	; (80007a4 <plate+0x308>)
 8000516:	489f      	ldr	r0, [pc, #636]	; (8000794 <plate+0x2f8>)
 8000518:	2201      	movs	r2, #1
 800051a:	f001 fe95 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t@",2, HAL_MAX_DELAY);
 800051e:	2301      	movs	r3, #1
 8000520:	425b      	negs	r3, r3
 8000522:	49a2      	ldr	r1, [pc, #648]	; (80007ac <plate+0x310>)
 8000524:	489b      	ldr	r0, [pc, #620]	; (8000794 <plate+0x2f8>)
 8000526:	2202      	movs	r2, #2
 8000528:	f001 fe8e 	bl	8002248 <HAL_UART_Transmit>
cont++;
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	3301      	adds	r3, #1
 8000530:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fba1 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800053a:	2301      	movs	r3, #1
 800053c:	425b      	negs	r3, r3
 800053e:	4999      	ldr	r1, [pc, #612]	; (80007a4 <plate+0x308>)
 8000540:	4894      	ldr	r0, [pc, #592]	; (8000794 <plate+0x2f8>)
 8000542:	2201      	movs	r2, #1
 8000544:	f001 fe80 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t ", 2, HAL_MAX_DELAY);
 8000548:	2301      	movs	r3, #1
 800054a:	425b      	negs	r3, r3
 800054c:	4998      	ldr	r1, [pc, #608]	; (80007b0 <plate+0x314>)
 800054e:	4891      	ldr	r0, [pc, #580]	; (8000794 <plate+0x2f8>)
 8000550:	2202      	movs	r2, #2
 8000552:	f001 fe79 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000556:	2301      	movs	r3, #1
 8000558:	425b      	negs	r3, r3
 800055a:	4992      	ldr	r1, [pc, #584]	; (80007a4 <plate+0x308>)
 800055c:	488d      	ldr	r0, [pc, #564]	; (8000794 <plate+0x2f8>)
 800055e:	2201      	movs	r2, #1
 8000560:	f001 fe72 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t@", 3, HAL_MAX_DELAY);
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	4992      	ldr	r1, [pc, #584]	; (80007b4 <plate+0x318>)
 800056a:	488a      	ldr	r0, [pc, #552]	; (8000794 <plate+0x2f8>)
 800056c:	2203      	movs	r2, #3
 800056e:	f001 fe6b 	bl	8002248 <HAL_UART_Transmit>
cont++;
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	3301      	adds	r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fb7e 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000580:	2301      	movs	r3, #1
 8000582:	425b      	negs	r3, r3
 8000584:	4987      	ldr	r1, [pc, #540]	; (80007a4 <plate+0x308>)
 8000586:	4883      	ldr	r0, [pc, #524]	; (8000794 <plate+0x2f8>)
 8000588:	2201      	movs	r2, #1
 800058a:	f001 fe5d 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t ", 3, HAL_MAX_DELAY);
 800058e:	2301      	movs	r3, #1
 8000590:	425b      	negs	r3, r3
 8000592:	4989      	ldr	r1, [pc, #548]	; (80007b8 <plate+0x31c>)
 8000594:	487f      	ldr	r0, [pc, #508]	; (8000794 <plate+0x2f8>)
 8000596:	2203      	movs	r2, #3
 8000598:	f001 fe56 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800059c:	2301      	movs	r3, #1
 800059e:	425b      	negs	r3, r3
 80005a0:	4980      	ldr	r1, [pc, #512]	; (80007a4 <plate+0x308>)
 80005a2:	487c      	ldr	r0, [pc, #496]	; (8000794 <plate+0x2f8>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	f001 fe4f 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t@", 4, HAL_MAX_DELAY);
 80005aa:	2301      	movs	r3, #1
 80005ac:	425b      	negs	r3, r3
 80005ae:	4983      	ldr	r1, [pc, #524]	; (80007bc <plate+0x320>)
 80005b0:	4878      	ldr	r0, [pc, #480]	; (8000794 <plate+0x2f8>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	f001 fe48 	bl	8002248 <HAL_UART_Transmit>
cont++;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fb5b 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005c6:	2301      	movs	r3, #1
 80005c8:	425b      	negs	r3, r3
 80005ca:	4976      	ldr	r1, [pc, #472]	; (80007a4 <plate+0x308>)
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <plate+0x2f8>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	f001 fe3a 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t ", 4, HAL_MAX_DELAY);
 80005d4:	2301      	movs	r3, #1
 80005d6:	425b      	negs	r3, r3
 80005d8:	4979      	ldr	r1, [pc, #484]	; (80007c0 <plate+0x324>)
 80005da:	486e      	ldr	r0, [pc, #440]	; (8000794 <plate+0x2f8>)
 80005dc:	2204      	movs	r2, #4
 80005de:	f001 fe33 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005e2:	2301      	movs	r3, #1
 80005e4:	425b      	negs	r3, r3
 80005e6:	496f      	ldr	r1, [pc, #444]	; (80007a4 <plate+0x308>)
 80005e8:	486a      	ldr	r0, [pc, #424]	; (8000794 <plate+0x2f8>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	f001 fe2c 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t@",5, HAL_MAX_DELAY);
 80005f0:	2301      	movs	r3, #1
 80005f2:	425b      	negs	r3, r3
 80005f4:	4973      	ldr	r1, [pc, #460]	; (80007c4 <plate+0x328>)
 80005f6:	4867      	ldr	r0, [pc, #412]	; (8000794 <plate+0x2f8>)
 80005f8:	2205      	movs	r2, #5
 80005fa:	f001 fe25 	bl	8002248 <HAL_UART_Transmit>
cont++;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3301      	adds	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fb38 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800060c:	2301      	movs	r3, #1
 800060e:	425b      	negs	r3, r3
 8000610:	4964      	ldr	r1, [pc, #400]	; (80007a4 <plate+0x308>)
 8000612:	4860      	ldr	r0, [pc, #384]	; (8000794 <plate+0x2f8>)
 8000614:	2201      	movs	r2, #1
 8000616:	f001 fe17 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t ", 5, HAL_MAX_DELAY);
 800061a:	2301      	movs	r3, #1
 800061c:	425b      	negs	r3, r3
 800061e:	496a      	ldr	r1, [pc, #424]	; (80007c8 <plate+0x32c>)
 8000620:	485c      	ldr	r0, [pc, #368]	; (8000794 <plate+0x2f8>)
 8000622:	2205      	movs	r2, #5
 8000624:	f001 fe10 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000628:	2301      	movs	r3, #1
 800062a:	425b      	negs	r3, r3
 800062c:	495d      	ldr	r1, [pc, #372]	; (80007a4 <plate+0x308>)
 800062e:	4859      	ldr	r0, [pc, #356]	; (8000794 <plate+0x2f8>)
 8000630:	2201      	movs	r2, #1
 8000632:	f001 fe09 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t@", 6, HAL_MAX_DELAY);
 8000636:	2301      	movs	r3, #1
 8000638:	425b      	negs	r3, r3
 800063a:	4964      	ldr	r1, [pc, #400]	; (80007cc <plate+0x330>)
 800063c:	4855      	ldr	r0, [pc, #340]	; (8000794 <plate+0x2f8>)
 800063e:	2206      	movs	r2, #6
 8000640:	f001 fe02 	bl	8002248 <HAL_UART_Transmit>
cont++;
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	3301      	adds	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fb15 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	4953      	ldr	r1, [pc, #332]	; (80007a4 <plate+0x308>)
 8000658:	484e      	ldr	r0, [pc, #312]	; (8000794 <plate+0x2f8>)
 800065a:	2201      	movs	r2, #1
 800065c:	f001 fdf4 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t ", 6, HAL_MAX_DELAY);
 8000660:	2301      	movs	r3, #1
 8000662:	425b      	negs	r3, r3
 8000664:	495a      	ldr	r1, [pc, #360]	; (80007d0 <plate+0x334>)
 8000666:	484b      	ldr	r0, [pc, #300]	; (8000794 <plate+0x2f8>)
 8000668:	2206      	movs	r2, #6
 800066a:	f001 fded 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800066e:	2301      	movs	r3, #1
 8000670:	425b      	negs	r3, r3
 8000672:	494c      	ldr	r1, [pc, #304]	; (80007a4 <plate+0x308>)
 8000674:	4847      	ldr	r0, [pc, #284]	; (8000794 <plate+0x2f8>)
 8000676:	2201      	movs	r2, #1
 8000678:	f001 fde6 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t@", 7, HAL_MAX_DELAY);
 800067c:	2301      	movs	r3, #1
 800067e:	425b      	negs	r3, r3
 8000680:	4954      	ldr	r1, [pc, #336]	; (80007d4 <plate+0x338>)
 8000682:	4844      	ldr	r0, [pc, #272]	; (8000794 <plate+0x2f8>)
 8000684:	2207      	movs	r2, #7
 8000686:	f001 fddf 	bl	8002248 <HAL_UART_Transmit>
cont++;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3301      	adds	r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f000 faf2 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000698:	2301      	movs	r3, #1
 800069a:	425b      	negs	r3, r3
 800069c:	4941      	ldr	r1, [pc, #260]	; (80007a4 <plate+0x308>)
 800069e:	483d      	ldr	r0, [pc, #244]	; (8000794 <plate+0x2f8>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	f001 fdd1 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t ", 7, HAL_MAX_DELAY);
 80006a6:	2301      	movs	r3, #1
 80006a8:	425b      	negs	r3, r3
 80006aa:	494b      	ldr	r1, [pc, #300]	; (80007d8 <plate+0x33c>)
 80006ac:	4839      	ldr	r0, [pc, #228]	; (8000794 <plate+0x2f8>)
 80006ae:	2207      	movs	r2, #7
 80006b0:	f001 fdca 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	493a      	ldr	r1, [pc, #232]	; (80007a4 <plate+0x308>)
 80006ba:	4836      	ldr	r0, [pc, #216]	; (8000794 <plate+0x2f8>)
 80006bc:	2201      	movs	r2, #1
 80006be:	f001 fdc3 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t@", 8, HAL_MAX_DELAY);
 80006c2:	2301      	movs	r3, #1
 80006c4:	425b      	negs	r3, r3
 80006c6:	4945      	ldr	r1, [pc, #276]	; (80007dc <plate+0x340>)
 80006c8:	4832      	ldr	r0, [pc, #200]	; (8000794 <plate+0x2f8>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	f001 fdbc 	bl	8002248 <HAL_UART_Transmit>
cont++;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 facf 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	4930      	ldr	r1, [pc, #192]	; (80007a4 <plate+0x308>)
 80006e4:	482b      	ldr	r0, [pc, #172]	; (8000794 <plate+0x2f8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	f001 fdae 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t ", 8, HAL_MAX_DELAY);
 80006ec:	2301      	movs	r3, #1
 80006ee:	425b      	negs	r3, r3
 80006f0:	493b      	ldr	r1, [pc, #236]	; (80007e0 <plate+0x344>)
 80006f2:	4828      	ldr	r0, [pc, #160]	; (8000794 <plate+0x2f8>)
 80006f4:	2208      	movs	r2, #8
 80006f6:	f001 fda7 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006fa:	2301      	movs	r3, #1
 80006fc:	425b      	negs	r3, r3
 80006fe:	4929      	ldr	r1, [pc, #164]	; (80007a4 <plate+0x308>)
 8000700:	4824      	ldr	r0, [pc, #144]	; (8000794 <plate+0x2f8>)
 8000702:	2201      	movs	r2, #1
 8000704:	f001 fda0 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t@", 9, HAL_MAX_DELAY);
 8000708:	2301      	movs	r3, #1
 800070a:	425b      	negs	r3, r3
 800070c:	4935      	ldr	r1, [pc, #212]	; (80007e4 <plate+0x348>)
 800070e:	4821      	ldr	r0, [pc, #132]	; (8000794 <plate+0x2f8>)
 8000710:	2209      	movs	r2, #9
 8000712:	f001 fd99 	bl	8002248 <HAL_UART_Transmit>
cont++;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	3301      	adds	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	0018      	movs	r0, r3
 8000720:	f000 faac 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	491e      	ldr	r1, [pc, #120]	; (80007a4 <plate+0x308>)
 800072a:	481a      	ldr	r0, [pc, #104]	; (8000794 <plate+0x2f8>)
 800072c:	2201      	movs	r2, #1
 800072e:	f001 fd8b 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t ", 9, HAL_MAX_DELAY);
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	492c      	ldr	r1, [pc, #176]	; (80007e8 <plate+0x34c>)
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <plate+0x2f8>)
 800073a:	2209      	movs	r2, #9
 800073c:	f001 fd84 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000740:	2301      	movs	r3, #1
 8000742:	425b      	negs	r3, r3
 8000744:	4917      	ldr	r1, [pc, #92]	; (80007a4 <plate+0x308>)
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <plate+0x2f8>)
 8000748:	2201      	movs	r2, #1
 800074a:	f001 fd7d 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t@", 10, HAL_MAX_DELAY);
 800074e:	2301      	movs	r3, #1
 8000750:	425b      	negs	r3, r3
 8000752:	4926      	ldr	r1, [pc, #152]	; (80007ec <plate+0x350>)
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <plate+0x2f8>)
 8000756:	220a      	movs	r2, #10
 8000758:	f001 fd76 	bl	8002248 <HAL_UART_Transmit>
cont++;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fa89 	bl	8000c7c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800076a:	2301      	movs	r3, #1
 800076c:	425b      	negs	r3, r3
 800076e:	490d      	ldr	r1, [pc, #52]	; (80007a4 <plate+0x308>)
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <plate+0x2f8>)
 8000772:	2201      	movs	r2, #1
 8000774:	f001 fd68 	bl	8002248 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t ", 10, HAL_MAX_DELAY);
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	491c      	ldr	r1, [pc, #112]	; (80007f0 <plate+0x354>)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <plate+0x2f8>)
 8000780:	220a      	movs	r2, #10
 8000782:	f001 fd61 	bl	8002248 <HAL_UART_Transmit>
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	0800317c 	.word	0x0800317c
 8000794:	20000028 	.word	0x20000028
 8000798:	08003184 	.word	0x08003184
 800079c:	08003194 	.word	0x08003194
 80007a0:	080031ac 	.word	0x080031ac
 80007a4:	080031b0 	.word	0x080031b0
 80007a8:	080031b4 	.word	0x080031b4
 80007ac:	080031b8 	.word	0x080031b8
 80007b0:	080031bc 	.word	0x080031bc
 80007b4:	080031c0 	.word	0x080031c0
 80007b8:	080031c4 	.word	0x080031c4
 80007bc:	080031c8 	.word	0x080031c8
 80007c0:	080031d0 	.word	0x080031d0
 80007c4:	080031d8 	.word	0x080031d8
 80007c8:	080031e0 	.word	0x080031e0
 80007cc:	080031e8 	.word	0x080031e8
 80007d0:	080031f0 	.word	0x080031f0
 80007d4:	080031f8 	.word	0x080031f8
 80007d8:	08003200 	.word	0x08003200
 80007dc:	08003208 	.word	0x08003208
 80007e0:	08003214 	.word	0x08003214
 80007e4:	08003220 	.word	0x08003220
 80007e8:	0800322c 	.word	0x0800322c
 80007ec:	08003238 	.word	0x08003238
 80007f0:	08003244 	.word	0x08003244

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 f9d0 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f80c 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f8a6 	bl	8000950 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000804:	f000 f874 	bl	80008f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  plate(500, 25);
 8000808:	23fa      	movs	r3, #250	; 0xfa
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	2119      	movs	r1, #25
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff fe44 	bl	800049c <plate>

  //HAL_UART_Receive_IT(&huart2, /*13*/, /*1*/);

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000814:	e7fe      	b.n	8000814 <main+0x20>
	...

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b09f      	sub	sp, #124	; 0x7c
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	2440      	movs	r4, #64	; 0x40
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2338      	movs	r3, #56	; 0x38
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f002 fc93 	bl	8003154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082e:	232c      	movs	r3, #44	; 0x2c
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	0018      	movs	r0, r3
 8000834:	2314      	movs	r3, #20
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f002 fc8b 	bl	8003154 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	0018      	movs	r0, r3
 8000842:	2328      	movs	r3, #40	; 0x28
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f002 fc84 	bl	8003154 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <SystemClock_Config+0xd4>)
 8000852:	401a      	ands	r2, r3
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xd0>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0109      	lsls	r1, r1, #4
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2210      	movs	r2, #16
 8000864:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	22a0      	movs	r2, #160	; 0xa0
 8000876:	0212      	lsls	r2, r2, #8
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	187b      	adds	r3, r7, r1
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd20 	bl	80012c8 <HAL_RCC_OscConfig>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800088c:	f000 f8cd 	bl	8000a2a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	212c      	movs	r1, #44	; 0x2c
 8000892:	187b      	adds	r3, r7, r1
 8000894:	220f      	movs	r2, #15
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f8db 	bl	8001a70 <HAL_RCC_ClockConfig>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008be:	f000 f8b4 	bl	8000a2a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2202      	movs	r2, #2
 80008c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 faf1 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008da:	f000 f8a6 	bl	8000a2a <Error_Handler>
  }
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b01f      	add	sp, #124	; 0x7c
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40007000 	.word	0x40007000
 80008ec:	ffffe7ff 	.word	0xffffe7ff

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART2_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_USART2_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART2_UART_Init+0x58>)
 80008fc:	2296      	movs	r2, #150	; 0x96
 80008fe:	0192      	lsls	r2, r2, #6
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fc33 	bl	80021a0 <HAL_UART_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 f874 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000028 	.word	0x20000028
 800094c:	40004400 	.word	0x40004400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	240c      	movs	r4, #12
 8000958:	193b      	adds	r3, r7, r4
 800095a:	0018      	movs	r0, r3
 800095c:	2314      	movs	r3, #20
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f002 fbf7 	bl	8003154 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xbc>)
 800096c:	2104      	movs	r1, #4
 800096e:	430a      	orrs	r2, r1
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	2204      	movs	r2, #4
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	430a      	orrs	r2, r1
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_GPIO_Init+0xbc>)
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	4013      	ands	r3, r2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_GPIO_Init+0xbc>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_GPIO_Init+0xbc>)
 80009a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	23a0      	movs	r3, #160	; 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fc68 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	0192      	lsls	r2, r2, #6
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_GPIO_Init+0xc0>)
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <MX_GPIO_Init+0xc4>)
 80009d4:	0019      	movs	r1, r3
 80009d6:	0010      	movs	r0, r2
 80009d8:	f000 fada 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009dc:	0021      	movs	r1, r4
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2220      	movs	r2, #32
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	187a      	adds	r2, r7, r1
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fac6 	bl	8000f90 <HAL_GPIO_Init>

}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b009      	add	sp, #36	; 0x24
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	10210000 	.word	0x10210000
 8000a14:	50000800 	.word	0x50000800

08000a18 <HAL_UART_TxCpltCallback>:
{
	__NOP();
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000a20:	46c0      	nop			; (mov r8, r8)
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <HAL_MspInit+0x24>)
 8000a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x24>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	430a      	orrs	r2, r1
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_MspInit+0x24>)
 8000a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_MspInit+0x24>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0549      	lsls	r1, r1, #21
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	240c      	movs	r4, #12
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f002 fb70 	bl	8003154 <memset>
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_UART_MspInit+0x90>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d131      	bne.n	8000ae2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa4:	0021      	movs	r1, r4
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2202      	movs	r2, #2
 8000ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2203      	movs	r2, #3
 8000abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	187a      	adds	r2, r7, r1
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fa5f 	bl	8000f90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	201c      	movs	r0, #28
 8000ad8:	f000 f9a0 	bl	8000e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000adc:	201c      	movs	r0, #28
 8000ade:	f000 f9b2 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b009      	add	sp, #36	; 0x24
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f894 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <USART2_IRQHandler+0x14>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 fc34 	bl	8002398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000028 	.word	0x20000028

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b72:	f7ff ffe3 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f002 fac9 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fe3b 	bl	80007f4 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
   ldr   r0, =_estack
 8000b80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	200000b0 	.word	0x200000b0

08000b98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_COMP_IRQHandler>
	...

08000b9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x3c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Init+0x3c>)
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f811 	bl	8000bdc <HAL_InitTick>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e001      	b.n	8000bca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc6:	f7ff ff35 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
}
 8000bce:	0018      	movs	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_InitTick+0x5c>)
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_InitTick+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	0019      	movs	r1, r3
 8000bee:	23fa      	movs	r3, #250	; 0xfa
 8000bf0:	0098      	lsls	r0, r3, #2
 8000bf2:	f7ff fa89 	bl	8000108 <__udivsi3>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f7ff fa84 	bl	8000108 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 f92f 	bl	8000e66 <HAL_SYSTICK_Config>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e00f      	b.n	8000c30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d80b      	bhi.n	8000c2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f8fc 	bl	8000e1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_InitTick+0x64>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x1c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x20>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	18d2      	adds	r2, r2, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_IncTick+0x20>)
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200000ac 	.word	0x200000ac

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	200000ac 	.word	0x200000ac

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fff0 	bl	8000c68 <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	f7ff ffe0 	bl	8000c68 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd6:	d809      	bhi.n	8000cec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	231f      	movs	r3, #31
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_EnableIRQ+0x30>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	000a      	movs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
  }
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0c:	d828      	bhi.n	8000d60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <__NVIC_SetPriority+0xd4>)
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	33c0      	adds	r3, #192	; 0xc0
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	589b      	ldr	r3, [r3, r2]
 8000d1e:	1dfa      	adds	r2, r7, #7
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	0011      	movs	r1, r2
 8000d24:	2203      	movs	r2, #3
 8000d26:	400a      	ands	r2, r1
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	21ff      	movs	r1, #255	; 0xff
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	22ff      	movs	r2, #255	; 0xff
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	2303      	movs	r3, #3
 8000d46:	4003      	ands	r3, r0
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4c:	481f      	ldr	r0, [pc, #124]	; (8000dcc <__NVIC_SetPriority+0xd4>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	430a      	orrs	r2, r1
 8000d58:	33c0      	adds	r3, #192	; 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d5e:	e031      	b.n	8000dc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <__NVIC_SetPriority+0xd8>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0019      	movs	r1, r3
 8000d68:	230f      	movs	r3, #15
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	3b08      	subs	r3, #8
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3306      	adds	r3, #6
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	3304      	adds	r3, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	1dfa      	adds	r2, r7, #7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	2203      	movs	r2, #3
 8000d82:	400a      	ands	r2, r1
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	21ff      	movs	r1, #255	; 0xff
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	401a      	ands	r2, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	4003      	ands	r3, r0
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <__NVIC_SetPriority+0xd8>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	001c      	movs	r4, r3
 8000db0:	230f      	movs	r3, #15
 8000db2:	4023      	ands	r3, r4
 8000db4:	3b08      	subs	r3, #8
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	430a      	orrs	r2, r1
 8000dba:	3306      	adds	r3, #6
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	18c3      	adds	r3, r0, r3
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b003      	add	sp, #12
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	045b      	lsls	r3, r3, #17
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d301      	bcc.n	8000dec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de8:	2301      	movs	r3, #1
 8000dea:	e010      	b.n	8000e0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <SysTick_Config+0x44>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df4:	2301      	movs	r3, #1
 8000df6:	425b      	negs	r3, r3
 8000df8:	2103      	movs	r1, #3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff7c 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x44>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x44>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	210f      	movs	r1, #15
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff33 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ffaf 	bl	8000dd4 <SysTick_Config>
 8000e76:	0003      	movs	r3, r0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e88:	230f      	movs	r3, #15
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2225      	movs	r2, #37	; 0x25
 8000e94:	5c9b      	ldrb	r3, [r3, r2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d008      	beq.n	8000eae <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2224      	movs	r2, #36	; 0x24
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e024      	b.n	8000ef8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	210e      	movs	r1, #14
 8000eba:	438a      	bics	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	438a      	bics	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	221c      	movs	r2, #28
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2101      	movs	r1, #1
 8000edc:	4091      	lsls	r1, r2
 8000ede:	000a      	movs	r2, r1
 8000ee0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	; 0x25
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2224      	movs	r2, #36	; 0x24
 8000eee:	2100      	movs	r1, #0
 8000ef0:	5499      	strb	r1, [r3, r2]

    return status;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f08:	210f      	movs	r1, #15
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2225      	movs	r2, #37	; 0x25
 8000f14:	5c9b      	ldrb	r3, [r3, r2]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d006      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e02a      	b.n	8000f80 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	210e      	movs	r1, #14
 8000f36:	438a      	bics	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	438a      	bics	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	221c      	movs	r2, #28
 8000f50:	401a      	ands	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	2101      	movs	r1, #1
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2225      	movs	r2, #37	; 0x25
 8000f62:	2101      	movs	r1, #1
 8000f64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2224      	movs	r2, #36	; 0x24
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	0010      	movs	r0, r2
 8000f7e:	4798      	blx	r3
    }
  }
  return status;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	781b      	ldrb	r3, [r3, #0]
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fa6:	e155      	b.n	8001254 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <HAL_GPIO_Init+0x30>
 8000fbe:	e146      	b.n	800124e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d00b      	beq.n	8000fe0 <HAL_GPIO_Init+0x50>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd4:	2b11      	cmp	r3, #17
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b12      	cmp	r3, #18
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	2201      	movs	r2, #1
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0xf2>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b12      	cmp	r3, #18
 8001080:	d123      	bne.n	80010ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	58d3      	ldr	r3, [r2, r3]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2207      	movs	r2, #7
 8001094:	4013      	ands	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2107      	movs	r1, #7
 80010ae:	400b      	ands	r3, r1
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	6939      	ldr	r1, [r7, #16]
 80010c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	401a      	ands	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	055b      	lsls	r3, r3, #21
 8001106:	4013      	ands	r3, r2
 8001108:	d100      	bne.n	800110c <HAL_GPIO_Init+0x17c>
 800110a:	e0a0      	b.n	800124e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110c:	4b57      	ldr	r3, [pc, #348]	; (800126c <HAL_GPIO_Init+0x2dc>)
 800110e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <HAL_GPIO_Init+0x2dc>)
 8001112:	2101      	movs	r1, #1
 8001114:	430a      	orrs	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001118:	4a55      	ldr	r2, [pc, #340]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	589b      	ldr	r3, [r3, r2]
 8001124:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2203      	movs	r2, #3
 800112a:	4013      	ands	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	429a      	cmp	r2, r3
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x1f6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4a      	ldr	r2, [pc, #296]	; (8001274 <HAL_GPIO_Init+0x2e4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x1f2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1ee>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2ec>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1ea>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	; (8001280 <HAL_GPIO_Init+0x2f0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1e6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2f4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1e2>
 800116e:	2305      	movs	r3, #5
 8001170:	e00a      	b.n	8001188 <HAL_GPIO_Init+0x1f8>
 8001172:	2306      	movs	r3, #6
 8001174:	e008      	b.n	8001188 <HAL_GPIO_Init+0x1f8>
 8001176:	2304      	movs	r3, #4
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x1f8>
 800117a:	2303      	movs	r3, #3
 800117c:	e004      	b.n	8001188 <HAL_GPIO_Init+0x1f8>
 800117e:	2302      	movs	r3, #2
 8001180:	e002      	b.n	8001188 <HAL_GPIO_Init+0x1f8>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x1f8>
 8001186:	2300      	movs	r3, #0
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	2103      	movs	r1, #3
 800118c:	400a      	ands	r2, r1
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4093      	lsls	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001198:	4935      	ldr	r1, [pc, #212]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	035b      	lsls	r3, r3, #13
 8001212:	4013      	ands	r3, r2
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	039b      	lsls	r3, r3, #14
 800123c:	4013      	ands	r3, r2
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	40da      	lsrs	r2, r3
 800125c:	1e13      	subs	r3, r2, #0
 800125e:	d000      	beq.n	8001262 <HAL_GPIO_Init+0x2d2>
 8001260:	e6a2      	b.n	8000fa8 <HAL_GPIO_Init+0x18>
  }
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b006      	add	sp, #24
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	50000400 	.word	0x50000400
 8001278:	50000800 	.word	0x50000800
 800127c:	50000c00 	.word	0x50000c00
 8001280:	50001000 	.word	0x50001000
 8001284:	50001c00 	.word	0x50001c00
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	0008      	movs	r0, r1
 8001296:	0011      	movs	r1, r2
 8001298:	1cbb      	adds	r3, r7, #2
 800129a:	1c02      	adds	r2, r0, #0
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	1c7b      	adds	r3, r7, #1
 80012a0:	1c0a      	adds	r2, r1, #0
 80012a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a4:	1c7b      	adds	r3, r7, #1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ac:	1cbb      	adds	r3, r7, #2
 80012ae:	881a      	ldrh	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012b6:	1cbb      	adds	r3, r7, #2
 80012b8:	881a      	ldrh	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f000 fbbf 	bl	8001a5a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012dc:	4bc9      	ldr	r3, [pc, #804]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	220c      	movs	r2, #12
 80012e2:	4013      	ands	r3, r2
 80012e4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e6:	4bc7      	ldr	r3, [pc, #796]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	d100      	bne.n	80012fe <HAL_RCC_OscConfig+0x36>
 80012fc:	e07e      	b.n	80013fc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d007      	beq.n	8001314 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b0c      	cmp	r3, #12
 8001308:	d112      	bne.n	8001330 <HAL_RCC_OscConfig+0x68>
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	429a      	cmp	r2, r3
 8001312:	d10d      	bne.n	8001330 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4bbb      	ldr	r3, [pc, #748]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	d100      	bne.n	8001322 <HAL_RCC_OscConfig+0x5a>
 8001320:	e06b      	b.n	80013fa <HAL_RCC_OscConfig+0x132>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d167      	bne.n	80013fa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f000 fb95 	bl	8001a5a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	429a      	cmp	r2, r3
 800133a:	d107      	bne.n	800134c <HAL_RCC_OscConfig+0x84>
 800133c:	4bb1      	ldr	r3, [pc, #708]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4bb0      	ldr	r3, [pc, #704]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	0249      	lsls	r1, r1, #9
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e027      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	02db      	lsls	r3, r3, #11
 8001354:	429a      	cmp	r2, r3
 8001356:	d10e      	bne.n	8001376 <HAL_RCC_OscConfig+0xae>
 8001358:	4baa      	ldr	r3, [pc, #680]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4ba9      	ldr	r3, [pc, #676]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	02c9      	lsls	r1, r1, #11
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4ba7      	ldr	r3, [pc, #668]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4ba6      	ldr	r3, [pc, #664]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0249      	lsls	r1, r1, #9
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e012      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 8001376:	4ba3      	ldr	r3, [pc, #652]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4ba2      	ldr	r3, [pc, #648]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800137c:	49a2      	ldr	r1, [pc, #648]	; (8001608 <HAL_RCC_OscConfig+0x340>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	4ba0      	ldr	r3, [pc, #640]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	025b      	lsls	r3, r3, #9
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4b9c      	ldr	r3, [pc, #624]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b9b      	ldr	r3, [pc, #620]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001396:	499d      	ldr	r1, [pc, #628]	; (800160c <HAL_RCC_OscConfig+0x344>)
 8001398:	400a      	ands	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d015      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc60 	bl	8000c68 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ae:	f7ff fc5b 	bl	8000c68 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d902      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	f000 fb4c 	bl	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013c2:	4b90      	ldr	r3, [pc, #576]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d0ef      	beq.n	80013ae <HAL_RCC_OscConfig+0xe6>
 80013ce:	e015      	b.n	80013fc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc4a 	bl	8000c68 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013da:	f7ff fc45 	bl	8000c68 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e336      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ec:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x112>
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d100      	bne.n	8001408 <HAL_RCC_OscConfig+0x140>
 8001406:	e099      	b.n	800153c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	2220      	movs	r2, #32
 8001412:	4013      	ands	r3, r2
 8001414:	d009      	beq.n	800142a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001416:	4b7b      	ldr	r3, [pc, #492]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800141c:	2120      	movs	r1, #32
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	2220      	movs	r2, #32
 8001426:	4393      	bics	r3, r2
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d13e      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1ec>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d13b      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800143c:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2204      	movs	r2, #4
 8001442:	4013      	ands	r3, r2
 8001444:	d004      	beq.n	8001450 <HAL_RCC_OscConfig+0x188>
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e304      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a6e      	ldr	r2, [pc, #440]	; (8001610 <HAL_RCC_OscConfig+0x348>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	021a      	lsls	r2, r3, #8
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001466:	4b67      	ldr	r3, [pc, #412]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2209      	movs	r2, #9
 800146c:	4393      	bics	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001478:	f000 fc42 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800147c:	0001      	movs	r1, r0
 800147e:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	220f      	movs	r2, #15
 8001486:	4013      	ands	r3, r2
 8001488:	4a62      	ldr	r2, [pc, #392]	; (8001614 <HAL_RCC_OscConfig+0x34c>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	000a      	movs	r2, r1
 800148e:	40da      	lsrs	r2, r3
 8001490:	4b61      	ldr	r3, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x350>)
 8001492:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <HAL_RCC_OscConfig+0x354>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2513      	movs	r5, #19
 800149a:	197c      	adds	r4, r7, r5
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fb9d 	bl	8000bdc <HAL_InitTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d046      	beq.n	800153c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e2d2      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d027      	beq.n	800150a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2209      	movs	r2, #9
 80014c0:	4393      	bics	r3, r2
 80014c2:	0019      	movs	r1, r3
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80014c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbcc 	bl	8000c68 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbc7 	bl	8000c68 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e2b8      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e8:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2204      	movs	r2, #4
 80014ee:	4013      	ands	r3, r2
 80014f0:	d0f1      	beq.n	80014d6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x348>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	021a      	lsls	r2, r3, #8
 8001502:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	e018      	b.n	800153c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001510:	2101      	movs	r1, #1
 8001512:	438a      	bics	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fba7 	bl	8000c68 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fba2 	bl	8000c68 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e293      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d1f1      	bne.n	8001520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2210      	movs	r2, #16
 8001542:	4013      	ands	r3, r2
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x280>
 8001546:	e0a2      	b.n	800168e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d140      	bne.n	80015d0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x29e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e279      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a2d      	ldr	r2, [pc, #180]	; (8001620 <HAL_RCC_OscConfig+0x358>)
 800156c:	4013      	ands	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	0a19      	lsrs	r1, r3, #8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	061a      	lsls	r2, r3, #24
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	0b5b      	lsrs	r3, r3, #13
 8001594:	3301      	adds	r3, #1
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	0212      	lsls	r2, r2, #8
 800159a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	210f      	movs	r1, #15
 80015a4:	400b      	ands	r3, r1
 80015a6:	491b      	ldr	r1, [pc, #108]	; (8001614 <HAL_RCC_OscConfig+0x34c>)
 80015a8:	5ccb      	ldrb	r3, [r1, r3]
 80015aa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_RCC_OscConfig+0x350>)
 80015ae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_RCC_OscConfig+0x354>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2513      	movs	r5, #19
 80015b6:	197c      	adds	r4, r7, r5
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff fb0f 	bl	8000bdc <HAL_InitTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015c2:	197b      	adds	r3, r7, r5
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d061      	beq.n	800168e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80015ca:	197b      	adds	r3, r7, r5
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	e244      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d040      	beq.n	800165a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0049      	lsls	r1, r1, #1
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb3f 	bl	8000c68 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ee:	e019      	b.n	8001624 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f0:	f7ff fb3a 	bl	8000c68 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d912      	bls.n	8001624 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e22b      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000
 8001608:	fffeffff 	.word	0xfffeffff
 800160c:	fffbffff 	.word	0xfffbffff
 8001610:	ffffe0ff 	.word	0xffffe0ff
 8001614:	08003250 	.word	0x08003250
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004
 8001620:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001624:	4bca      	ldr	r3, [pc, #808]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4013      	ands	r3, r2
 800162e:	d0df      	beq.n	80015f0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001630:	4bc7      	ldr	r3, [pc, #796]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4ac7      	ldr	r2, [pc, #796]	; (8001954 <HAL_RCC_OscConfig+0x68c>)
 8001636:	4013      	ands	r3, r2
 8001638:	0019      	movs	r1, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800163e:	4bc4      	ldr	r3, [pc, #784]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001644:	4bc2      	ldr	r3, [pc, #776]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	0a19      	lsrs	r1, r3, #8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	061a      	lsls	r2, r3, #24
 8001652:	4bbf      	ldr	r3, [pc, #764]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001654:	430a      	orrs	r2, r1
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	e019      	b.n	800168e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800165a:	4bbd      	ldr	r3, [pc, #756]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4bbc      	ldr	r3, [pc, #752]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001660:	49bd      	ldr	r1, [pc, #756]	; (8001958 <HAL_RCC_OscConfig+0x690>)
 8001662:	400a      	ands	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff faff 	bl	8000c68 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001670:	f7ff fafa 	bl	8000c68 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1eb      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001682:	4bb3      	ldr	r3, [pc, #716]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2208      	movs	r2, #8
 8001694:	4013      	ands	r3, r2
 8001696:	d036      	beq.n	8001706 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d019      	beq.n	80016d4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a0:	4bab      	ldr	r3, [pc, #684]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80016a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a4:	4baa      	ldr	r3, [pc, #680]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fadc 	bl	8000c68 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fad7 	bl	8000c68 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1c8      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016c8:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80016ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d0f1      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3ee>
 80016d2:	e018      	b.n	8001706 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b9e      	ldr	r3, [pc, #632]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80016d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d8:	4b9d      	ldr	r3, [pc, #628]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80016da:	2101      	movs	r1, #1
 80016dc:	438a      	bics	r2, r1
 80016de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fac2 	bl	8000c68 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff fabd 	bl	8000c68 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1ae      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016fc:	4b94      	ldr	r3, [pc, #592]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80016fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001700:	2202      	movs	r2, #2
 8001702:	4013      	ands	r3, r2
 8001704:	d1f1      	bne.n	80016ea <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x44a>
 8001710:	e0ae      	b.n	8001870 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2023      	movs	r0, #35	; 0x23
 8001714:	183b      	adds	r3, r7, r0
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171a:	4b8d      	ldr	r3, [pc, #564]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800171c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	055b      	lsls	r3, r3, #21
 8001722:	4013      	ands	r3, r2
 8001724:	d109      	bne.n	800173a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b8a      	ldr	r3, [pc, #552]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800172a:	4b89      	ldr	r3, [pc, #548]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0549      	lsls	r1, r1, #21
 8001730:	430a      	orrs	r2, r1
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001734:	183b      	adds	r3, r7, r0
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x694>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b85      	ldr	r3, [pc, #532]	; (800195c <HAL_RCC_OscConfig+0x694>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0x694>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0049      	lsls	r1, r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001754:	f7ff fa88 	bl	8000c68 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff fa83 	bl	8000c68 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e174      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b7a      	ldr	r3, [pc, #488]	; (800195c <HAL_RCC_OscConfig+0x694>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4d0>
 8001788:	4b71      	ldr	r3, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800178a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178c:	4b70      	ldr	r3, [pc, #448]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0049      	lsls	r1, r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	651a      	str	r2, [r3, #80]	; 0x50
 8001796:	e031      	b.n	80017fc <HAL_RCC_OscConfig+0x534>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x4f2>
 80017a0:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017a6:	496c      	ldr	r1, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x690>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017b2:	496b      	ldr	r1, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x698>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	651a      	str	r2, [r3, #80]	; 0x50
 80017b8:	e020      	b.n	80017fc <HAL_RCC_OscConfig+0x534>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d10e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x51c>
 80017c6:	4b62      	ldr	r3, [pc, #392]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	00c9      	lsls	r1, r1, #3
 80017d0:	430a      	orrs	r2, r1
 80017d2:	651a      	str	r2, [r3, #80]	; 0x50
 80017d4:	4b5e      	ldr	r3, [pc, #376]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0049      	lsls	r1, r1, #1
 80017de:	430a      	orrs	r2, r1
 80017e0:	651a      	str	r2, [r3, #80]	; 0x50
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0x534>
 80017e4:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017ea:	495b      	ldr	r1, [pc, #364]	; (8001958 <HAL_RCC_OscConfig+0x690>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	651a      	str	r2, [r3, #80]	; 0x50
 80017f0:	4b57      	ldr	r3, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f4:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80017f6:	495a      	ldr	r1, [pc, #360]	; (8001960 <HAL_RCC_OscConfig+0x698>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d015      	beq.n	8001830 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fa30 	bl	8000c68 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800180c:	e009      	b.n	8001822 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fa2b 	bl	8000c68 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_RCC_OscConfig+0x69c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e11b      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001822:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d0ef      	beq.n	800180e <HAL_RCC_OscConfig+0x546>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fa1a 	bl	8000c68 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001838:	e009      	b.n	800184e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fa15 	bl	8000c68 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x69c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e105      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800184e:	4b40      	ldr	r3, [pc, #256]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d1ef      	bne.n	800183a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800185a:	2323      	movs	r3, #35	; 0x23
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800186a:	493f      	ldr	r1, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x6a0>)
 800186c:	400a      	ands	r2, r1
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2220      	movs	r2, #32
 8001876:	4013      	ands	r3, r2
 8001878:	d049      	beq.n	800190e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d026      	beq.n	80018d0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001888:	2101      	movs	r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_RCC_OscConfig+0x6a4>)
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x6a4>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0189      	lsls	r1, r1, #6
 80018a4:	430a      	orrs	r2, r1
 80018a6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff f9de 	bl	8000c68 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b2:	f7ff f9d9 	bl	8000c68 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ca      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d0f1      	beq.n	80018b2 <HAL_RCC_OscConfig+0x5ea>
 80018ce:	e01e      	b.n	800190e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	438a      	bics	r2, r1
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_RCC_OscConfig+0x6a4>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_OscConfig+0x6a4>)
 80018e2:	4923      	ldr	r1, [pc, #140]	; (8001970 <HAL_RCC_OscConfig+0x6a8>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff f9be 	bl	8000c68 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f2:	f7ff f9b9 	bl	8000c68 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0aa      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f1      	bne.n	80018f2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <HAL_RCC_OscConfig+0x650>
 8001916:	e09f      	b.n	8001a58 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d100      	bne.n	8001920 <HAL_RCC_OscConfig+0x658>
 800191e:	e078      	b.n	8001a12 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	2b02      	cmp	r3, #2
 8001926:	d159      	bne.n	80019dc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_RCC_OscConfig+0x688>)
 800192e:	4911      	ldr	r1, [pc, #68]	; (8001974 <HAL_RCC_OscConfig+0x6ac>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff f998 	bl	8000c68 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f993 	bl	8000c68 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d915      	bls.n	8001978 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e084      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
 8001950:	40021000 	.word	0x40021000
 8001954:	ffff1fff 	.word	0xffff1fff
 8001958:	fffffeff 	.word	0xfffffeff
 800195c:	40007000 	.word	0x40007000
 8001960:	fffffbff 	.word	0xfffffbff
 8001964:	00001388 	.word	0x00001388
 8001968:	efffffff 	.word	0xefffffff
 800196c:	40010000 	.word	0x40010000
 8001970:	ffffdfff 	.word	0xffffdfff
 8001974:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	049b      	lsls	r3, r3, #18
 8001980:	4013      	ands	r3, r2
 8001982:	d1dc      	bne.n	800193e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_RCC_OscConfig+0x7a0>)
 800198a:	4013      	ands	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	431a      	orrs	r2, r3
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0449      	lsls	r1, r1, #17
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f959 	bl	8000c68 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f954 	bl	8000c68 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e045      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	049b      	lsls	r3, r3, #18
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x6f4>
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 80019e2:	4922      	ldr	r1, [pc, #136]	; (8001a6c <HAL_RCC_OscConfig+0x7a4>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f93e 	bl	8000c68 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff f939 	bl	8000c68 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e02a      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	049b      	lsls	r3, r3, #18
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x72a>
 8001a10:	e022      	b.n	8001a58 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e01d      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x79c>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	025b      	lsls	r3, r3, #9
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10f      	bne.n	8001a54 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	23f0      	movs	r3, #240	; 0xf0
 8001a38:	039b      	lsls	r3, r3, #14
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	23c0      	movs	r3, #192	; 0xc0
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b00a      	add	sp, #40	; 0x28
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40021000 	.word	0x40021000
 8001a68:	ff02ffff 	.word	0xff02ffff
 8001a6c:	feffffff 	.word	0xfeffffff

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e128      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d91e      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f8e0 	bl	8000c68 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f8db 	bl	8000c68 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e109      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ada:	4b83      	ldr	r3, [pc, #524]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	22f0      	movs	r2, #240	; 0xf0
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b7f      	ldr	r3, [pc, #508]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_ClockConfig+0x8a>
 8001af8:	e089      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b02:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d120      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0e1      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	049b      	lsls	r3, r3, #18
 8001b22:	4013      	ands	r3, r2
 8001b24:	d114      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0d5      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b32:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0ca      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b40:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0c2      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f880 	bl	8000c68 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d111      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b76:	f7ff f877 	bl	8000c68 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0a5      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	220c      	movs	r2, #12
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d1ef      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x106>
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d111      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7ff f861 	bl	8000c68 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e08f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	220c      	movs	r2, #12
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d1ef      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x132>
 8001bc2:	e024      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d11b      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7ff f84b 	bl	8000c68 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e079      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	220c      	movs	r2, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d1ef      	bne.n	8001bce <HAL_RCC_ClockConfig+0x15e>
 8001bee:	e00e      	b.n	8001c0e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff f83a 	bl	8000c68 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e068      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d21e      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4393      	bics	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c2e:	f7ff f81b 	bl	8000c68 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f816 	bl	8000c68 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e044      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d1ee      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4013      	ands	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x27c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d00a      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <HAL_RCC_ClockConfig+0x280>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00da      	lsls	r2, r3, #3
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c98:	f000 f832 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001c9c:	0001      	movs	r1, r0
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x284>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	000a      	movs	r2, r1
 8001cae:	40da      	lsrs	r2, r3
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_ClockConfig+0x288>)
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_ClockConfig+0x28c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	250b      	movs	r5, #11
 8001cba:	197c      	adds	r4, r7, r5
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7fe ff8d 	bl	8000bdc <HAL_InitTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cce:	197b      	adds	r3, r7, r5
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b004      	add	sp, #16
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	00001388 	.word	0x00001388
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	fffff8ff 	.word	0xfffff8ff
 8001cf0:	ffffc7ff 	.word	0xffffc7ff
 8001cf4:	08003250 	.word	0x08003250
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b08e      	sub	sp, #56	; 0x38
 8001d04:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	230c      	movs	r3, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d014      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x40>
 8001d16:	d900      	bls.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1a>
 8001d18:	e07b      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x112>
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x24>
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d22:	e076      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d24:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d32:	e07c      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d34:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d38:	e079      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3e:	e076      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	0c9a      	lsrs	r2, r3, #18
 8001d44:	230f      	movs	r3, #15
 8001d46:	401a      	ands	r2, r3
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	0d9a      	lsrs	r2, r3, #22
 8001d52:	2303      	movs	r3, #3
 8001d54:	4013      	ands	r3, r2
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d01a      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	4a35      	ldr	r2, [pc, #212]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d70:	2300      	movs	r3, #0
 8001d72:	69b8      	ldr	r0, [r7, #24]
 8001d74:	69f9      	ldr	r1, [r7, #28]
 8001d76:	f7fe fa73 	bl	8000260 <__aeabi_lmul>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	000b      	movs	r3, r1
 8001d7e:	0010      	movs	r0, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f7fe fa47 	bl	8000220 <__aeabi_uldivmod>
 8001d92:	0002      	movs	r2, r0
 8001d94:	000b      	movs	r3, r1
 8001d96:	0013      	movs	r3, r2
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9a:	e037      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2210      	movs	r2, #16
 8001da2:	4013      	ands	r3, r2
 8001da4:	d01a      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001db0:	2300      	movs	r3, #0
 8001db2:	68b8      	ldr	r0, [r7, #8]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	f7fe fa53 	bl	8000260 <__aeabi_lmul>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f7fe fa27 	bl	8000220 <__aeabi_uldivmod>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dda:	e017      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	0018      	movs	r0, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	0019      	movs	r1, r3
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x140>)
 8001de6:	2300      	movs	r3, #0
 8001de8:	f7fe fa3a 	bl	8000260 <__aeabi_lmul>
 8001dec:	0002      	movs	r2, r0
 8001dee:	000b      	movs	r3, r1
 8001df0:	0010      	movs	r0, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	001c      	movs	r4, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	001d      	movs	r5, r3
 8001dfc:	0022      	movs	r2, r4
 8001dfe:	002b      	movs	r3, r5
 8001e00:	f7fe fa0e 	bl	8000220 <__aeabi_uldivmod>
 8001e04:	0002      	movs	r2, r0
 8001e06:	000b      	movs	r3, r1
 8001e08:	0013      	movs	r3, r2
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e10:	e00d      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0b5b      	lsrs	r3, r3, #13
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	3301      	adds	r3, #1
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	0212      	lsls	r2, r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e2c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b00e      	add	sp, #56	; 0x38
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	003d0900 	.word	0x003d0900
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	007a1200 	.word	0x007a1200
 8001e48:	08003268 	.word	0x08003268

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	20000000 	.word	0x20000000

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e64:	f7ff fff2 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e68:	0001      	movs	r1, r0
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	2207      	movs	r2, #7
 8001e72:	4013      	ands	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	40d9      	lsrs	r1, r3
 8001e7a:	000b      	movs	r3, r1
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08003260 	.word	0x08003260

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffdc 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e94:	0001      	movs	r1, r0
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0adb      	lsrs	r3, r3, #11
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	40d9      	lsrs	r1, r3
 8001ea6:	000b      	movs	r3, r1
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08003260 	.word	0x08003260

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ec0:	2317      	movs	r3, #23
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d106      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4013      	ands	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001ede:	e0d9      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee0:	4ba4      	ldr	r3, [pc, #656]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	055b      	lsls	r3, r3, #21
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d10a      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4ba1      	ldr	r3, [pc, #644]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef0:	4ba0      	ldr	r3, [pc, #640]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0549      	lsls	r1, r1, #21
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001efa:	2317      	movs	r3, #23
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b9d      	ldr	r3, [pc, #628]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d11a      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b9a      	ldr	r3, [pc, #616]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b99      	ldr	r3, [pc, #612]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	0049      	lsls	r1, r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fea4 	bl	8000c68 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7fe fe9f 	bl	8000c68 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e118      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f44:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	039b      	lsls	r3, r3, #14
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	23c0      	movs	r3, #192	; 0xc0
 8001f56:	039b      	lsls	r3, r3, #14
 8001f58:	4013      	ands	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	23c0      	movs	r3, #192	; 0xc0
 8001f66:	039b      	lsls	r3, r3, #14
 8001f68:	4013      	ands	r3, r2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	23c0      	movs	r3, #192	; 0xc0
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	401a      	ands	r2, r3
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d10a      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f82:	4b7c      	ldr	r3, [pc, #496]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	029b      	lsls	r3, r3, #10
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d101      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0e8      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f98:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d049      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d004      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	23c0      	movs	r3, #192	; 0xc0
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d034      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d02e      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fe0:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe4:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fea:	4b62      	ldr	r3, [pc, #392]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fee:	4b61      	ldr	r3, [pc, #388]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0309      	lsls	r1, r1, #12
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffc:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffe:	4960      	ldr	r1, [pc, #384]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002000:	400a      	ands	r2, r1
 8002002:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002004:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4013      	ands	r3, r2
 8002012:	d014      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe fe28 	bl	8000c68 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201c:	e009      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fe23 	bl	8000c68 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e09b      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002032:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d0ef      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	23c0      	movs	r3, #192	; 0xc0
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	401a      	ands	r2, r3
 8002048:	23c0      	movs	r3, #192	; 0xc0
 800204a:	029b      	lsls	r3, r3, #10
 800204c:	429a      	cmp	r2, r3
 800204e:	d10c      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	23c0      	movs	r3, #192	; 0xc0
 8002060:	039b      	lsls	r3, r3, #14
 8002062:	401a      	ands	r2, r3
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800206c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	23c0      	movs	r3, #192	; 0xc0
 8002074:	029b      	lsls	r3, r3, #10
 8002076:	401a      	ands	r2, r3
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800207a:	430a      	orrs	r2, r1
 800207c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800207e:	2317      	movs	r3, #23
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800208a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800208e:	493f      	ldr	r1, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002090:	400a      	ands	r2, r1
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	2203      	movs	r2, #3
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2202      	movs	r2, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	220c      	movs	r2, #12
 80020c2:	4393      	bics	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2204      	movs	r2, #4
 80020d6:	4013      	ands	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002108:	430a      	orrs	r2, r1
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002128:	430a      	orrs	r2, r1
 800212a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800213c:	4013      	ands	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002146:	430a      	orrs	r2, r1
 8002148:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	4013      	ands	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002164:	430a      	orrs	r2, r1
 8002166:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b006      	add	sp, #24
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	fffcffff 	.word	0xfffcffff
 8002180:	fff7ffff 	.word	0xfff7ffff
 8002184:	00001388 	.word	0x00001388
 8002188:	ffcfffff 	.word	0xffcfffff
 800218c:	efffffff 	.word	0xefffffff
 8002190:	fffff3ff 	.word	0xfffff3ff
 8002194:	ffffcfff 	.word	0xffffcfff
 8002198:	fbffffff 	.word	0xfbffffff
 800219c:	fff3ffff 	.word	0xfff3ffff

080021a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e044      	b.n	800223c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d107      	bne.n	80021ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2274      	movs	r2, #116	; 0x74
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7fe fc49 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2224      	movs	r2, #36	; 0x24
 80021ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 faf0 	bl	80027c8 <UART_SetConfig>
 80021e8:	0003      	movs	r3, r0
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e024      	b.n	800223c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fda1 	bl	8002d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	490d      	ldr	r1, [pc, #52]	; (8002244 <HAL_UART_Init+0xa4>)
 800220e:	400a      	ands	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	212a      	movs	r1, #42	; 0x2a
 800221e:	438a      	bics	r2, r1
 8002220:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fe39 	bl	8002eac <UART_CheckIdleState>
 800223a:	0003      	movs	r3, r0
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}
 8002244:	ffffb7ff 	.word	0xffffb7ff

08002248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225c:	2b20      	cmp	r3, #32
 800225e:	d000      	beq.n	8002262 <HAL_UART_Transmit+0x1a>
 8002260:	e095      	b.n	800238e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_UART_Transmit+0x28>
 8002268:	1dbb      	adds	r3, r7, #6
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e08d      	b.n	8002390 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	429a      	cmp	r2, r3
 800227e:	d109      	bne.n	8002294 <HAL_UART_Transmit+0x4c>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2201      	movs	r2, #1
 800228c:	4013      	ands	r3, r2
 800228e:	d001      	beq.n	8002294 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e07d      	b.n	8002390 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2274      	movs	r2, #116	; 0x74
 8002298:	5c9b      	ldrb	r3, [r3, r2]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Transmit+0x5a>
 800229e:	2302      	movs	r3, #2
 80022a0:	e076      	b.n	8002390 <HAL_UART_Transmit+0x148>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2274      	movs	r2, #116	; 0x74
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	2100      	movs	r1, #0
 80022b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fcd6 	bl	8000c68 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1dba      	adds	r2, r7, #6
 80022c4:	2150      	movs	r1, #80	; 0x50
 80022c6:	8812      	ldrh	r2, [r2, #0]
 80022c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1dba      	adds	r2, r7, #6
 80022ce:	2152      	movs	r1, #82	; 0x52
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	429a      	cmp	r2, r3
 80022de:	d108      	bne.n	80022f2 <HAL_UART_Transmit+0xaa>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e003      	b.n	80022fa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2274      	movs	r2, #116	; 0x74
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002302:	e02c      	b.n	800235e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	0013      	movs	r3, r2
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	f000 fe13 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d001      	beq.n	800231e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e038      	b.n	8002390 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	05d2      	lsls	r2, r2, #23
 8002330:	0dd2      	lsrs	r2, r2, #23
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	3302      	adds	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	e007      	b.n	800234c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3301      	adds	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2252      	movs	r2, #82	; 0x52
 8002350:	5a9b      	ldrh	r3, [r3, r2]
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b299      	uxth	r1, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2252      	movs	r2, #82	; 0x52
 800235c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2252      	movs	r2, #82	; 0x52
 8002362:	5a9b      	ldrh	r3, [r3, r2]
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1cc      	bne.n	8002304 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	0013      	movs	r3, r2
 8002374:	2200      	movs	r2, #0
 8002376:	2140      	movs	r1, #64	; 0x40
 8002378:	f000 fde0 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 800237c:	1e03      	subs	r3, r0, #0
 800237e:	d001      	beq.n	8002384 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e005      	b.n	8002390 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b008      	add	sp, #32
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4ab5      	ldr	r2, [pc, #724]	; (8002690 <HAL_UART_IRQHandler+0x2f8>)
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d112      	bne.n	80023ec <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2220      	movs	r2, #32
 80023ca:	4013      	ands	r3, r2
 80023cc:	d00e      	beq.n	80023ec <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2220      	movs	r2, #32
 80023d2:	4013      	ands	r3, r2
 80023d4:	d00a      	beq.n	80023ec <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d100      	bne.n	80023e0 <HAL_UART_IRQHandler+0x48>
 80023de:	e1d1      	b.n	8002784 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	0010      	movs	r0, r2
 80023e8:	4798      	blx	r3
      }
      return;
 80023ea:	e1cb      	b.n	8002784 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d100      	bne.n	80023f4 <HAL_UART_IRQHandler+0x5c>
 80023f2:	e0d9      	b.n	80025a8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d104      	bne.n	8002406 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4aa5      	ldr	r2, [pc, #660]	; (8002694 <HAL_UART_IRQHandler+0x2fc>)
 8002400:	4013      	ands	r3, r2
 8002402:	d100      	bne.n	8002406 <HAL_UART_IRQHandler+0x6e>
 8002404:	e0d0      	b.n	80025a8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2201      	movs	r2, #1
 800240a:	4013      	ands	r3, r2
 800240c:	d010      	beq.n	8002430 <HAL_UART_IRQHandler+0x98>
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d00b      	beq.n	8002430 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	589b      	ldr	r3, [r3, r2]
 8002426:	2201      	movs	r2, #1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d00f      	beq.n	8002458 <HAL_UART_IRQHandler+0xc0>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2201      	movs	r2, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d00b      	beq.n	8002458 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2202      	movs	r2, #2
 8002446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	589b      	ldr	r3, [r3, r2]
 800244e:	2204      	movs	r2, #4
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2204      	movs	r2, #4
 800245c:	4013      	ands	r3, r2
 800245e:	d00f      	beq.n	8002480 <HAL_UART_IRQHandler+0xe8>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d00b      	beq.n	8002480 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2204      	movs	r2, #4
 800246e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	589b      	ldr	r3, [r3, r2]
 8002476:	2202      	movs	r2, #2
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2208      	movs	r2, #8
 8002484:	4013      	ands	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2220      	movs	r2, #32
 800248c:	4013      	ands	r3, r2
 800248e:	d103      	bne.n	8002498 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002496:	d00b      	beq.n	80024b0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2208      	movs	r2, #8
 800249e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	589b      	ldr	r3, [r3, r2]
 80024a6:	2208      	movs	r2, #8
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4013      	ands	r3, r2
 80024b8:	d011      	beq.n	80024de <HAL_UART_IRQHandler+0x146>
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	04db      	lsls	r3, r3, #19
 80024c0:	4013      	ands	r3, r2
 80024c2:	d00c      	beq.n	80024de <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	589b      	ldr	r3, [r3, r2]
 80024d4:	2220      	movs	r2, #32
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	589b      	ldr	r3, [r3, r2]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d100      	bne.n	80024ea <HAL_UART_IRQHandler+0x152>
 80024e8:	e14e      	b.n	8002788 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2220      	movs	r2, #32
 80024ee:	4013      	ands	r3, r2
 80024f0:	d00c      	beq.n	800250c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2220      	movs	r2, #32
 80024f6:	4013      	ands	r3, r2
 80024f8:	d008      	beq.n	800250c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	0010      	movs	r0, r2
 800250a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	589b      	ldr	r3, [r3, r2]
 8002512:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	4013      	ands	r3, r2
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d003      	beq.n	800252a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2228      	movs	r2, #40	; 0x28
 8002526:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002528:	d033      	beq.n	8002592 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 fd83 	bl	8003038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2240      	movs	r2, #64	; 0x40
 800253a:	4013      	ands	r3, r2
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d123      	bne.n	8002588 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2140      	movs	r1, #64	; 0x40
 800254c:	438a      	bics	r2, r1
 800254e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	2b00      	cmp	r3, #0
 8002556:	d012      	beq.n	800257e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <HAL_UART_IRQHandler+0x300>)
 800255e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	0018      	movs	r0, r3
 8002566:	f7fe fccb 	bl	8000f00 <HAL_DMA_Abort_IT>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d01a      	beq.n	80025a4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	0018      	movs	r0, r3
 800257a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257c:	e012      	b.n	80025a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f90d 	bl	80027a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002586:	e00d      	b.n	80025a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f908 	bl	80027a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	e008      	b.n	80025a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f903 	bl	80027a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	2100      	movs	r1, #0
 80025a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80025a2:	e0f1      	b.n	8002788 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	46c0      	nop			; (mov r8, r8)
    return;
 80025a6:	e0ef      	b.n	8002788 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d000      	beq.n	80025b2 <HAL_UART_IRQHandler+0x21a>
 80025b0:	e0b5      	b.n	800271e <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2210      	movs	r2, #16
 80025b6:	4013      	ands	r3, r2
 80025b8:	d100      	bne.n	80025bc <HAL_UART_IRQHandler+0x224>
 80025ba:	e0b0      	b.n	800271e <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2210      	movs	r2, #16
 80025c0:	4013      	ands	r3, r2
 80025c2:	d100      	bne.n	80025c6 <HAL_UART_IRQHandler+0x22e>
 80025c4:	e0ab      	b.n	800271e <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2210      	movs	r2, #16
 80025cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d161      	bne.n	80026a0 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	2108      	movs	r1, #8
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <HAL_UART_IRQHandler+0x25c>
 80025f2:	e0cb      	b.n	800278c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2258      	movs	r2, #88	; 0x58
 80025f8:	5a9b      	ldrh	r3, [r3, r2]
 80025fa:	187a      	adds	r2, r7, r1
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d300      	bcc.n	8002604 <HAL_UART_IRQHandler+0x26c>
 8002602:	e0c3      	b.n	800278c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	187a      	adds	r2, r7, r1
 8002608:	215a      	movs	r1, #90	; 0x5a
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2220      	movs	r2, #32
 8002618:	4013      	ands	r3, r2
 800261a:	d12a      	bne.n	8002672 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	491d      	ldr	r1, [pc, #116]	; (800269c <HAL_UART_IRQHandler+0x304>)
 8002628:	400a      	ands	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2140      	movs	r1, #64	; 0x40
 8002648:	438a      	bics	r2, r1
 800264a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2110      	movs	r1, #16
 8002664:	438a      	bics	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	0018      	movs	r0, r3
 800266e:	f7fe fc07 	bl	8000e80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2258      	movs	r2, #88	; 0x58
 8002676:	5a9a      	ldrh	r2, [r3, r2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	215a      	movs	r1, #90	; 0x5a
 800267c:	5a5b      	ldrh	r3, [r3, r1]
 800267e:	b29b      	uxth	r3, r3
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f891 	bl	80027b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800268e:	e07d      	b.n	800278c <HAL_UART_IRQHandler+0x3f4>
 8002690:	0000080f 	.word	0x0000080f
 8002694:	04000120 	.word	0x04000120
 8002698:	08003099 	.word	0x08003099
 800269c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2258      	movs	r2, #88	; 0x58
 80026a4:	5a99      	ldrh	r1, [r3, r2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	225a      	movs	r2, #90	; 0x5a
 80026aa:	5a9b      	ldrh	r3, [r3, r2]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	200a      	movs	r0, #10
 80026b0:	183b      	adds	r3, r7, r0
 80026b2:	1a8a      	subs	r2, r1, r2
 80026b4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	225a      	movs	r2, #90	; 0x5a
 80026ba:	5a9b      	ldrh	r3, [r3, r2]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_UART_IRQHandler+0x32c>
 80026c2:	e065      	b.n	8002790 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80026c4:	183b      	adds	r3, r7, r0
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d061      	beq.n	8002790 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4931      	ldr	r1, [pc, #196]	; (800279c <HAL_UART_IRQHandler+0x404>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2110      	movs	r1, #16
 800270a:	438a      	bics	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800270e:	183b      	adds	r3, r7, r0
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f84a 	bl	80027b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800271c:	e038      	b.n	8002790 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	035b      	lsls	r3, r3, #13
 8002724:	4013      	ands	r3, r2
 8002726:	d00e      	beq.n	8002746 <HAL_UART_IRQHandler+0x3ae>
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	03db      	lsls	r3, r3, #15
 800272e:	4013      	ands	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	0352      	lsls	r2, r2, #13
 800273a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fcdb 	bl	80030fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002744:	e027      	b.n	8002796 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	4013      	ands	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	4013      	ands	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01a      	beq.n	8002794 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	0010      	movs	r0, r2
 8002766:	4798      	blx	r3
    }
    return;
 8002768:	e014      	b.n	8002794 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	4013      	ands	r3, r2
 8002770:	d011      	beq.n	8002796 <HAL_UART_IRQHandler+0x3fe>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	4013      	ands	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fca2 	bl	80030c6 <UART_EndTransmit_IT>
    return;
 8002782:	e008      	b.n	8002796 <HAL_UART_IRQHandler+0x3fe>
      return;
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	e006      	b.n	8002796 <HAL_UART_IRQHandler+0x3fe>
    return;
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	e004      	b.n	8002796 <HAL_UART_IRQHandler+0x3fe>
      return;
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	e002      	b.n	8002796 <HAL_UART_IRQHandler+0x3fe>
      return;
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	e000      	b.n	8002796 <HAL_UART_IRQHandler+0x3fe>
    return;
 8002794:	46c0      	nop			; (mov r8, r8)
  }

}
 8002796:	46bd      	mov	sp, r7
 8002798:	b008      	add	sp, #32
 800279a:	bd80      	pop	{r7, pc}
 800279c:	fffffedf 	.word	0xfffffedf

080027a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	000a      	movs	r2, r1
 80027ba:	1cbb      	adds	r3, r7, #2
 80027bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027d0:	231a      	movs	r3, #26
 80027d2:	2218      	movs	r2, #24
 80027d4:	4694      	mov	ip, r2
 80027d6:	44bc      	add	ip, r7
 80027d8:	4463      	add	r3, ip
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4ab0      	ldr	r2, [pc, #704]	; (8002ac0 <UART_SetConfig+0x2f8>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4aac      	ldr	r2, [pc, #688]	; (8002ac4 <UART_SetConfig+0x2fc>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4aa6      	ldr	r2, [pc, #664]	; (8002ac8 <UART_SetConfig+0x300>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283a:	4313      	orrs	r3, r2
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4aa1      	ldr	r2, [pc, #644]	; (8002acc <UART_SetConfig+0x304>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a9d      	ldr	r2, [pc, #628]	; (8002ad0 <UART_SetConfig+0x308>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d136      	bne.n	80028cc <UART_SetConfig+0x104>
 800285e:	4b9d      	ldr	r3, [pc, #628]	; (8002ad4 <UART_SetConfig+0x30c>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	2203      	movs	r2, #3
 8002864:	4013      	ands	r3, r2
 8002866:	2b03      	cmp	r3, #3
 8002868:	d020      	beq.n	80028ac <UART_SetConfig+0xe4>
 800286a:	d827      	bhi.n	80028bc <UART_SetConfig+0xf4>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d00d      	beq.n	800288c <UART_SetConfig+0xc4>
 8002870:	d824      	bhi.n	80028bc <UART_SetConfig+0xf4>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <UART_SetConfig+0xb4>
 8002876:	2b01      	cmp	r3, #1
 8002878:	d010      	beq.n	800289c <UART_SetConfig+0xd4>
 800287a:	e01f      	b.n	80028bc <UART_SetConfig+0xf4>
 800287c:	231b      	movs	r3, #27
 800287e:	2218      	movs	r2, #24
 8002880:	4694      	mov	ip, r2
 8002882:	44bc      	add	ip, r7
 8002884:	4463      	add	r3, ip
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e0c5      	b.n	8002a18 <UART_SetConfig+0x250>
 800288c:	231b      	movs	r3, #27
 800288e:	2218      	movs	r2, #24
 8002890:	4694      	mov	ip, r2
 8002892:	44bc      	add	ip, r7
 8002894:	4463      	add	r3, ip
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e0bd      	b.n	8002a18 <UART_SetConfig+0x250>
 800289c:	231b      	movs	r3, #27
 800289e:	2218      	movs	r2, #24
 80028a0:	4694      	mov	ip, r2
 80028a2:	44bc      	add	ip, r7
 80028a4:	4463      	add	r3, ip
 80028a6:	2204      	movs	r2, #4
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e0b5      	b.n	8002a18 <UART_SetConfig+0x250>
 80028ac:	231b      	movs	r3, #27
 80028ae:	2218      	movs	r2, #24
 80028b0:	4694      	mov	ip, r2
 80028b2:	44bc      	add	ip, r7
 80028b4:	4463      	add	r3, ip
 80028b6:	2208      	movs	r2, #8
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e0ad      	b.n	8002a18 <UART_SetConfig+0x250>
 80028bc:	231b      	movs	r3, #27
 80028be:	2218      	movs	r2, #24
 80028c0:	4694      	mov	ip, r2
 80028c2:	44bc      	add	ip, r7
 80028c4:	4463      	add	r3, ip
 80028c6:	2210      	movs	r2, #16
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e0a5      	b.n	8002a18 <UART_SetConfig+0x250>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a81      	ldr	r2, [pc, #516]	; (8002ad8 <UART_SetConfig+0x310>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d136      	bne.n	8002944 <UART_SetConfig+0x17c>
 80028d6:	4b7f      	ldr	r3, [pc, #508]	; (8002ad4 <UART_SetConfig+0x30c>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	220c      	movs	r2, #12
 80028dc:	4013      	ands	r3, r2
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d020      	beq.n	8002924 <UART_SetConfig+0x15c>
 80028e2:	d827      	bhi.n	8002934 <UART_SetConfig+0x16c>
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d00d      	beq.n	8002904 <UART_SetConfig+0x13c>
 80028e8:	d824      	bhi.n	8002934 <UART_SetConfig+0x16c>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <UART_SetConfig+0x12c>
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d010      	beq.n	8002914 <UART_SetConfig+0x14c>
 80028f2:	e01f      	b.n	8002934 <UART_SetConfig+0x16c>
 80028f4:	231b      	movs	r3, #27
 80028f6:	2218      	movs	r2, #24
 80028f8:	4694      	mov	ip, r2
 80028fa:	44bc      	add	ip, r7
 80028fc:	4463      	add	r3, ip
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e089      	b.n	8002a18 <UART_SetConfig+0x250>
 8002904:	231b      	movs	r3, #27
 8002906:	2218      	movs	r2, #24
 8002908:	4694      	mov	ip, r2
 800290a:	44bc      	add	ip, r7
 800290c:	4463      	add	r3, ip
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e081      	b.n	8002a18 <UART_SetConfig+0x250>
 8002914:	231b      	movs	r3, #27
 8002916:	2218      	movs	r2, #24
 8002918:	4694      	mov	ip, r2
 800291a:	44bc      	add	ip, r7
 800291c:	4463      	add	r3, ip
 800291e:	2204      	movs	r2, #4
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e079      	b.n	8002a18 <UART_SetConfig+0x250>
 8002924:	231b      	movs	r3, #27
 8002926:	2218      	movs	r2, #24
 8002928:	4694      	mov	ip, r2
 800292a:	44bc      	add	ip, r7
 800292c:	4463      	add	r3, ip
 800292e:	2208      	movs	r2, #8
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e071      	b.n	8002a18 <UART_SetConfig+0x250>
 8002934:	231b      	movs	r3, #27
 8002936:	2218      	movs	r2, #24
 8002938:	4694      	mov	ip, r2
 800293a:	44bc      	add	ip, r7
 800293c:	4463      	add	r3, ip
 800293e:	2210      	movs	r2, #16
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e069      	b.n	8002a18 <UART_SetConfig+0x250>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a64      	ldr	r2, [pc, #400]	; (8002adc <UART_SetConfig+0x314>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d107      	bne.n	800295e <UART_SetConfig+0x196>
 800294e:	231b      	movs	r3, #27
 8002950:	2218      	movs	r2, #24
 8002952:	4694      	mov	ip, r2
 8002954:	44bc      	add	ip, r7
 8002956:	4463      	add	r3, ip
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e05c      	b.n	8002a18 <UART_SetConfig+0x250>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a5f      	ldr	r2, [pc, #380]	; (8002ae0 <UART_SetConfig+0x318>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d107      	bne.n	8002978 <UART_SetConfig+0x1b0>
 8002968:	231b      	movs	r3, #27
 800296a:	2218      	movs	r2, #24
 800296c:	4694      	mov	ip, r2
 800296e:	44bc      	add	ip, r7
 8002970:	4463      	add	r3, ip
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e04f      	b.n	8002a18 <UART_SetConfig+0x250>
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <UART_SetConfig+0x300>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d143      	bne.n	8002a0a <UART_SetConfig+0x242>
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <UART_SetConfig+0x30c>)
 8002984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4013      	ands	r3, r2
 800298c:	22c0      	movs	r2, #192	; 0xc0
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	4293      	cmp	r3, r2
 8002992:	d02a      	beq.n	80029ea <UART_SetConfig+0x222>
 8002994:	22c0      	movs	r2, #192	; 0xc0
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	4293      	cmp	r3, r2
 800299a:	d82e      	bhi.n	80029fa <UART_SetConfig+0x232>
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d012      	beq.n	80029ca <UART_SetConfig+0x202>
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d826      	bhi.n	80029fa <UART_SetConfig+0x232>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <UART_SetConfig+0x1f2>
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	00d2      	lsls	r2, r2, #3
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d010      	beq.n	80029da <UART_SetConfig+0x212>
 80029b8:	e01f      	b.n	80029fa <UART_SetConfig+0x232>
 80029ba:	231b      	movs	r3, #27
 80029bc:	2218      	movs	r2, #24
 80029be:	4694      	mov	ip, r2
 80029c0:	44bc      	add	ip, r7
 80029c2:	4463      	add	r3, ip
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e026      	b.n	8002a18 <UART_SetConfig+0x250>
 80029ca:	231b      	movs	r3, #27
 80029cc:	2218      	movs	r2, #24
 80029ce:	4694      	mov	ip, r2
 80029d0:	44bc      	add	ip, r7
 80029d2:	4463      	add	r3, ip
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e01e      	b.n	8002a18 <UART_SetConfig+0x250>
 80029da:	231b      	movs	r3, #27
 80029dc:	2218      	movs	r2, #24
 80029de:	4694      	mov	ip, r2
 80029e0:	44bc      	add	ip, r7
 80029e2:	4463      	add	r3, ip
 80029e4:	2204      	movs	r2, #4
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e016      	b.n	8002a18 <UART_SetConfig+0x250>
 80029ea:	231b      	movs	r3, #27
 80029ec:	2218      	movs	r2, #24
 80029ee:	4694      	mov	ip, r2
 80029f0:	44bc      	add	ip, r7
 80029f2:	4463      	add	r3, ip
 80029f4:	2208      	movs	r2, #8
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e00e      	b.n	8002a18 <UART_SetConfig+0x250>
 80029fa:	231b      	movs	r3, #27
 80029fc:	2218      	movs	r2, #24
 80029fe:	4694      	mov	ip, r2
 8002a00:	44bc      	add	ip, r7
 8002a02:	4463      	add	r3, ip
 8002a04:	2210      	movs	r2, #16
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e006      	b.n	8002a18 <UART_SetConfig+0x250>
 8002a0a:	231b      	movs	r3, #27
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	4694      	mov	ip, r2
 8002a10:	44bc      	add	ip, r7
 8002a12:	4463      	add	r3, ip
 8002a14:	2210      	movs	r2, #16
 8002a16:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <UART_SetConfig+0x300>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d000      	beq.n	8002a24 <UART_SetConfig+0x25c>
 8002a22:	e09e      	b.n	8002b62 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a24:	231b      	movs	r3, #27
 8002a26:	2218      	movs	r2, #24
 8002a28:	4694      	mov	ip, r2
 8002a2a:	44bc      	add	ip, r7
 8002a2c:	4463      	add	r3, ip
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d01d      	beq.n	8002a70 <UART_SetConfig+0x2a8>
 8002a34:	dc20      	bgt.n	8002a78 <UART_SetConfig+0x2b0>
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d015      	beq.n	8002a66 <UART_SetConfig+0x29e>
 8002a3a:	dc1d      	bgt.n	8002a78 <UART_SetConfig+0x2b0>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <UART_SetConfig+0x27e>
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d005      	beq.n	8002a50 <UART_SetConfig+0x288>
 8002a44:	e018      	b.n	8002a78 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a46:	f7ff fa0b 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a4e:	e01d      	b.n	8002a8c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a50:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <UART_SetConfig+0x30c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	4013      	ands	r3, r2
 8002a58:	d002      	beq.n	8002a60 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <UART_SetConfig+0x31c>)
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a5e:	e015      	b.n	8002a8c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <UART_SetConfig+0x320>)
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a64:	e012      	b.n	8002a8c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a66:	f7ff f94b 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a6e:	e00d      	b.n	8002a8c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a76:	e009      	b.n	8002a8c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a7c:	231a      	movs	r3, #26
 8002a7e:	2218      	movs	r2, #24
 8002a80:	4694      	mov	ip, r2
 8002a82:	44bc      	add	ip, r7
 8002a84:	4463      	add	r3, ip
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
        break;
 8002a8a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <UART_SetConfig+0x2cc>
 8002a92:	e13c      	b.n	8002d0e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	0013      	movs	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d305      	bcc.n	8002ab0 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d91d      	bls.n	8002aec <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002ab0:	231a      	movs	r3, #26
 8002ab2:	2218      	movs	r2, #24
 8002ab4:	4694      	mov	ip, r2
 8002ab6:	44bc      	add	ip, r7
 8002ab8:	4463      	add	r3, ip
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e126      	b.n	8002d0e <UART_SetConfig+0x546>
 8002ac0:	efff69f3 	.word	0xefff69f3
 8002ac4:	ffffcfff 	.word	0xffffcfff
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	fffff4ff 	.word	0xfffff4ff
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40004400 	.word	0x40004400
 8002adc:	40004c00 	.word	0x40004c00
 8002ae0:	40005000 	.word	0x40005000
 8002ae4:	003d0900 	.word	0x003d0900
 8002ae8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	6939      	ldr	r1, [r7, #16]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	000b      	movs	r3, r1
 8002afa:	0e1b      	lsrs	r3, r3, #24
 8002afc:	0010      	movs	r0, r2
 8002afe:	0205      	lsls	r5, r0, #8
 8002b00:	431d      	orrs	r5, r3
 8002b02:	000b      	movs	r3, r1
 8002b04:	021c      	lsls	r4, r3, #8
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68b8      	ldr	r0, [r7, #8]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	1900      	adds	r0, r0, r4
 8002b18:	4169      	adcs	r1, r5
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f7fd fb7a 	bl	8000220 <__aeabi_uldivmod>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	000b      	movs	r3, r1
 8002b30:	0013      	movs	r3, r2
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d309      	bcc.n	8002b52 <UART_SetConfig+0x38a>
 8002b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	035b      	lsls	r3, r3, #13
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d204      	bcs.n	8002b52 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	e0dd      	b.n	8002d0e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002b52:	231a      	movs	r3, #26
 8002b54:	2218      	movs	r2, #24
 8002b56:	4694      	mov	ip, r2
 8002b58:	44bc      	add	ip, r7
 8002b5a:	4463      	add	r3, ip
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e0d5      	b.n	8002d0e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d000      	beq.n	8002b70 <UART_SetConfig+0x3a8>
 8002b6e:	e074      	b.n	8002c5a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002b70:	231b      	movs	r3, #27
 8002b72:	2218      	movs	r2, #24
 8002b74:	4694      	mov	ip, r2
 8002b76:	44bc      	add	ip, r7
 8002b78:	4463      	add	r3, ip
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d822      	bhi.n	8002bc6 <UART_SetConfig+0x3fe>
 8002b80:	009a      	lsls	r2, r3, #2
 8002b82:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <UART_SetConfig+0x568>)
 8002b84:	18d3      	adds	r3, r2, r3
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b8a:	f7ff f969 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b92:	e022      	b.n	8002bda <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff f97a 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b9c:	e01d      	b.n	8002bda <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <UART_SetConfig+0x56c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d002      	beq.n	8002bae <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ba8:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <UART_SetConfig+0x570>)
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bac:	e015      	b.n	8002bda <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002bae:	4b63      	ldr	r3, [pc, #396]	; (8002d3c <UART_SetConfig+0x574>)
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bb2:	e012      	b.n	8002bda <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb4:	f7ff f8a4 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bbc:	e00d      	b.n	8002bda <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bc4:	e009      	b.n	8002bda <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bca:	231a      	movs	r3, #26
 8002bcc:	2218      	movs	r2, #24
 8002bce:	4694      	mov	ip, r2
 8002bd0:	44bc      	add	ip, r7
 8002bd2:	4463      	add	r3, ip
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
        break;
 8002bd8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d100      	bne.n	8002be2 <UART_SetConfig+0x41a>
 8002be0:	e095      	b.n	8002d0e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	005a      	lsls	r2, r3, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	18d2      	adds	r2, r2, r3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f7fd fa87 	bl	8000108 <__udivsi3>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d921      	bls.n	8002c4a <UART_SetConfig+0x482>
 8002c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d21c      	bcs.n	8002c4a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	200e      	movs	r0, #14
 8002c16:	2418      	movs	r4, #24
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	181b      	adds	r3, r3, r0
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	438a      	bics	r2, r1
 8002c20:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b299      	uxth	r1, r3
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	181b      	adds	r3, r3, r0
 8002c32:	193a      	adds	r2, r7, r4
 8002c34:	1812      	adds	r2, r2, r0
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	193a      	adds	r2, r7, r4
 8002c42:	1812      	adds	r2, r2, r0
 8002c44:	8812      	ldrh	r2, [r2, #0]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	e061      	b.n	8002d0e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002c4a:	231a      	movs	r3, #26
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	4694      	mov	ip, r2
 8002c50:	44bc      	add	ip, r7
 8002c52:	4463      	add	r3, ip
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e059      	b.n	8002d0e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c5a:	231b      	movs	r3, #27
 8002c5c:	2218      	movs	r2, #24
 8002c5e:	4694      	mov	ip, r2
 8002c60:	44bc      	add	ip, r7
 8002c62:	4463      	add	r3, ip
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d822      	bhi.n	8002cb0 <UART_SetConfig+0x4e8>
 8002c6a:	009a      	lsls	r2, r3, #2
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <UART_SetConfig+0x578>)
 8002c6e:	18d3      	adds	r3, r2, r3
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c74:	f7ff f8f4 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c7c:	e022      	b.n	8002cc4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c7e:	f7ff f905 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002c82:	0003      	movs	r3, r0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c86:	e01d      	b.n	8002cc4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c88:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <UART_SetConfig+0x56c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d002      	beq.n	8002c98 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <UART_SetConfig+0x570>)
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c96:	e015      	b.n	8002cc4 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <UART_SetConfig+0x574>)
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c9c:	e012      	b.n	8002cc4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c9e:	f7ff f82f 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ca6:	e00d      	b.n	8002cc4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cae:	e009      	b.n	8002cc4 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002cb4:	231a      	movs	r3, #26
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	4694      	mov	ip, r2
 8002cba:	44bc      	add	ip, r7
 8002cbc:	4463      	add	r3, ip
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
        break;
 8002cc2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d021      	beq.n	8002d0e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085a      	lsrs	r2, r3, #1
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	18d2      	adds	r2, r2, r3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0019      	movs	r1, r3
 8002cda:	0010      	movs	r0, r2
 8002cdc:	f7fd fa14 	bl	8000108 <__udivsi3>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	2b0f      	cmp	r3, #15
 8002cea:	d909      	bls.n	8002d00 <UART_SetConfig+0x538>
 8002cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d204      	bcs.n	8002d00 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	e006      	b.n	8002d0e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d00:	231a      	movs	r3, #26
 8002d02:	2218      	movs	r2, #24
 8002d04:	4694      	mov	ip, r2
 8002d06:	44bc      	add	ip, r7
 8002d08:	4463      	add	r3, ip
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2200      	movs	r2, #0
 8002d12:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2200      	movs	r2, #0
 8002d18:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d1a:	231a      	movs	r3, #26
 8002d1c:	2218      	movs	r2, #24
 8002d1e:	4694      	mov	ip, r2
 8002d20:	44bc      	add	ip, r7
 8002d22:	4463      	add	r3, ip
 8002d24:	781b      	ldrb	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b00e      	add	sp, #56	; 0x38
 8002d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	08003274 	.word	0x08003274
 8002d34:	40021000 	.word	0x40021000
 8002d38:	003d0900 	.word	0x003d0900
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	08003298 	.word	0x08003298

08002d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2201      	movs	r2, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <UART_AdvFeatureConfig+0x144>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <UART_AdvFeatureConfig+0x148>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2204      	movs	r2, #4
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <UART_AdvFeatureConfig+0x14c>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <UART_AdvFeatureConfig+0x150>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2210      	movs	r2, #16
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <UART_AdvFeatureConfig+0x154>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <UART_AdvFeatureConfig+0x158>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <UART_AdvFeatureConfig+0x15c>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	035b      	lsls	r3, r3, #13
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10b      	bne.n	8002e5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <UART_AdvFeatureConfig+0x160>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	4013      	ands	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <UART_AdvFeatureConfig+0x164>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	fffdffff 	.word	0xfffdffff
 8002e8c:	fffeffff 	.word	0xfffeffff
 8002e90:	fffbffff 	.word	0xfffbffff
 8002e94:	ffff7fff 	.word	0xffff7fff
 8002e98:	ffffefff 	.word	0xffffefff
 8002e9c:	ffffdfff 	.word	0xffffdfff
 8002ea0:	ffefffff 	.word	0xffefffff
 8002ea4:	ff9fffff 	.word	0xff9fffff
 8002ea8:	fff7ffff 	.word	0xfff7ffff

08002eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ebc:	f7fd fed4 	bl	8000c68 <HAL_GetTick>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d10c      	bne.n	8002eec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	0391      	lsls	r1, r2, #14
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <UART_CheckIdleState+0x8c>)
 8002edc:	9200      	str	r2, [sp, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f000 f82c 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e021      	b.n	8002f30 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d10c      	bne.n	8002f14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	03d1      	lsls	r1, r2, #15
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <UART_CheckIdleState+0x8c>)
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f000 f818 	bl	8002f3c <UART_WaitOnFlagUntilTimeout>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00d      	b.n	8002f30 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2274      	movs	r2, #116	; 0x74
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b004      	add	sp, #16
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	01ffffff 	.word	0x01ffffff

08002f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4c:	e05e      	b.n	800300c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	3301      	adds	r3, #1
 8002f52:	d05b      	beq.n	800300c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f54:	f7fd fe88 	bl	8000c68 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d302      	bcc.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11b      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	492f      	ldr	r1, [pc, #188]	; (8003034 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	438a      	bics	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2274      	movs	r2, #116	; 0x74
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e044      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	d02e      	beq.n	800300c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	401a      	ands	r2, r3
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d124      	bne.n	800300c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4917      	ldr	r1, [pc, #92]	; (8003034 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	438a      	bics	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	2120      	movs	r1, #32
 8002ffe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2274      	movs	r2, #116	; 0x74
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e00f      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	425a      	negs	r2, r3
 800301c:	4153      	adcs	r3, r2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	001a      	movs	r2, r3
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d091      	beq.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}
 8003034:	fffffe5f 	.word	0xfffffe5f

08003038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4912      	ldr	r1, [pc, #72]	; (8003094 <UART_EndRxTransfer+0x5c>)
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	438a      	bics	r2, r1
 800305e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2110      	movs	r1, #16
 8003074:	438a      	bics	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	665a      	str	r2, [r3, #100]	; 0x64
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	fffffedf 	.word	0xfffffedf

08003098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	225a      	movs	r2, #90	; 0x5a
 80030aa:	2100      	movs	r1, #0
 80030ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2252      	movs	r2, #82	; 0x52
 80030b2:	2100      	movs	r1, #0
 80030b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fb71 	bl	80027a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	438a      	bics	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd fc93 	bl	8000a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	2600      	movs	r6, #0
 8003110:	4d0c      	ldr	r5, [pc, #48]	; (8003144 <__libc_init_array+0x38>)
 8003112:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	2600      	movs	r6, #0
 800311e:	f000 f821 	bl	8003164 <_init>
 8003122:	4d0a      	ldr	r5, [pc, #40]	; (800314c <__libc_init_array+0x40>)
 8003124:	4c0a      	ldr	r4, [pc, #40]	; (8003150 <__libc_init_array+0x44>)
 8003126:	1b64      	subs	r4, r4, r5
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	00b3      	lsls	r3, r6, #2
 8003132:	58eb      	ldr	r3, [r5, r3]
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	00b3      	lsls	r3, r6, #2
 800313c:	58eb      	ldr	r3, [r5, r3]
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080032c4 	.word	0x080032c4
 8003148:	080032c4 	.word	0x080032c4
 800314c:	080032c4 	.word	0x080032c4
 8003150:	080032c8 	.word	0x080032c8

08003154 <memset>:
 8003154:	0003      	movs	r3, r0
 8003156:	1882      	adds	r2, r0, r2
 8003158:	4293      	cmp	r3, r2
 800315a:	d100      	bne.n	800315e <memset+0xa>
 800315c:	4770      	bx	lr
 800315e:	7019      	strb	r1, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	e7f9      	b.n	8003158 <memset+0x4>

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
