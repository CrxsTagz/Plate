
Prueba Proyecto 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003674  08003674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003688  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c8e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b5  00000000  00000000  00027cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00029578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013876  00000000  00000000  0002a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000956b  00000000  00000000  0003dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079081  00000000  00000000  00047221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c02a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a7c  00000000  00000000  000c02f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003520 	.word	0x08003520

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003520 	.word	0x08003520

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <plate>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void plate(int time, int rounds){
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]

int i = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]


/*HAL_UART_Transmit(&huart2, "Tiro: ", 6 , HAL_MAX_DELAY);
HAL_UART_Transmit(&huart2, "Puntuacion: ", 12, HAL_MAX_DELAY);
*/
int cont = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
HAL_UART_Transmit(&huart2, "\r-\t-\t-\t-\t-\t-\t-\t*\t-\t-\t\n", 23, HAL_MAX_DELAY);
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	49b0      	ldr	r1, [pc, #704]	; (8000774 <plate+0x2d8>)
 80004b4:	48b0      	ldr	r0, [pc, #704]	; (8000778 <plate+0x2dc>)
 80004b6:	2217      	movs	r2, #23
 80004b8:	f001 fed6 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r@", 2, HAL_MAX_DELAY);
 80004bc:	2301      	movs	r3, #1
 80004be:	425b      	negs	r3, r3
 80004c0:	49ae      	ldr	r1, [pc, #696]	; (800077c <plate+0x2e0>)
 80004c2:	48ad      	ldr	r0, [pc, #692]	; (8000778 <plate+0x2dc>)
 80004c4:	2202      	movs	r2, #2
 80004c6:	f001 fecf 	bl	8002268 <HAL_UART_Transmit>
cont++;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fbe2 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80004d8:	2301      	movs	r3, #1
 80004da:	425b      	negs	r3, r3
 80004dc:	49a8      	ldr	r1, [pc, #672]	; (8000780 <plate+0x2e4>)
 80004de:	48a6      	ldr	r0, [pc, #664]	; (8000778 <plate+0x2dc>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	f001 fec1 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, " ",  1, HAL_MAX_DELAY);
 80004e6:	2301      	movs	r3, #1
 80004e8:	425b      	negs	r3, r3
 80004ea:	49a6      	ldr	r1, [pc, #664]	; (8000784 <plate+0x2e8>)
 80004ec:	48a2      	ldr	r0, [pc, #648]	; (8000778 <plate+0x2dc>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	f001 feba 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80004f4:	2301      	movs	r3, #1
 80004f6:	425b      	negs	r3, r3
 80004f8:	49a1      	ldr	r1, [pc, #644]	; (8000780 <plate+0x2e4>)
 80004fa:	489f      	ldr	r0, [pc, #636]	; (8000778 <plate+0x2dc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	f001 feb3 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t@",2, HAL_MAX_DELAY);
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	49a0      	ldr	r1, [pc, #640]	; (8000788 <plate+0x2ec>)
 8000508:	489b      	ldr	r0, [pc, #620]	; (8000778 <plate+0x2dc>)
 800050a:	2202      	movs	r2, #2
 800050c:	f001 feac 	bl	8002268 <HAL_UART_Transmit>
cont++;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	3301      	adds	r3, #1
 8000514:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fbbf 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800051e:	2301      	movs	r3, #1
 8000520:	425b      	negs	r3, r3
 8000522:	4997      	ldr	r1, [pc, #604]	; (8000780 <plate+0x2e4>)
 8000524:	4894      	ldr	r0, [pc, #592]	; (8000778 <plate+0x2dc>)
 8000526:	2201      	movs	r2, #1
 8000528:	f001 fe9e 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t ", 2, HAL_MAX_DELAY);
 800052c:	2301      	movs	r3, #1
 800052e:	425b      	negs	r3, r3
 8000530:	4996      	ldr	r1, [pc, #600]	; (800078c <plate+0x2f0>)
 8000532:	4891      	ldr	r0, [pc, #580]	; (8000778 <plate+0x2dc>)
 8000534:	2202      	movs	r2, #2
 8000536:	f001 fe97 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800053a:	2301      	movs	r3, #1
 800053c:	425b      	negs	r3, r3
 800053e:	4990      	ldr	r1, [pc, #576]	; (8000780 <plate+0x2e4>)
 8000540:	488d      	ldr	r0, [pc, #564]	; (8000778 <plate+0x2dc>)
 8000542:	2201      	movs	r2, #1
 8000544:	f001 fe90 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t@", 3, HAL_MAX_DELAY);
 8000548:	2301      	movs	r3, #1
 800054a:	425b      	negs	r3, r3
 800054c:	4990      	ldr	r1, [pc, #576]	; (8000790 <plate+0x2f4>)
 800054e:	488a      	ldr	r0, [pc, #552]	; (8000778 <plate+0x2dc>)
 8000550:	2203      	movs	r2, #3
 8000552:	f001 fe89 	bl	8002268 <HAL_UART_Transmit>
cont++;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	3301      	adds	r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fb9c 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	4985      	ldr	r1, [pc, #532]	; (8000780 <plate+0x2e4>)
 800056a:	4883      	ldr	r0, [pc, #524]	; (8000778 <plate+0x2dc>)
 800056c:	2201      	movs	r2, #1
 800056e:	f001 fe7b 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t ", 3, HAL_MAX_DELAY);
 8000572:	2301      	movs	r3, #1
 8000574:	425b      	negs	r3, r3
 8000576:	4987      	ldr	r1, [pc, #540]	; (8000794 <plate+0x2f8>)
 8000578:	487f      	ldr	r0, [pc, #508]	; (8000778 <plate+0x2dc>)
 800057a:	2203      	movs	r2, #3
 800057c:	f001 fe74 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000580:	2301      	movs	r3, #1
 8000582:	425b      	negs	r3, r3
 8000584:	497e      	ldr	r1, [pc, #504]	; (8000780 <plate+0x2e4>)
 8000586:	487c      	ldr	r0, [pc, #496]	; (8000778 <plate+0x2dc>)
 8000588:	2201      	movs	r2, #1
 800058a:	f001 fe6d 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t@", 4, HAL_MAX_DELAY);
 800058e:	2301      	movs	r3, #1
 8000590:	425b      	negs	r3, r3
 8000592:	4981      	ldr	r1, [pc, #516]	; (8000798 <plate+0x2fc>)
 8000594:	4878      	ldr	r0, [pc, #480]	; (8000778 <plate+0x2dc>)
 8000596:	2204      	movs	r2, #4
 8000598:	f001 fe66 	bl	8002268 <HAL_UART_Transmit>
cont++;
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	3301      	adds	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fb79 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005aa:	2301      	movs	r3, #1
 80005ac:	425b      	negs	r3, r3
 80005ae:	4974      	ldr	r1, [pc, #464]	; (8000780 <plate+0x2e4>)
 80005b0:	4871      	ldr	r0, [pc, #452]	; (8000778 <plate+0x2dc>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	f001 fe58 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t ", 4, HAL_MAX_DELAY);
 80005b8:	2301      	movs	r3, #1
 80005ba:	425b      	negs	r3, r3
 80005bc:	4977      	ldr	r1, [pc, #476]	; (800079c <plate+0x300>)
 80005be:	486e      	ldr	r0, [pc, #440]	; (8000778 <plate+0x2dc>)
 80005c0:	2204      	movs	r2, #4
 80005c2:	f001 fe51 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005c6:	2301      	movs	r3, #1
 80005c8:	425b      	negs	r3, r3
 80005ca:	496d      	ldr	r1, [pc, #436]	; (8000780 <plate+0x2e4>)
 80005cc:	486a      	ldr	r0, [pc, #424]	; (8000778 <plate+0x2dc>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	f001 fe4a 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t@",5, HAL_MAX_DELAY);
 80005d4:	2301      	movs	r3, #1
 80005d6:	425b      	negs	r3, r3
 80005d8:	4971      	ldr	r1, [pc, #452]	; (80007a0 <plate+0x304>)
 80005da:	4867      	ldr	r0, [pc, #412]	; (8000778 <plate+0x2dc>)
 80005dc:	2205      	movs	r2, #5
 80005de:	f001 fe43 	bl	8002268 <HAL_UART_Transmit>
cont++;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fb56 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005f0:	2301      	movs	r3, #1
 80005f2:	425b      	negs	r3, r3
 80005f4:	4962      	ldr	r1, [pc, #392]	; (8000780 <plate+0x2e4>)
 80005f6:	4860      	ldr	r0, [pc, #384]	; (8000778 <plate+0x2dc>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	f001 fe35 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t ", 5, HAL_MAX_DELAY);
 80005fe:	2301      	movs	r3, #1
 8000600:	425b      	negs	r3, r3
 8000602:	4968      	ldr	r1, [pc, #416]	; (80007a4 <plate+0x308>)
 8000604:	485c      	ldr	r0, [pc, #368]	; (8000778 <plate+0x2dc>)
 8000606:	2205      	movs	r2, #5
 8000608:	f001 fe2e 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800060c:	2301      	movs	r3, #1
 800060e:	425b      	negs	r3, r3
 8000610:	495b      	ldr	r1, [pc, #364]	; (8000780 <plate+0x2e4>)
 8000612:	4859      	ldr	r0, [pc, #356]	; (8000778 <plate+0x2dc>)
 8000614:	2201      	movs	r2, #1
 8000616:	f001 fe27 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t@", 6, HAL_MAX_DELAY);
 800061a:	2301      	movs	r3, #1
 800061c:	425b      	negs	r3, r3
 800061e:	4962      	ldr	r1, [pc, #392]	; (80007a8 <plate+0x30c>)
 8000620:	4855      	ldr	r0, [pc, #340]	; (8000778 <plate+0x2dc>)
 8000622:	2206      	movs	r2, #6
 8000624:	f001 fe20 	bl	8002268 <HAL_UART_Transmit>
cont++;
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	3301      	adds	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fb33 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000636:	2301      	movs	r3, #1
 8000638:	425b      	negs	r3, r3
 800063a:	4951      	ldr	r1, [pc, #324]	; (8000780 <plate+0x2e4>)
 800063c:	484e      	ldr	r0, [pc, #312]	; (8000778 <plate+0x2dc>)
 800063e:	2201      	movs	r2, #1
 8000640:	f001 fe12 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t ", 6, HAL_MAX_DELAY);
 8000644:	2301      	movs	r3, #1
 8000646:	425b      	negs	r3, r3
 8000648:	4958      	ldr	r1, [pc, #352]	; (80007ac <plate+0x310>)
 800064a:	484b      	ldr	r0, [pc, #300]	; (8000778 <plate+0x2dc>)
 800064c:	2206      	movs	r2, #6
 800064e:	f001 fe0b 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	494a      	ldr	r1, [pc, #296]	; (8000780 <plate+0x2e4>)
 8000658:	4847      	ldr	r0, [pc, #284]	; (8000778 <plate+0x2dc>)
 800065a:	2201      	movs	r2, #1
 800065c:	f001 fe04 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t@", 7, HAL_MAX_DELAY);
 8000660:	2301      	movs	r3, #1
 8000662:	425b      	negs	r3, r3
 8000664:	4952      	ldr	r1, [pc, #328]	; (80007b0 <plate+0x314>)
 8000666:	4844      	ldr	r0, [pc, #272]	; (8000778 <plate+0x2dc>)
 8000668:	2207      	movs	r2, #7
 800066a:	f001 fdfd 	bl	8002268 <HAL_UART_Transmit>
cont++;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3301      	adds	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fb10 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800067c:	2301      	movs	r3, #1
 800067e:	425b      	negs	r3, r3
 8000680:	493f      	ldr	r1, [pc, #252]	; (8000780 <plate+0x2e4>)
 8000682:	483d      	ldr	r0, [pc, #244]	; (8000778 <plate+0x2dc>)
 8000684:	2201      	movs	r2, #1
 8000686:	f001 fdef 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t ", 7, HAL_MAX_DELAY);
 800068a:	2301      	movs	r3, #1
 800068c:	425b      	negs	r3, r3
 800068e:	4949      	ldr	r1, [pc, #292]	; (80007b4 <plate+0x318>)
 8000690:	4839      	ldr	r0, [pc, #228]	; (8000778 <plate+0x2dc>)
 8000692:	2207      	movs	r2, #7
 8000694:	f001 fde8 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000698:	2301      	movs	r3, #1
 800069a:	425b      	negs	r3, r3
 800069c:	4938      	ldr	r1, [pc, #224]	; (8000780 <plate+0x2e4>)
 800069e:	4836      	ldr	r0, [pc, #216]	; (8000778 <plate+0x2dc>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	f001 fde1 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t@", 8, HAL_MAX_DELAY);
 80006a6:	2301      	movs	r3, #1
 80006a8:	425b      	negs	r3, r3
 80006aa:	4943      	ldr	r1, [pc, #268]	; (80007b8 <plate+0x31c>)
 80006ac:	4832      	ldr	r0, [pc, #200]	; (8000778 <plate+0x2dc>)
 80006ae:	2208      	movs	r2, #8
 80006b0:	f001 fdda 	bl	8002268 <HAL_UART_Transmit>
cont++;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 faed 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006c2:	2301      	movs	r3, #1
 80006c4:	425b      	negs	r3, r3
 80006c6:	492e      	ldr	r1, [pc, #184]	; (8000780 <plate+0x2e4>)
 80006c8:	482b      	ldr	r0, [pc, #172]	; (8000778 <plate+0x2dc>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	f001 fdcc 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t ", 8, HAL_MAX_DELAY);
 80006d0:	2301      	movs	r3, #1
 80006d2:	425b      	negs	r3, r3
 80006d4:	4939      	ldr	r1, [pc, #228]	; (80007bc <plate+0x320>)
 80006d6:	4828      	ldr	r0, [pc, #160]	; (8000778 <plate+0x2dc>)
 80006d8:	2208      	movs	r2, #8
 80006da:	f001 fdc5 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	4927      	ldr	r1, [pc, #156]	; (8000780 <plate+0x2e4>)
 80006e4:	4824      	ldr	r0, [pc, #144]	; (8000778 <plate+0x2dc>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	f001 fdbe 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t@", 9, HAL_MAX_DELAY);
 80006ec:	2301      	movs	r3, #1
 80006ee:	425b      	negs	r3, r3
 80006f0:	4933      	ldr	r1, [pc, #204]	; (80007c0 <plate+0x324>)
 80006f2:	4821      	ldr	r0, [pc, #132]	; (8000778 <plate+0x2dc>)
 80006f4:	2209      	movs	r2, #9
 80006f6:	f001 fdb7 	bl	8002268 <HAL_UART_Transmit>
cont++;
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	0018      	movs	r0, r3
 8000704:	f000 faca 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000708:	2301      	movs	r3, #1
 800070a:	425b      	negs	r3, r3
 800070c:	491c      	ldr	r1, [pc, #112]	; (8000780 <plate+0x2e4>)
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <plate+0x2dc>)
 8000710:	2201      	movs	r2, #1
 8000712:	f001 fda9 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t ", 9, HAL_MAX_DELAY);
 8000716:	2301      	movs	r3, #1
 8000718:	425b      	negs	r3, r3
 800071a:	492a      	ldr	r1, [pc, #168]	; (80007c4 <plate+0x328>)
 800071c:	4816      	ldr	r0, [pc, #88]	; (8000778 <plate+0x2dc>)
 800071e:	2209      	movs	r2, #9
 8000720:	f001 fda2 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	4915      	ldr	r1, [pc, #84]	; (8000780 <plate+0x2e4>)
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <plate+0x2dc>)
 800072c:	2201      	movs	r2, #1
 800072e:	f001 fd9b 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t@", 10, HAL_MAX_DELAY);
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	4924      	ldr	r1, [pc, #144]	; (80007c8 <plate+0x32c>)
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <plate+0x2dc>)
 800073a:	220a      	movs	r2, #10
 800073c:	f001 fd94 	bl	8002268 <HAL_UART_Transmit>
cont++;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	3301      	adds	r3, #1
 8000744:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	0018      	movs	r0, r3
 800074a:	f000 faa7 	bl	8000c9c <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800074e:	2301      	movs	r3, #1
 8000750:	425b      	negs	r3, r3
 8000752:	490b      	ldr	r1, [pc, #44]	; (8000780 <plate+0x2e4>)
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <plate+0x2dc>)
 8000756:	2201      	movs	r2, #1
 8000758:	f001 fd86 	bl	8002268 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t ", 10, HAL_MAX_DELAY);
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	491a      	ldr	r1, [pc, #104]	; (80007cc <plate+0x330>)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <plate+0x2dc>)
 8000764:	220a      	movs	r2, #10
 8000766:	f001 fd7f 	bl	8002268 <HAL_UART_Transmit>
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b004      	add	sp, #16
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	08003538 	.word	0x08003538
 8000778:	20000028 	.word	0x20000028
 800077c:	08003550 	.word	0x08003550
 8000780:	08003554 	.word	0x08003554
 8000784:	08003558 	.word	0x08003558
 8000788:	0800355c 	.word	0x0800355c
 800078c:	08003560 	.word	0x08003560
 8000790:	08003564 	.word	0x08003564
 8000794:	08003568 	.word	0x08003568
 8000798:	0800356c 	.word	0x0800356c
 800079c:	08003574 	.word	0x08003574
 80007a0:	0800357c 	.word	0x0800357c
 80007a4:	08003584 	.word	0x08003584
 80007a8:	0800358c 	.word	0x0800358c
 80007ac:	08003594 	.word	0x08003594
 80007b0:	0800359c 	.word	0x0800359c
 80007b4:	080035a4 	.word	0x080035a4
 80007b8:	080035ac 	.word	0x080035ac
 80007bc:	080035b8 	.word	0x080035b8
 80007c0:	080035c4 	.word	0x080035c4
 80007c4:	080035d0 	.word	0x080035d0
 80007c8:	080035dc 	.word	0x080035dc
 80007cc:	080035e8 	.word	0x080035e8

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80007d6:	f000 f9f1 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f819 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 f8b3 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e2:	f000 f881 	bl	80008e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint8_t enter = 0 ;
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, enter, 1);
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	0019      	movs	r1, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <main+0x3c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 fdde 	bl	80023b8 <HAL_UART_Receive_IT>

	  		HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);

	  	else
	  	{
	  		   __NOP ();
 80007fc:	46c0      	nop			; (mov r8, r8)
	  	}



  plate(500, 25);
 80007fe:	23fa      	movs	r3, #250	; 0xfa
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2119      	movs	r1, #25
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fe49 	bl	800049c <plate>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080a:	e7fe      	b.n	800080a <main+0x3a>
 800080c:	20000028 	.word	0x20000028

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b09f      	sub	sp, #124	; 0x7c
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	2440      	movs	r4, #64	; 0x40
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2338      	movs	r3, #56	; 0x38
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f002 fe75 	bl	8003510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000826:	232c      	movs	r3, #44	; 0x2c
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	2314      	movs	r3, #20
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f002 fe6d 	bl	8003510 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	0018      	movs	r0, r3
 800083a:	2328      	movs	r3, #40	; 0x28
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f002 fe66 	bl	8003510 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <SystemClock_Config+0xd4>)
 800084a:	401a      	ands	r2, r3
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <SystemClock_Config+0xd0>)
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	0109      	lsls	r1, r1, #4
 8000852:	430a      	orrs	r2, r1
 8000854:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2210      	movs	r2, #16
 800085c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2201      	movs	r2, #1
 8000862:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	22a0      	movs	r2, #160	; 0xa0
 800086e:	0212      	lsls	r2, r2, #8
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	187b      	adds	r3, r7, r1
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fd34 	bl	80012e8 <HAL_RCC_OscConfig>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000884:	f000 f8e1 	bl	8000a4a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	212c      	movs	r1, #44	; 0x2c
 800088a:	187b      	adds	r3, r7, r1
 800088c:	220f      	movs	r2, #15
 800088e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f8ef 	bl	8001a90 <HAL_RCC_ClockConfig>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008b6:	f000 f8c8 	bl	8000a4a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2202      	movs	r2, #2
 80008be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fb05 	bl	8001ed8 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d2:	f000 f8ba 	bl	8000a4a <Error_Handler>
  }
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b01f      	add	sp, #124	; 0x7c
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40007000 	.word	0x40007000
 80008e4:	ffffe7ff 	.word	0xffffe7ff

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008f4:	2296      	movs	r2, #150	; 0x96
 80008f6:	0192      	lsls	r2, r2, #6
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800092c:	0018      	movs	r0, r3
 800092e:	f001 fc47 	bl	80021c0 <HAL_UART_Init>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f888 	bl	8000a4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000028 	.word	0x20000028
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	240c      	movs	r4, #12
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f002 fdd9 	bl	8003510 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <MX_GPIO_Init+0xbc>)
 8000960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_GPIO_Init+0xbc>)
 8000964:	2104      	movs	r1, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_GPIO_Init+0xbc>)
 800096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096e:	2204      	movs	r2, #4
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_GPIO_Init+0xbc>)
 8000978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_GPIO_Init+0xbc>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	430a      	orrs	r2, r1
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_GPIO_Init+0xbc>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_GPIO_Init+0xbc>)
 8000990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_GPIO_Init+0xbc>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_GPIO_Init+0xbc>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fc7c 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0192      	lsls	r2, r2, #6
 80009ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_GPIO_Init+0xc0>)
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <MX_GPIO_Init+0xc4>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f000 faee 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d4:	0021      	movs	r1, r4
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2220      	movs	r2, #32
 80009da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fada 	bl	8000fb0 <HAL_GPIO_Init>

}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b009      	add	sp, #36	; 0x24
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	40021000 	.word	0x40021000
 8000a08:	10210000 	.word	0x10210000
 8000a0c:	50000800 	.word	0x50000800

08000a10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	__NOP();
 8000a18:	46c0      	nop			; (mov r8, r8)
	HAL_UART_Transmit(&huart2, "\nKLK MMG", 8, HAL_MAX_DELAY);
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	4904      	ldr	r1, [pc, #16]	; (8000a30 <HAL_UART_RxCpltCallback+0x20>)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <HAL_UART_RxCpltCallback+0x24>)
 8000a22:	2208      	movs	r2, #8
 8000a24:	f001 fc20 	bl	8002268 <HAL_UART_Transmit>
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	080035f4 	.word	0x080035f4
 8000a34:	20000028 	.word	0x20000028

08000a38 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000a40:	46c0      	nop			; (mov r8, r8)
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4e:	b672      	cpsid	i
}
 8000a50:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_MspInit+0x24>)
 8000a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x24>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	430a      	orrs	r2, r1
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_MspInit+0x24>)
 8000a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_MspInit+0x24>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0549      	lsls	r1, r1, #21
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	240c      	movs	r4, #12
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2314      	movs	r3, #20
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f002 fd3e 	bl	8003510 <memset>
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_UART_MspInit+0x90>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d131      	bne.n	8000b02 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0289      	lsls	r1, r1, #10
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0x94>)
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	2201      	movs	r2, #1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac4:	0021      	movs	r1, r4
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	220c      	movs	r2, #12
 8000aca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2202      	movs	r2, #2
 8000ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2203      	movs	r2, #3
 8000adc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	23a0      	movs	r3, #160	; 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fa5f 	bl	8000fb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	201c      	movs	r0, #28
 8000af8:	f000 f9a0 	bl	8000e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000afc:	201c      	movs	r0, #28
 8000afe:	f000 f9b2 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b009      	add	sp, #36	; 0x24
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f894 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <USART2_IRQHandler+0x14>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fc8c 	bl	8002468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000028 	.word	0x20000028

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b92:	f7ff ffe3 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 fc97 	bl	80034c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fe19 	bl	80007d0 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
   ldr   r0, =_estack
 8000ba0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	0800367c 	.word	0x0800367c
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	200000b0 	.word	0x200000b0

08000bb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_COMP_IRQHandler>
	...

08000bbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x3c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Init+0x3c>)
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f811 	bl	8000bfc <HAL_InitTick>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f7ff ff35 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_InitTick+0x60>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	23fa      	movs	r3, #250	; 0xfa
 8000c10:	0098      	lsls	r0, r3, #2
 8000c12:	f7ff fa79 	bl	8000108 <__udivsi3>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	f7ff fa74 	bl	8000108 <__udivsi3>
 8000c20:	0003      	movs	r3, r0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f92f 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e00f      	b.n	8000c50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d80b      	bhi.n	8000c4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f8fc 	bl	8000e3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_InitTick+0x64>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	18d2      	adds	r2, r2, r3
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000008 	.word	0x20000008
 8000c84:	200000ac 	.word	0x200000ac

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	200000ac 	.word	0x200000ac

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	001a      	movs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	189b      	adds	r3, r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	0002      	movs	r2, r0
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf6:	d809      	bhi.n	8000d0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	231f      	movs	r3, #31
 8000d00:	401a      	ands	r2, r3
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_EnableIRQ+0x30>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	4091      	lsls	r1, r2
 8000d08:	000a      	movs	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
  }
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2c:	d828      	bhi.n	8000d80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	589b      	ldr	r3, [r3, r2]
 8000d3e:	1dfa      	adds	r2, r7, #7
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	0011      	movs	r1, r2
 8000d44:	2203      	movs	r2, #3
 8000d46:	400a      	ands	r2, r1
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	21ff      	movs	r1, #255	; 0xff
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	401a      	ands	r2, r3
 8000d54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	22ff      	movs	r2, #255	; 0xff
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0018      	movs	r0, r3
 8000d64:	2303      	movs	r3, #3
 8000d66:	4003      	ands	r3, r0
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6c:	481f      	ldr	r0, [pc, #124]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7e:	e031      	b.n	8000de4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0019      	movs	r1, r3
 8000d88:	230f      	movs	r3, #15
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	3b08      	subs	r3, #8
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3306      	adds	r3, #6
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	2203      	movs	r2, #3
 8000da2:	400a      	ands	r2, r1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	21ff      	movs	r1, #255	; 0xff
 8000da8:	4091      	lsls	r1, r2
 8000daa:	000a      	movs	r2, r1
 8000dac:	43d2      	mvns	r2, r2
 8000dae:	401a      	ands	r2, r3
 8000db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	401a      	ands	r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4003      	ands	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	001c      	movs	r4, r3
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	3306      	adds	r3, #6
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18c3      	adds	r3, r0, r3
 8000de0:	3304      	adds	r3, #4
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b003      	add	sp, #12
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	045b      	lsls	r3, r3, #17
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d301      	bcc.n	8000e0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e010      	b.n	8000e2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SysTick_Config+0x44>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	3a01      	subs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e14:	2301      	movs	r3, #1
 8000e16:	425b      	negs	r3, r3
 8000e18:	2103      	movs	r1, #3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff ff7c 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x44>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	210f      	movs	r1, #15
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	1c02      	adds	r2, r0, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff33 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffaf 	bl	8000df4 <SysTick_Config>
 8000e96:	0003      	movs	r3, r0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2225      	movs	r2, #37	; 0x25
 8000eb4:	5c9b      	ldrb	r3, [r3, r2]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d008      	beq.n	8000ece <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2224      	movs	r2, #36	; 0x24
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e024      	b.n	8000f18 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	210e      	movs	r1, #14
 8000eda:	438a      	bics	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	438a      	bics	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	221c      	movs	r2, #28
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	2101      	movs	r1, #1
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2225      	movs	r2, #37	; 0x25
 8000f06:	2101      	movs	r1, #1
 8000f08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2224      	movs	r2, #36	; 0x24
 8000f0e:	2100      	movs	r1, #0
 8000f10:	5499      	strb	r1, [r3, r2]

    return status;
 8000f12:	230f      	movs	r3, #15
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f28:	210f      	movs	r1, #15
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2225      	movs	r2, #37	; 0x25
 8000f34:	5c9b      	ldrb	r3, [r3, r2]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d006      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e02a      	b.n	8000fa0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	210e      	movs	r1, #14
 8000f56:	438a      	bics	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	438a      	bics	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	221c      	movs	r2, #28
 8000f70:	401a      	ands	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2101      	movs	r1, #1
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2225      	movs	r2, #37	; 0x25
 8000f82:	2101      	movs	r1, #1
 8000f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2224      	movs	r2, #36	; 0x24
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	0010      	movs	r0, r2
 8000f9e:	4798      	blx	r3
    }
  }
  return status;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc6:	e155      	b.n	8001274 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <HAL_GPIO_Init+0x30>
 8000fde:	e146      	b.n	800126e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d00b      	beq.n	8001000 <HAL_GPIO_Init+0x50>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	2b11      	cmp	r3, #17
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0xf2>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d123      	bne.n	80010ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	58d3      	ldr	r3, [r2, r3]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2207      	movs	r2, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2107      	movs	r1, #7
 80010ce:	400b      	ands	r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	055b      	lsls	r3, r3, #21
 8001126:	4013      	ands	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_GPIO_Init+0x17c>
 800112a:	e0a0      	b.n	800126e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <HAL_GPIO_Init+0x2dc>)
 800112e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001130:	4b56      	ldr	r3, [pc, #344]	; (800128c <HAL_GPIO_Init+0x2dc>)
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001138:	4a55      	ldr	r2, [pc, #340]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	589b      	ldr	r3, [r3, r2]
 8001144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2203      	movs	r2, #3
 800114a:	4013      	ands	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	429a      	cmp	r2, r3
 8001164:	d01f      	beq.n	80011a6 <HAL_GPIO_Init+0x1f6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_GPIO_Init+0x2e4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x1f2>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a49      	ldr	r2, [pc, #292]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x1ee>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a48      	ldr	r2, [pc, #288]	; (800129c <HAL_GPIO_Init+0x2ec>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x1ea>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_GPIO_Init+0x2f0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x1e6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_GPIO_Init+0x2f4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x1e2>
 800118e:	2305      	movs	r3, #5
 8001190:	e00a      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
 8001192:	2306      	movs	r3, #6
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
 8001196:	2304      	movs	r3, #4
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x1f8>
 80011a6:	2300      	movs	r3, #0
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	2103      	movs	r1, #3
 80011ac:	400a      	ands	r2, r1
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	4013      	ands	r3, r2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	035b      	lsls	r3, r3, #13
 8001232:	4013      	ands	r3, r2
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43da      	mvns	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	039b      	lsls	r3, r3, #14
 800125c:	4013      	ands	r3, r2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_GPIO_Init+0x2f8>)
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	40da      	lsrs	r2, r3
 800127c:	1e13      	subs	r3, r2, #0
 800127e:	d000      	beq.n	8001282 <HAL_GPIO_Init+0x2d2>
 8001280:	e6a2      	b.n	8000fc8 <HAL_GPIO_Init+0x18>
  }
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b006      	add	sp, #24
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000
 8001294:	50000400 	.word	0x50000400
 8001298:	50000800 	.word	0x50000800
 800129c:	50000c00 	.word	0x50000c00
 80012a0:	50001000 	.word	0x50001000
 80012a4:	50001c00 	.word	0x50001c00
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	0008      	movs	r0, r1
 80012b6:	0011      	movs	r1, r2
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	1c7b      	adds	r3, r7, #1
 80012c0:	1c0a      	adds	r2, r1, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	1c7b      	adds	r3, r7, #1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f000 fbbf 	bl	8001a7a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fc:	4bc9      	ldr	r3, [pc, #804]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	220c      	movs	r2, #12
 8001302:	4013      	ands	r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001306:	4bc7      	ldr	r3, [pc, #796]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x36>
 800131c:	e07e      	b.n	800141c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b08      	cmp	r3, #8
 8001322:	d007      	beq.n	8001334 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0c      	cmp	r3, #12
 8001328:	d112      	bne.n	8001350 <HAL_RCC_OscConfig+0x68>
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	429a      	cmp	r2, r3
 8001332:	d10d      	bne.n	8001350 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4bbb      	ldr	r3, [pc, #748]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	029b      	lsls	r3, r3, #10
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x5a>
 8001340:	e06b      	b.n	800141a <HAL_RCC_OscConfig+0x132>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d167      	bne.n	800141a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f000 fb95 	bl	8001a7a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	429a      	cmp	r2, r3
 800135a:	d107      	bne.n	800136c <HAL_RCC_OscConfig+0x84>
 800135c:	4bb1      	ldr	r3, [pc, #708]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4bb0      	ldr	r3, [pc, #704]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	0249      	lsls	r1, r1, #9
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e027      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	23a0      	movs	r3, #160	; 0xa0
 8001372:	02db      	lsls	r3, r3, #11
 8001374:	429a      	cmp	r2, r3
 8001376:	d10e      	bne.n	8001396 <HAL_RCC_OscConfig+0xae>
 8001378:	4baa      	ldr	r3, [pc, #680]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4ba9      	ldr	r3, [pc, #676]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	02c9      	lsls	r1, r1, #11
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	4ba7      	ldr	r3, [pc, #668]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4ba6      	ldr	r3, [pc, #664]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0249      	lsls	r1, r1, #9
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e012      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 8001396:	4ba3      	ldr	r3, [pc, #652]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4ba2      	ldr	r3, [pc, #648]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800139c:	49a2      	ldr	r1, [pc, #648]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	4ba0      	ldr	r3, [pc, #640]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	025b      	lsls	r3, r3, #9
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4b9c      	ldr	r3, [pc, #624]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b9b      	ldr	r3, [pc, #620]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80013b6:	499d      	ldr	r1, [pc, #628]	; (800162c <HAL_RCC_OscConfig+0x344>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc60 	bl	8000c88 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ce:	f7ff fc5b 	bl	8000c88 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d902      	bls.n	80013e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	f000 fb4c 	bl	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013e2:	4b90      	ldr	r3, [pc, #576]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	029b      	lsls	r3, r3, #10
 80013ea:	4013      	ands	r3, r2
 80013ec:	d0ef      	beq.n	80013ce <HAL_RCC_OscConfig+0xe6>
 80013ee:	e015      	b.n	800141c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc4a 	bl	8000c88 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fa:	f7ff fc45 	bl	8000c88 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e336      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800140c:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	029b      	lsls	r3, r3, #10
 8001414:	4013      	ands	r3, r2
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x112>
 8001418:	e000      	b.n	800141c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2202      	movs	r2, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_RCC_OscConfig+0x140>
 8001426:	e099      	b.n	800155c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	2220      	movs	r2, #32
 8001432:	4013      	ands	r3, r2
 8001434:	d009      	beq.n	800144a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001436:	4b7b      	ldr	r3, [pc, #492]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800143c:	2120      	movs	r1, #32
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	2220      	movs	r2, #32
 8001446:	4393      	bics	r3, r2
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d13e      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d13b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800145c:	4b71      	ldr	r3, [pc, #452]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2204      	movs	r2, #4
 8001462:	4013      	ands	r3, r2
 8001464:	d004      	beq.n	8001470 <HAL_RCC_OscConfig+0x188>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e304      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x348>)
 8001476:	4013      	ands	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	021a      	lsls	r2, r3, #8
 8001480:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2209      	movs	r2, #9
 800148c:	4393      	bics	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001498:	f000 fc42 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 800149c:	0001      	movs	r1, r0
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	220f      	movs	r2, #15
 80014a6:	4013      	ands	r3, r2
 80014a8:	4a62      	ldr	r2, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x34c>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	000a      	movs	r2, r1
 80014ae:	40da      	lsrs	r2, r3
 80014b0:	4b61      	ldr	r3, [pc, #388]	; (8001638 <HAL_RCC_OscConfig+0x350>)
 80014b2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_RCC_OscConfig+0x354>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2513      	movs	r5, #19
 80014ba:	197c      	adds	r4, r7, r5
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fb9d 	bl	8000bfc <HAL_InitTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014c6:	197b      	adds	r3, r7, r5
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d046      	beq.n	800155c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80014ce:	197b      	adds	r3, r7, r5
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	e2d2      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d027      	beq.n	800152a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014da:	4b52      	ldr	r3, [pc, #328]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2209      	movs	r2, #9
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbcc 	bl	8000c88 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbc7 	bl	8000c88 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e2b8      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001508:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2204      	movs	r2, #4
 800150e:	4013      	ands	r3, r2
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a46      	ldr	r2, [pc, #280]	; (8001630 <HAL_RCC_OscConfig+0x348>)
 8001518:	4013      	ands	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	021a      	lsls	r2, r3, #8
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	e018      	b.n	800155c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001530:	2101      	movs	r1, #1
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fba7 	bl	8000c88 <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fba2 	bl	8000c88 <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e293      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
 800155a:	d1f1      	bne.n	8001540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2210      	movs	r2, #16
 8001562:	4013      	ands	r3, r2
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0x280>
 8001566:	e0a2      	b.n	80016ae <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d140      	bne.n	80015f0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x29e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e279      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <HAL_RCC_OscConfig+0x358>)
 800158c:	4013      	ands	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	0a19      	lsrs	r1, r3, #8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	061a      	lsls	r2, r3, #24
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	0b5b      	lsrs	r3, r3, #13
 80015b4:	3301      	adds	r3, #1
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	0212      	lsls	r2, r2, #8
 80015ba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	210f      	movs	r1, #15
 80015c4:	400b      	ands	r3, r1
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x34c>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_RCC_OscConfig+0x350>)
 80015ce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_RCC_OscConfig+0x354>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2513      	movs	r5, #19
 80015d6:	197c      	adds	r4, r7, r5
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fb0f 	bl	8000bfc <HAL_InitTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015e2:	197b      	adds	r3, r7, r5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d061      	beq.n	80016ae <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	e244      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d040      	beq.n	800167a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0049      	lsls	r1, r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb3f 	bl	8000c88 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800160e:	e019      	b.n	8001644 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff fb3a 	bl	8000c88 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d912      	bls.n	8001644 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e22b      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40021000 	.word	0x40021000
 8001628:	fffeffff 	.word	0xfffeffff
 800162c:	fffbffff 	.word	0xfffbffff
 8001630:	ffffe0ff 	.word	0xffffe0ff
 8001634:	08003600 	.word	0x08003600
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004
 8001640:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001644:	4bca      	ldr	r3, [pc, #808]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d0df      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001650:	4bc7      	ldr	r3, [pc, #796]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4ac7      	ldr	r2, [pc, #796]	; (8001974 <HAL_RCC_OscConfig+0x68c>)
 8001656:	4013      	ands	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	4bc4      	ldr	r3, [pc, #784]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001664:	4bc2      	ldr	r3, [pc, #776]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	0a19      	lsrs	r1, r3, #8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	061a      	lsls	r2, r3, #24
 8001672:	4bbf      	ldr	r3, [pc, #764]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	e019      	b.n	80016ae <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800167a:	4bbd      	ldr	r3, [pc, #756]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4bbc      	ldr	r3, [pc, #752]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001680:	49bd      	ldr	r1, [pc, #756]	; (8001978 <HAL_RCC_OscConfig+0x690>)
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff faff 	bl	8000c88 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001690:	f7ff fafa 	bl	8000c88 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1eb      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016a2:	4bb3      	ldr	r3, [pc, #716]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	4013      	ands	r3, r2
 80016b6:	d036      	beq.n	8001726 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d019      	beq.n	80016f4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4bab      	ldr	r3, [pc, #684]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80016c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c4:	4baa      	ldr	r3, [pc, #680]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fadc 	bl	8000c88 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff fad7 	bl	8000c88 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1c8      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016e8:	4ba1      	ldr	r3, [pc, #644]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80016ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ec:	2202      	movs	r2, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d0f1      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3ee>
 80016f2:	e018      	b.n	8001726 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80016f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f8:	4b9d      	ldr	r3, [pc, #628]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fac2 	bl	8000c88 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fabd 	bl	8000c88 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1ae      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800171c:	4b94      	ldr	r3, [pc, #592]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800171e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d1f1      	bne.n	800170a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2204      	movs	r2, #4
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x44a>
 8001730:	e0ae      	b.n	8001890 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2023      	movs	r0, #35	; 0x23
 8001734:	183b      	adds	r3, r7, r0
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800173c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	055b      	lsls	r3, r3, #21
 8001742:	4013      	ands	r3, r2
 8001744:	d109      	bne.n	800175a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b8a      	ldr	r3, [pc, #552]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0549      	lsls	r1, r1, #21
 8001750:	430a      	orrs	r2, r1
 8001752:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001754:	183b      	adds	r3, r7, r0
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x694>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4013      	ands	r3, r2
 8001764:	d11a      	bne.n	800179c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b85      	ldr	r3, [pc, #532]	; (800197c <HAL_RCC_OscConfig+0x694>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b84      	ldr	r3, [pc, #528]	; (800197c <HAL_RCC_OscConfig+0x694>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0049      	lsls	r1, r1, #1
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001774:	f7ff fa88 	bl	8000c88 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff fa83 	bl	8000c88 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e174      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b7a      	ldr	r3, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x694>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4013      	ands	r3, r2
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4d0>
 80017a8:	4b71      	ldr	r3, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0049      	lsls	r1, r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50
 80017b6:	e031      	b.n	800181c <HAL_RCC_OscConfig+0x534>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0x4f2>
 80017c0:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017c6:	496c      	ldr	r1, [pc, #432]	; (8001978 <HAL_RCC_OscConfig+0x690>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	651a      	str	r2, [r3, #80]	; 0x50
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d0:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017d2:	496b      	ldr	r1, [pc, #428]	; (8001980 <HAL_RCC_OscConfig+0x698>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	651a      	str	r2, [r3, #80]	; 0x50
 80017d8:	e020      	b.n	800181c <HAL_RCC_OscConfig+0x534>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	23a0      	movs	r3, #160	; 0xa0
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d10e      	bne.n	8001804 <HAL_RCC_OscConfig+0x51c>
 80017e6:	4b62      	ldr	r3, [pc, #392]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	00c9      	lsls	r1, r1, #3
 80017f0:	430a      	orrs	r2, r1
 80017f2:	651a      	str	r2, [r3, #80]	; 0x50
 80017f4:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f8:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	0049      	lsls	r1, r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	651a      	str	r2, [r3, #80]	; 0x50
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0x534>
 8001804:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800180a:	495b      	ldr	r1, [pc, #364]	; (8001978 <HAL_RCC_OscConfig+0x690>)
 800180c:	400a      	ands	r2, r1
 800180e:	651a      	str	r2, [r3, #80]	; 0x50
 8001810:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001816:	495a      	ldr	r1, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x698>)
 8001818:	400a      	ands	r2, r1
 800181a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d015      	beq.n	8001850 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff fa30 	bl	8000c88 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800182c:	e009      	b.n	8001842 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fa2b 	bl	8000c88 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_RCC_OscConfig+0x69c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e11b      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001842:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d0ef      	beq.n	800182e <HAL_RCC_OscConfig+0x546>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fa1a 	bl	8000c88 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa15 	bl	8000c88 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x69c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e105      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800187a:	2323      	movs	r3, #35	; 0x23
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800188a:	493f      	ldr	r1, [pc, #252]	; (8001988 <HAL_RCC_OscConfig+0x6a0>)
 800188c:	400a      	ands	r2, r1
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2220      	movs	r2, #32
 8001896:	4013      	ands	r3, r2
 8001898:	d049      	beq.n	800192e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d026      	beq.n	80018f0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x6a4>)
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_RCC_OscConfig+0x6a4>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0189      	lsls	r1, r1, #6
 80018c4:	430a      	orrs	r2, r1
 80018c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f9de 	bl	8000c88 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d2:	f7ff f9d9 	bl	8000c88 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ca      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d0f1      	beq.n	80018d2 <HAL_RCC_OscConfig+0x5ea>
 80018ee:	e01e      	b.n	800192e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	438a      	bics	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_RCC_OscConfig+0x6a4>)
 80018fe:	6a1a      	ldr	r2, [r3, #32]
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_OscConfig+0x6a4>)
 8001902:	4923      	ldr	r1, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x6a8>)
 8001904:	400a      	ands	r2, r1
 8001906:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f9be 	bl	8000c88 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001912:	f7ff f9b9 	bl	8000c88 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0aa      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d100      	bne.n	8001938 <HAL_RCC_OscConfig+0x650>
 8001936:	e09f      	b.n	8001a78 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d100      	bne.n	8001940 <HAL_RCC_OscConfig+0x658>
 800193e:	e078      	b.n	8001a32 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	2b02      	cmp	r3, #2
 8001946:	d159      	bne.n	80019fc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x688>)
 800194e:	4911      	ldr	r1, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x6ac>)
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff f998 	bl	8000c88 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff f993 	bl	8000c88 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d915      	bls.n	8001998 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e084      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
 8001970:	40021000 	.word	0x40021000
 8001974:	ffff1fff 	.word	0xffff1fff
 8001978:	fffffeff 	.word	0xfffffeff
 800197c:	40007000 	.word	0x40007000
 8001980:	fffffbff 	.word	0xfffffbff
 8001984:	00001388 	.word	0x00001388
 8001988:	efffffff 	.word	0xefffffff
 800198c:	40010000 	.word	0x40010000
 8001990:	ffffdfff 	.word	0xffffdfff
 8001994:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	049b      	lsls	r3, r3, #18
 80019a0:	4013      	ands	r3, r2
 80019a2:	d1dc      	bne.n	800195e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a37      	ldr	r2, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x7a0>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	431a      	orrs	r2, r3
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	0449      	lsls	r1, r1, #17
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff f959 	bl	8000c88 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f954 	bl	8000c88 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e045      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	049b      	lsls	r3, r3, #18
 80019f6:	4013      	ands	r3, r2
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x6f4>
 80019fa:	e03d      	b.n	8001a78 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_OscConfig+0x7a4>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f93e 	bl	8000c88 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f939 	bl	8000c88 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e02a      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	049b      	lsls	r3, r3, #18
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x72a>
 8001a30:	e022      	b.n	8001a78 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e01d      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_OscConfig+0x79c>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	23f0      	movs	r3, #240	; 0xf0
 8001a58:	039b      	lsls	r3, r3, #14
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b00a      	add	sp, #40	; 0x28
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40021000 	.word	0x40021000
 8001a88:	ff02ffff 	.word	0xff02ffff
 8001a8c:	feffffff 	.word	0xfeffffff

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e128      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b96      	ldr	r3, [pc, #600]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d91e      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b93      	ldr	r3, [pc, #588]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f8e0 	bl	8000c88 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7ff f8db 	bl	8000c88 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a8a      	ldr	r2, [pc, #552]	; (8001d04 <HAL_RCC_ClockConfig+0x274>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e109      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b87      	ldr	r3, [pc, #540]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2202      	movs	r2, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afa:	4b83      	ldr	r3, [pc, #524]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	22f0      	movs	r2, #240	; 0xf0
 8001b00:	4393      	bics	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x8a>
 8001b18:	e089      	b.n	8001c2e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b22:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d120      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0e1      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	049b      	lsls	r3, r3, #18
 8001b42:	4013      	ands	r3, r2
 8001b44:	d114      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0d5      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d109      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ca      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b60:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0c2      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f880 	bl	8000c88 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d111      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f877 	bl	8000c88 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_RCC_ClockConfig+0x274>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0a5      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	220c      	movs	r2, #12
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x106>
 8001bb6:	e03a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc0:	e009      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7ff f861 	bl	8000c88 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <HAL_RCC_ClockConfig+0x274>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e08f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	220c      	movs	r2, #12
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d1ef      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x132>
 8001be2:	e024      	b.n	8001c2e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d11b      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bee:	f7ff f84b 	bl	8000c88 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <HAL_RCC_ClockConfig+0x274>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e079      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	220c      	movs	r2, #12
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d1ef      	bne.n	8001bee <HAL_RCC_ClockConfig+0x15e>
 8001c0e:	e00e      	b.n	8001c2e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f83a 	bl	8000c88 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <HAL_RCC_ClockConfig+0x274>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e068      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	220c      	movs	r2, #12
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d21e      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4393      	bics	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c4e:	f7ff f81b 	bl	8000c88 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	e009      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f816 	bl	8000c88 <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a28      	ldr	r2, [pc, #160]	; (8001d04 <HAL_RCC_ClockConfig+0x274>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e044      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_ClockConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4013      	ands	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x27c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_RCC_ClockConfig+0x280>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	00da      	lsls	r2, r3, #3
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb8:	f000 f832 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cbc:	0001      	movs	r1, r0
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_ClockConfig+0x278>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_RCC_ClockConfig+0x284>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	000a      	movs	r2, r1
 8001cce:	40da      	lsrs	r2, r3
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_RCC_ClockConfig+0x288>)
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_ClockConfig+0x28c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	250b      	movs	r5, #11
 8001cda:	197c      	adds	r4, r7, r5
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe ff8d 	bl	8000bfc <HAL_InitTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ce6:	197b      	adds	r3, r7, r5
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cee:	197b      	adds	r3, r7, r5
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40022000 	.word	0x40022000
 8001d04:	00001388 	.word	0x00001388
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	fffff8ff 	.word	0xfffff8ff
 8001d10:	ffffc7ff 	.word	0xffffc7ff
 8001d14:	08003600 	.word	0x08003600
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b08e      	sub	sp, #56	; 0x38
 8001d24:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2e:	230c      	movs	r3, #12
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d014      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d36:	d900      	bls.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1a>
 8001d38:	e07b      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x112>
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x24>
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d00b      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d42:	e076      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d44:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d52:	e07c      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d54:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d58:	e079      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d5e:	e076      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	0c9a      	lsrs	r2, r3, #18
 8001d64:	230f      	movs	r3, #15
 8001d66:	401a      	ands	r2, r3
 8001d68:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	0d9a      	lsrs	r2, r3, #22
 8001d72:	2303      	movs	r3, #3
 8001d74:	4013      	ands	r3, r2
 8001d76:	3301      	adds	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	025b      	lsls	r3, r3, #9
 8001d82:	4013      	ands	r3, r2
 8001d84:	d01a      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	4a35      	ldr	r2, [pc, #212]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d90:	2300      	movs	r3, #0
 8001d92:	69b8      	ldr	r0, [r7, #24]
 8001d94:	69f9      	ldr	r1, [r7, #28]
 8001d96:	f7fe fa63 	bl	8000260 <__aeabi_lmul>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	000b      	movs	r3, r1
 8001d9e:	0010      	movs	r0, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f7fe fa37 	bl	8000220 <__aeabi_uldivmod>
 8001db2:	0002      	movs	r2, r0
 8001db4:	000b      	movs	r3, r1
 8001db6:	0013      	movs	r3, r2
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dba:	e037      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d01a      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	f7fe fa43 	bl	8000260 <__aeabi_lmul>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	000b      	movs	r3, r1
 8001dde:	0010      	movs	r0, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f7fe fa17 	bl	8000220 <__aeabi_uldivmod>
 8001df2:	0002      	movs	r2, r0
 8001df4:	000b      	movs	r3, r1
 8001df6:	0013      	movs	r3, r2
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfa:	e017      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	0018      	movs	r0, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	0019      	movs	r1, r3
 8001e04:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e06:	2300      	movs	r3, #0
 8001e08:	f7fe fa2a 	bl	8000260 <__aeabi_lmul>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	000b      	movs	r3, r1
 8001e10:	0010      	movs	r0, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	001c      	movs	r4, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	001d      	movs	r5, r3
 8001e1c:	0022      	movs	r2, r4
 8001e1e:	002b      	movs	r3, r5
 8001e20:	f7fe f9fe 	bl	8000220 <__aeabi_uldivmod>
 8001e24:	0002      	movs	r2, r0
 8001e26:	000b      	movs	r3, r1
 8001e28:	0013      	movs	r3, r2
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e30:	e00d      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0b5b      	lsrs	r3, r3, #13
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	3301      	adds	r3, #1
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	0212      	lsls	r2, r2, #8
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b00e      	add	sp, #56	; 0x38
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	003d0900 	.word	0x003d0900
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	08003618 	.word	0x08003618

08001e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff2 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e88:	0001      	movs	r1, r0
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	2207      	movs	r2, #7
 8001e92:	4013      	ands	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	40d9      	lsrs	r1, r3
 8001e9a:	000b      	movs	r3, r1
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08003610 	.word	0x08003610

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb0:	f7ff ffdc 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb4:	0001      	movs	r1, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0adb      	lsrs	r3, r3, #11
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	40d9      	lsrs	r1, r3
 8001ec6:	000b      	movs	r3, r1
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08003610 	.word	0x08003610

08001ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2220      	movs	r2, #32
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4013      	ands	r3, r2
 8001efc:	d100      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001efe:	e0d9      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f00:	4ba4      	ldr	r3, [pc, #656]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d10a      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4ba1      	ldr	r3, [pc, #644]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f10:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0549      	lsls	r1, r1, #21
 8001f16:	430a      	orrs	r2, r1
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f1a:	2317      	movs	r3, #23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d11a      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2e:	4b9a      	ldr	r3, [pc, #616]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3c:	f7fe fea4 	bl	8000c88 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7fe fe9f 	bl	8000c88 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e118      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	039b      	lsls	r3, r3, #14
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	23c0      	movs	r3, #192	; 0xc0
 8001f76:	039b      	lsls	r3, r3, #14
 8001f78:	4013      	ands	r3, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	23c0      	movs	r3, #192	; 0xc0
 8001f86:	039b      	lsls	r3, r3, #14
 8001f88:	4013      	ands	r3, r2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	23c0      	movs	r3, #192	; 0xc0
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	401a      	ands	r2, r3
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fa2:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	401a      	ands	r2, r3
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	029b      	lsls	r3, r3, #10
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0e8      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fb8:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbc:	23c0      	movs	r3, #192	; 0xc0
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d049      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d004      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d10d      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d034      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d02e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002000:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800200a:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800200c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0309      	lsls	r1, r1, #12
 8002014:	430a      	orrs	r2, r1
 8002016:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002018:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800201a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201c:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800201e:	4960      	ldr	r1, [pc, #384]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002020:	400a      	ands	r2, r1
 8002022:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002024:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d014      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fe28 	bl	8000c88 <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203c:	e009      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fe23 	bl	8000c88 <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e09b      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002052:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d0ef      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	401a      	ands	r2, r3
 8002068:	23c0      	movs	r3, #192	; 0xc0
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	429a      	cmp	r2, r3
 800206e:	d10c      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002070:	4b48      	ldr	r3, [pc, #288]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	039b      	lsls	r3, r3, #14
 8002082:	401a      	ands	r2, r3
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	4b42      	ldr	r3, [pc, #264]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800208c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	029b      	lsls	r3, r3, #10
 8002096:	401a      	ands	r2, r3
 8002098:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800209a:	430a      	orrs	r2, r1
 800209c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ae:	493f      	ldr	r1, [pc, #252]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	2203      	movs	r2, #3
 80020c4:	4393      	bics	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2202      	movs	r2, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	220c      	movs	r2, #12
 80020e2:	4393      	bics	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2204      	movs	r2, #4
 80020f6:	4013      	ands	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800210a:	430a      	orrs	r2, r1
 800210c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2208      	movs	r2, #8
 8002114:	4013      	ands	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002128:	430a      	orrs	r2, r1
 800212a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4013      	ands	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002148:	430a      	orrs	r2, r1
 800214a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	4013      	ands	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002166:	430a      	orrs	r2, r1
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002184:	430a      	orrs	r2, r1
 8002186:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b006      	add	sp, #24
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
 800219c:	fffcffff 	.word	0xfffcffff
 80021a0:	fff7ffff 	.word	0xfff7ffff
 80021a4:	00001388 	.word	0x00001388
 80021a8:	ffcfffff 	.word	0xffcfffff
 80021ac:	efffffff 	.word	0xefffffff
 80021b0:	fffff3ff 	.word	0xfffff3ff
 80021b4:	ffffcfff 	.word	0xffffcfff
 80021b8:	fbffffff 	.word	0xfbffffff
 80021bc:	fff3ffff 	.word	0xfff3ffff

080021c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e044      	b.n	800225c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d107      	bne.n	80021ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2274      	movs	r2, #116	; 0x74
 80021de:	2100      	movs	r1, #0
 80021e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7fe fc49 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2224      	movs	r2, #36	; 0x24
 80021ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fb48 	bl	8002898 <UART_SetConfig>
 8002208:	0003      	movs	r3, r0
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e024      	b.n	800225c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fdf9 	bl	8002e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	490d      	ldr	r1, [pc, #52]	; (8002264 <HAL_UART_Init+0xa4>)
 800222e:	400a      	ands	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	212a      	movs	r1, #42	; 0x2a
 800223e:	438a      	bics	r2, r1
 8002240:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 fe91 	bl	8002f7c <UART_CheckIdleState>
 800225a:	0003      	movs	r3, r0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}
 8002264:	ffffb7ff 	.word	0xffffb7ff

08002268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227c:	2b20      	cmp	r3, #32
 800227e:	d000      	beq.n	8002282 <HAL_UART_Transmit+0x1a>
 8002280:	e095      	b.n	80023ae <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_UART_Transmit+0x28>
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e08d      	b.n	80023b0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	015b      	lsls	r3, r3, #5
 800229c:	429a      	cmp	r2, r3
 800229e:	d109      	bne.n	80022b4 <HAL_UART_Transmit+0x4c>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e07d      	b.n	80023b0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2274      	movs	r2, #116	; 0x74
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Transmit+0x5a>
 80022be:	2302      	movs	r3, #2
 80022c0:	e076      	b.n	80023b0 <HAL_UART_Transmit+0x148>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2274      	movs	r2, #116	; 0x74
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	2100      	movs	r1, #0
 80022d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2221      	movs	r2, #33	; 0x21
 80022d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fcd6 	bl	8000c88 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1dba      	adds	r2, r7, #6
 80022e4:	2150      	movs	r1, #80	; 0x50
 80022e6:	8812      	ldrh	r2, [r2, #0]
 80022e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1dba      	adds	r2, r7, #6
 80022ee:	2152      	movs	r1, #82	; 0x52
 80022f0:	8812      	ldrh	r2, [r2, #0]
 80022f2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	015b      	lsls	r3, r3, #5
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d108      	bne.n	8002312 <HAL_UART_Transmit+0xaa>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e003      	b.n	800231a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2274      	movs	r2, #116	; 0x74
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002322:	e02c      	b.n	800237e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	0013      	movs	r3, r2
 800232e:	2200      	movs	r2, #0
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	f000 fe6b 	bl	800300c <UART_WaitOnFlagUntilTimeout>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d001      	beq.n	800233e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e038      	b.n	80023b0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	001a      	movs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	05d2      	lsls	r2, r2, #23
 8002350:	0dd2      	lsrs	r2, r2, #23
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	3302      	adds	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	e007      	b.n	800236c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2252      	movs	r2, #82	; 0x52
 8002370:	5a9b      	ldrh	r3, [r3, r2]
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b299      	uxth	r1, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2252      	movs	r2, #82	; 0x52
 800237c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2252      	movs	r2, #82	; 0x52
 8002382:	5a9b      	ldrh	r3, [r3, r2]
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1cc      	bne.n	8002324 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	0013      	movs	r3, r2
 8002394:	2200      	movs	r2, #0
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	f000 fe38 	bl	800300c <UART_WaitOnFlagUntilTimeout>
 800239c:	1e03      	subs	r3, r0, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e005      	b.n	80023b0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b008      	add	sp, #32
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	1dbb      	adds	r3, r7, #6
 80023c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d144      	bne.n	8002458 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_UART_Receive_IT+0x24>
 80023d4:	1dbb      	adds	r3, r7, #6
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e03c      	b.n	800245a <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d109      	bne.n	8002400 <HAL_UART_Receive_IT+0x48>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e02c      	b.n	800245a <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2274      	movs	r2, #116	; 0x74
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_UART_Receive_IT+0x56>
 800240a:	2302      	movs	r3, #2
 800240c:	e025      	b.n	800245a <HAL_UART_Receive_IT+0xa2>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2274      	movs	r2, #116	; 0x74
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_UART_Receive_IT+0xac>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00f      	beq.n	8002446 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	4013      	ands	r3, r2
 8002432:	d008      	beq.n	8002446 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	04c9      	lsls	r1, r1, #19
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fe5a 	bl	8003108 <UART_Start_Receive_IT>
 8002454:	0003      	movs	r3, r0
 8002456:	e000      	b.n	800245a <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40004800 	.word	0x40004800

08002468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4ab5      	ldr	r2, [pc, #724]	; (8002760 <HAL_UART_IRQHandler+0x2f8>)
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d112      	bne.n	80024bc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2220      	movs	r2, #32
 800249a:	4013      	ands	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2220      	movs	r2, #32
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00a      	beq.n	80024bc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d100      	bne.n	80024b0 <HAL_UART_IRQHandler+0x48>
 80024ae:	e1d1      	b.n	8002854 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	0010      	movs	r0, r2
 80024b8:	4798      	blx	r3
      }
      return;
 80024ba:	e1cb      	b.n	8002854 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d100      	bne.n	80024c4 <HAL_UART_IRQHandler+0x5c>
 80024c2:	e0d9      	b.n	8002678 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d104      	bne.n	80024d6 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4aa5      	ldr	r2, [pc, #660]	; (8002764 <HAL_UART_IRQHandler+0x2fc>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	d100      	bne.n	80024d6 <HAL_UART_IRQHandler+0x6e>
 80024d4:	e0d0      	b.n	8002678 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d010      	beq.n	8002500 <HAL_UART_IRQHandler+0x98>
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00b      	beq.n	8002500 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	589b      	ldr	r3, [r3, r2]
 80024f6:	2201      	movs	r2, #1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d00f      	beq.n	8002528 <HAL_UART_IRQHandler+0xc0>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d00b      	beq.n	8002528 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2202      	movs	r2, #2
 8002516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	589b      	ldr	r3, [r3, r2]
 800251e:	2204      	movs	r2, #4
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2204      	movs	r2, #4
 800252c:	4013      	ands	r3, r2
 800252e:	d00f      	beq.n	8002550 <HAL_UART_IRQHandler+0xe8>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2201      	movs	r2, #1
 8002534:	4013      	ands	r3, r2
 8002536:	d00b      	beq.n	8002550 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2204      	movs	r2, #4
 800253e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	589b      	ldr	r3, [r3, r2]
 8002546:	2202      	movs	r2, #2
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2208      	movs	r2, #8
 8002554:	4013      	ands	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2220      	movs	r2, #32
 800255c:	4013      	ands	r3, r2
 800255e:	d103      	bne.n	8002568 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2201      	movs	r2, #1
 8002564:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002566:	d00b      	beq.n	8002580 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2208      	movs	r2, #8
 800256e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	2208      	movs	r2, #8
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	4013      	ands	r3, r2
 8002588:	d011      	beq.n	80025ae <HAL_UART_IRQHandler+0x146>
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	04db      	lsls	r3, r3, #19
 8002590:	4013      	ands	r3, r2
 8002592:	d00c      	beq.n	80025ae <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	589b      	ldr	r3, [r3, r2]
 80025a4:	2220      	movs	r2, #32
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	589b      	ldr	r3, [r3, r2]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d100      	bne.n	80025ba <HAL_UART_IRQHandler+0x152>
 80025b8:	e14e      	b.n	8002858 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2220      	movs	r2, #32
 80025be:	4013      	ands	r3, r2
 80025c0:	d00c      	beq.n	80025dc <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2220      	movs	r2, #32
 80025c6:	4013      	ands	r3, r2
 80025c8:	d008      	beq.n	80025dc <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	0010      	movs	r0, r2
 80025da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	589b      	ldr	r3, [r3, r2]
 80025e2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d003      	beq.n	80025fa <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2228      	movs	r2, #40	; 0x28
 80025f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025f8:	d033      	beq.n	8002662 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fe11 	bl	8003224 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	4013      	ands	r3, r2
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d123      	bne.n	8002658 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	438a      	bics	r2, r1
 800261e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	2b00      	cmp	r3, #0
 8002626:	d012      	beq.n	800264e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_UART_IRQHandler+0x300>)
 800262e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	0018      	movs	r0, r3
 8002636:	f7fe fc73 	bl	8000f20 <HAL_DMA_Abort_IT>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d01a      	beq.n	8002674 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	0018      	movs	r0, r3
 800264a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	e012      	b.n	8002674 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f90d 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002656:	e00d      	b.n	8002674 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f908 	bl	8002870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	e008      	b.n	8002674 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	0018      	movs	r0, r3
 8002666:	f000 f903 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	2100      	movs	r1, #0
 8002670:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002672:	e0f1      	b.n	8002858 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	46c0      	nop			; (mov r8, r8)
    return;
 8002676:	e0ef      	b.n	8002858 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	2b01      	cmp	r3, #1
 800267e:	d000      	beq.n	8002682 <HAL_UART_IRQHandler+0x21a>
 8002680:	e0b5      	b.n	80027ee <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2210      	movs	r2, #16
 8002686:	4013      	ands	r3, r2
 8002688:	d100      	bne.n	800268c <HAL_UART_IRQHandler+0x224>
 800268a:	e0b0      	b.n	80027ee <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2210      	movs	r2, #16
 8002690:	4013      	ands	r3, r2
 8002692:	d100      	bne.n	8002696 <HAL_UART_IRQHandler+0x22e>
 8002694:	e0ab      	b.n	80027ee <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2210      	movs	r2, #16
 800269c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d161      	bne.n	8002770 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	2108      	movs	r1, #8
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_UART_IRQHandler+0x25c>
 80026c2:	e0cb      	b.n	800285c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2258      	movs	r2, #88	; 0x58
 80026c8:	5a9b      	ldrh	r3, [r3, r2]
 80026ca:	187a      	adds	r2, r7, r1
 80026cc:	8812      	ldrh	r2, [r2, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d300      	bcc.n	80026d4 <HAL_UART_IRQHandler+0x26c>
 80026d2:	e0c3      	b.n	800285c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	187a      	adds	r2, r7, r1
 80026d8:	215a      	movs	r1, #90	; 0x5a
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2220      	movs	r2, #32
 80026e8:	4013      	ands	r3, r2
 80026ea:	d12a      	bne.n	8002742 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	491d      	ldr	r1, [pc, #116]	; (800276c <HAL_UART_IRQHandler+0x304>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	438a      	bics	r2, r1
 800270a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2140      	movs	r1, #64	; 0x40
 8002718:	438a      	bics	r2, r1
 800271a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2110      	movs	r1, #16
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	0018      	movs	r0, r3
 800273e:	f7fe fbaf 	bl	8000ea0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2258      	movs	r2, #88	; 0x58
 8002746:	5a9a      	ldrh	r2, [r3, r2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	215a      	movs	r1, #90	; 0x5a
 800274c:	5a5b      	ldrh	r3, [r3, r1]
 800274e:	b29b      	uxth	r3, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f891 	bl	8002880 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800275e:	e07d      	b.n	800285c <HAL_UART_IRQHandler+0x3f4>
 8002760:	0000080f 	.word	0x0000080f
 8002764:	04000120 	.word	0x04000120
 8002768:	08003285 	.word	0x08003285
 800276c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2258      	movs	r2, #88	; 0x58
 8002774:	5a99      	ldrh	r1, [r3, r2]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	225a      	movs	r2, #90	; 0x5a
 800277a:	5a9b      	ldrh	r3, [r3, r2]
 800277c:	b29a      	uxth	r2, r3
 800277e:	200a      	movs	r0, #10
 8002780:	183b      	adds	r3, r7, r0
 8002782:	1a8a      	subs	r2, r1, r2
 8002784:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	225a      	movs	r2, #90	; 0x5a
 800278a:	5a9b      	ldrh	r3, [r3, r2]
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d100      	bne.n	8002794 <HAL_UART_IRQHandler+0x32c>
 8002792:	e065      	b.n	8002860 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8002794:	183b      	adds	r3, r7, r0
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d061      	beq.n	8002860 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4931      	ldr	r1, [pc, #196]	; (800286c <HAL_UART_IRQHandler+0x404>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	438a      	bics	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2110      	movs	r1, #16
 80027da:	438a      	bics	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0011      	movs	r1, r2
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 f84a 	bl	8002880 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027ec:	e038      	b.n	8002860 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	035b      	lsls	r3, r3, #13
 80027f4:	4013      	ands	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_UART_IRQHandler+0x3ae>
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	03db      	lsls	r3, r3, #15
 80027fe:	4013      	ands	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	0352      	lsls	r2, r2, #13
 800280a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fe52 	bl	80034b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002814:	e027      	b.n	8002866 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	4013      	ands	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01a      	beq.n	8002864 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	0010      	movs	r0, r2
 8002836:	4798      	blx	r3
    }
    return;
 8002838:	e014      	b.n	8002864 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	4013      	ands	r3, r2
 8002840:	d011      	beq.n	8002866 <HAL_UART_IRQHandler+0x3fe>
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	4013      	ands	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f000 fd30 	bl	80032b2 <UART_EndTransmit_IT>
    return;
 8002852:	e008      	b.n	8002866 <HAL_UART_IRQHandler+0x3fe>
      return;
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	e006      	b.n	8002866 <HAL_UART_IRQHandler+0x3fe>
    return;
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	e004      	b.n	8002866 <HAL_UART_IRQHandler+0x3fe>
      return;
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	e002      	b.n	8002866 <HAL_UART_IRQHandler+0x3fe>
      return;
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	e000      	b.n	8002866 <HAL_UART_IRQHandler+0x3fe>
    return;
 8002864:	46c0      	nop			; (mov r8, r8)
  }

}
 8002866:	46bd      	mov	sp, r7
 8002868:	b008      	add	sp, #32
 800286a:	bd80      	pop	{r7, pc}
 800286c:	fffffedf 	.word	0xfffffedf

08002870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	000a      	movs	r2, r1
 800288a:	1cbb      	adds	r3, r7, #2
 800288c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b08e      	sub	sp, #56	; 0x38
 800289c:	af00      	add	r7, sp, #0
 800289e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028a0:	231a      	movs	r3, #26
 80028a2:	2218      	movs	r2, #24
 80028a4:	4694      	mov	ip, r2
 80028a6:	44bc      	add	ip, r7
 80028a8:	4463      	add	r3, ip
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	431a      	orrs	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <UART_SetConfig+0x2f8>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4aac      	ldr	r2, [pc, #688]	; (8002b94 <UART_SetConfig+0x2fc>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4aa6      	ldr	r2, [pc, #664]	; (8002b98 <UART_SetConfig+0x300>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800290a:	4313      	orrs	r3, r2
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4aa1      	ldr	r2, [pc, #644]	; (8002b9c <UART_SetConfig+0x304>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a9d      	ldr	r2, [pc, #628]	; (8002ba0 <UART_SetConfig+0x308>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d136      	bne.n	800299c <UART_SetConfig+0x104>
 800292e:	4b9d      	ldr	r3, [pc, #628]	; (8002ba4 <UART_SetConfig+0x30c>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	2203      	movs	r2, #3
 8002934:	4013      	ands	r3, r2
 8002936:	2b03      	cmp	r3, #3
 8002938:	d020      	beq.n	800297c <UART_SetConfig+0xe4>
 800293a:	d827      	bhi.n	800298c <UART_SetConfig+0xf4>
 800293c:	2b02      	cmp	r3, #2
 800293e:	d00d      	beq.n	800295c <UART_SetConfig+0xc4>
 8002940:	d824      	bhi.n	800298c <UART_SetConfig+0xf4>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <UART_SetConfig+0xb4>
 8002946:	2b01      	cmp	r3, #1
 8002948:	d010      	beq.n	800296c <UART_SetConfig+0xd4>
 800294a:	e01f      	b.n	800298c <UART_SetConfig+0xf4>
 800294c:	231b      	movs	r3, #27
 800294e:	2218      	movs	r2, #24
 8002950:	4694      	mov	ip, r2
 8002952:	44bc      	add	ip, r7
 8002954:	4463      	add	r3, ip
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e0c5      	b.n	8002ae8 <UART_SetConfig+0x250>
 800295c:	231b      	movs	r3, #27
 800295e:	2218      	movs	r2, #24
 8002960:	4694      	mov	ip, r2
 8002962:	44bc      	add	ip, r7
 8002964:	4463      	add	r3, ip
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e0bd      	b.n	8002ae8 <UART_SetConfig+0x250>
 800296c:	231b      	movs	r3, #27
 800296e:	2218      	movs	r2, #24
 8002970:	4694      	mov	ip, r2
 8002972:	44bc      	add	ip, r7
 8002974:	4463      	add	r3, ip
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e0b5      	b.n	8002ae8 <UART_SetConfig+0x250>
 800297c:	231b      	movs	r3, #27
 800297e:	2218      	movs	r2, #24
 8002980:	4694      	mov	ip, r2
 8002982:	44bc      	add	ip, r7
 8002984:	4463      	add	r3, ip
 8002986:	2208      	movs	r2, #8
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e0ad      	b.n	8002ae8 <UART_SetConfig+0x250>
 800298c:	231b      	movs	r3, #27
 800298e:	2218      	movs	r2, #24
 8002990:	4694      	mov	ip, r2
 8002992:	44bc      	add	ip, r7
 8002994:	4463      	add	r3, ip
 8002996:	2210      	movs	r2, #16
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e0a5      	b.n	8002ae8 <UART_SetConfig+0x250>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a81      	ldr	r2, [pc, #516]	; (8002ba8 <UART_SetConfig+0x310>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d136      	bne.n	8002a14 <UART_SetConfig+0x17c>
 80029a6:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <UART_SetConfig+0x30c>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	220c      	movs	r2, #12
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d020      	beq.n	80029f4 <UART_SetConfig+0x15c>
 80029b2:	d827      	bhi.n	8002a04 <UART_SetConfig+0x16c>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d00d      	beq.n	80029d4 <UART_SetConfig+0x13c>
 80029b8:	d824      	bhi.n	8002a04 <UART_SetConfig+0x16c>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <UART_SetConfig+0x12c>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d010      	beq.n	80029e4 <UART_SetConfig+0x14c>
 80029c2:	e01f      	b.n	8002a04 <UART_SetConfig+0x16c>
 80029c4:	231b      	movs	r3, #27
 80029c6:	2218      	movs	r2, #24
 80029c8:	4694      	mov	ip, r2
 80029ca:	44bc      	add	ip, r7
 80029cc:	4463      	add	r3, ip
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e089      	b.n	8002ae8 <UART_SetConfig+0x250>
 80029d4:	231b      	movs	r3, #27
 80029d6:	2218      	movs	r2, #24
 80029d8:	4694      	mov	ip, r2
 80029da:	44bc      	add	ip, r7
 80029dc:	4463      	add	r3, ip
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e081      	b.n	8002ae8 <UART_SetConfig+0x250>
 80029e4:	231b      	movs	r3, #27
 80029e6:	2218      	movs	r2, #24
 80029e8:	4694      	mov	ip, r2
 80029ea:	44bc      	add	ip, r7
 80029ec:	4463      	add	r3, ip
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e079      	b.n	8002ae8 <UART_SetConfig+0x250>
 80029f4:	231b      	movs	r3, #27
 80029f6:	2218      	movs	r2, #24
 80029f8:	4694      	mov	ip, r2
 80029fa:	44bc      	add	ip, r7
 80029fc:	4463      	add	r3, ip
 80029fe:	2208      	movs	r2, #8
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e071      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002a04:	231b      	movs	r3, #27
 8002a06:	2218      	movs	r2, #24
 8002a08:	4694      	mov	ip, r2
 8002a0a:	44bc      	add	ip, r7
 8002a0c:	4463      	add	r3, ip
 8002a0e:	2210      	movs	r2, #16
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e069      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a64      	ldr	r2, [pc, #400]	; (8002bac <UART_SetConfig+0x314>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d107      	bne.n	8002a2e <UART_SetConfig+0x196>
 8002a1e:	231b      	movs	r3, #27
 8002a20:	2218      	movs	r2, #24
 8002a22:	4694      	mov	ip, r2
 8002a24:	44bc      	add	ip, r7
 8002a26:	4463      	add	r3, ip
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e05c      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <UART_SetConfig+0x318>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d107      	bne.n	8002a48 <UART_SetConfig+0x1b0>
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2218      	movs	r2, #24
 8002a3c:	4694      	mov	ip, r2
 8002a3e:	44bc      	add	ip, r7
 8002a40:	4463      	add	r3, ip
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e04f      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <UART_SetConfig+0x300>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d143      	bne.n	8002ada <UART_SetConfig+0x242>
 8002a52:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <UART_SetConfig+0x30c>)
 8002a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a56:	23c0      	movs	r3, #192	; 0xc0
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	22c0      	movs	r2, #192	; 0xc0
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02a      	beq.n	8002aba <UART_SetConfig+0x222>
 8002a64:	22c0      	movs	r2, #192	; 0xc0
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d82e      	bhi.n	8002aca <UART_SetConfig+0x232>
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d012      	beq.n	8002a9a <UART_SetConfig+0x202>
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d826      	bhi.n	8002aca <UART_SetConfig+0x232>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <UART_SetConfig+0x1f2>
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	00d2      	lsls	r2, r2, #3
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d010      	beq.n	8002aaa <UART_SetConfig+0x212>
 8002a88:	e01f      	b.n	8002aca <UART_SetConfig+0x232>
 8002a8a:	231b      	movs	r3, #27
 8002a8c:	2218      	movs	r2, #24
 8002a8e:	4694      	mov	ip, r2
 8002a90:	44bc      	add	ip, r7
 8002a92:	4463      	add	r3, ip
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e026      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002a9a:	231b      	movs	r3, #27
 8002a9c:	2218      	movs	r2, #24
 8002a9e:	4694      	mov	ip, r2
 8002aa0:	44bc      	add	ip, r7
 8002aa2:	4463      	add	r3, ip
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e01e      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002aaa:	231b      	movs	r3, #27
 8002aac:	2218      	movs	r2, #24
 8002aae:	4694      	mov	ip, r2
 8002ab0:	44bc      	add	ip, r7
 8002ab2:	4463      	add	r3, ip
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e016      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002aba:	231b      	movs	r3, #27
 8002abc:	2218      	movs	r2, #24
 8002abe:	4694      	mov	ip, r2
 8002ac0:	44bc      	add	ip, r7
 8002ac2:	4463      	add	r3, ip
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e00e      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002aca:	231b      	movs	r3, #27
 8002acc:	2218      	movs	r2, #24
 8002ace:	4694      	mov	ip, r2
 8002ad0:	44bc      	add	ip, r7
 8002ad2:	4463      	add	r3, ip
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e006      	b.n	8002ae8 <UART_SetConfig+0x250>
 8002ada:	231b      	movs	r3, #27
 8002adc:	2218      	movs	r2, #24
 8002ade:	4694      	mov	ip, r2
 8002ae0:	44bc      	add	ip, r7
 8002ae2:	4463      	add	r3, ip
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <UART_SetConfig+0x300>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d000      	beq.n	8002af4 <UART_SetConfig+0x25c>
 8002af2:	e09e      	b.n	8002c32 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002af4:	231b      	movs	r3, #27
 8002af6:	2218      	movs	r2, #24
 8002af8:	4694      	mov	ip, r2
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d01d      	beq.n	8002b40 <UART_SetConfig+0x2a8>
 8002b04:	dc20      	bgt.n	8002b48 <UART_SetConfig+0x2b0>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d015      	beq.n	8002b36 <UART_SetConfig+0x29e>
 8002b0a:	dc1d      	bgt.n	8002b48 <UART_SetConfig+0x2b0>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <UART_SetConfig+0x27e>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d005      	beq.n	8002b20 <UART_SetConfig+0x288>
 8002b14:	e018      	b.n	8002b48 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b16:	f7ff f9b3 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1e:	e01d      	b.n	8002b5c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <UART_SetConfig+0x30c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	4013      	ands	r3, r2
 8002b28:	d002      	beq.n	8002b30 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <UART_SetConfig+0x31c>)
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b2e:	e015      	b.n	8002b5c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <UART_SetConfig+0x320>)
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b34:	e012      	b.n	8002b5c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b36:	f7ff f8f3 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b3e:	e00d      	b.n	8002b5c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b46:	e009      	b.n	8002b5c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b4c:	231a      	movs	r3, #26
 8002b4e:	2218      	movs	r2, #24
 8002b50:	4694      	mov	ip, r2
 8002b52:	44bc      	add	ip, r7
 8002b54:	4463      	add	r3, ip
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
        break;
 8002b5a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d100      	bne.n	8002b64 <UART_SetConfig+0x2cc>
 8002b62:	e13c      	b.n	8002dde <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	0013      	movs	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	189b      	adds	r3, r3, r2
 8002b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d305      	bcc.n	8002b80 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d91d      	bls.n	8002bbc <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002b80:	231a      	movs	r3, #26
 8002b82:	2218      	movs	r2, #24
 8002b84:	4694      	mov	ip, r2
 8002b86:	44bc      	add	ip, r7
 8002b88:	4463      	add	r3, ip
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e126      	b.n	8002dde <UART_SetConfig+0x546>
 8002b90:	efff69f3 	.word	0xefff69f3
 8002b94:	ffffcfff 	.word	0xffffcfff
 8002b98:	40004800 	.word	0x40004800
 8002b9c:	fffff4ff 	.word	0xfffff4ff
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40004c00 	.word	0x40004c00
 8002bb0:	40005000 	.word	0x40005000
 8002bb4:	003d0900 	.word	0x003d0900
 8002bb8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	6939      	ldr	r1, [r7, #16]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	000b      	movs	r3, r1
 8002bca:	0e1b      	lsrs	r3, r3, #24
 8002bcc:	0010      	movs	r0, r2
 8002bce:	0205      	lsls	r5, r0, #8
 8002bd0:	431d      	orrs	r5, r3
 8002bd2:	000b      	movs	r3, r1
 8002bd4:	021c      	lsls	r4, r3, #8
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68b8      	ldr	r0, [r7, #8]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	1900      	adds	r0, r0, r4
 8002be8:	4169      	adcs	r1, r5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f7fd fb12 	bl	8000220 <__aeabi_uldivmod>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	000b      	movs	r3, r1
 8002c00:	0013      	movs	r3, r2
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c06:	23c0      	movs	r3, #192	; 0xc0
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d309      	bcc.n	8002c22 <UART_SetConfig+0x38a>
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	035b      	lsls	r3, r3, #13
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d204      	bcs.n	8002c22 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	e0dd      	b.n	8002dde <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c22:	231a      	movs	r3, #26
 8002c24:	2218      	movs	r2, #24
 8002c26:	4694      	mov	ip, r2
 8002c28:	44bc      	add	ip, r7
 8002c2a:	4463      	add	r3, ip
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e0d5      	b.n	8002dde <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d000      	beq.n	8002c40 <UART_SetConfig+0x3a8>
 8002c3e:	e074      	b.n	8002d2a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002c40:	231b      	movs	r3, #27
 8002c42:	2218      	movs	r2, #24
 8002c44:	4694      	mov	ip, r2
 8002c46:	44bc      	add	ip, r7
 8002c48:	4463      	add	r3, ip
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d822      	bhi.n	8002c96 <UART_SetConfig+0x3fe>
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <UART_SetConfig+0x568>)
 8002c54:	18d3      	adds	r3, r2, r3
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c5a:	f7ff f911 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c62:	e022      	b.n	8002caa <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7ff f922 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c6c:	e01d      	b.n	8002caa <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <UART_SetConfig+0x56c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2210      	movs	r2, #16
 8002c74:	4013      	ands	r3, r2
 8002c76:	d002      	beq.n	8002c7e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c78:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <UART_SetConfig+0x570>)
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c7c:	e015      	b.n	8002caa <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <UART_SetConfig+0x574>)
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c82:	e012      	b.n	8002caa <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c84:	f7ff f84c 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8c:	e00d      	b.n	8002caa <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c94:	e009      	b.n	8002caa <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c9a:	231a      	movs	r3, #26
 8002c9c:	2218      	movs	r2, #24
 8002c9e:	4694      	mov	ip, r2
 8002ca0:	44bc      	add	ip, r7
 8002ca2:	4463      	add	r3, ip
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
        break;
 8002ca8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d100      	bne.n	8002cb2 <UART_SetConfig+0x41a>
 8002cb0:	e095      	b.n	8002dde <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	005a      	lsls	r2, r3, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	18d2      	adds	r2, r2, r3
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f7fd fa1f 	bl	8000108 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d921      	bls.n	8002d1a <UART_SetConfig+0x482>
 8002cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	025b      	lsls	r3, r3, #9
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d21c      	bcs.n	8002d1a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	200e      	movs	r0, #14
 8002ce6:	2418      	movs	r4, #24
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	181b      	adds	r3, r3, r0
 8002cec:	210f      	movs	r1, #15
 8002cee:	438a      	bics	r2, r1
 8002cf0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	181b      	adds	r3, r3, r0
 8002d02:	193a      	adds	r2, r7, r4
 8002d04:	1812      	adds	r2, r2, r0
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	193a      	adds	r2, r7, r4
 8002d12:	1812      	adds	r2, r2, r0
 8002d14:	8812      	ldrh	r2, [r2, #0]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e061      	b.n	8002dde <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d1a:	231a      	movs	r3, #26
 8002d1c:	2218      	movs	r2, #24
 8002d1e:	4694      	mov	ip, r2
 8002d20:	44bc      	add	ip, r7
 8002d22:	4463      	add	r3, ip
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e059      	b.n	8002dde <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d2a:	231b      	movs	r3, #27
 8002d2c:	2218      	movs	r2, #24
 8002d2e:	4694      	mov	ip, r2
 8002d30:	44bc      	add	ip, r7
 8002d32:	4463      	add	r3, ip
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d822      	bhi.n	8002d80 <UART_SetConfig+0x4e8>
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <UART_SetConfig+0x578>)
 8002d3e:	18d3      	adds	r3, r2, r3
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d44:	f7ff f89c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d4c:	e022      	b.n	8002d94 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d4e:	f7ff f8ad 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8002d52:	0003      	movs	r3, r0
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d56:	e01d      	b.n	8002d94 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <UART_SetConfig+0x56c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d002      	beq.n	8002d68 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <UART_SetConfig+0x570>)
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d66:	e015      	b.n	8002d94 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <UART_SetConfig+0x574>)
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d6c:	e012      	b.n	8002d94 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6e:	f7fe ffd7 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8002d72:	0003      	movs	r3, r0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d76:	e00d      	b.n	8002d94 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d7e:	e009      	b.n	8002d94 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d84:	231a      	movs	r3, #26
 8002d86:	2218      	movs	r2, #24
 8002d88:	4694      	mov	ip, r2
 8002d8a:	44bc      	add	ip, r7
 8002d8c:	4463      	add	r3, ip
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
        break;
 8002d92:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	085a      	lsrs	r2, r3, #1
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	18d2      	adds	r2, r2, r3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0019      	movs	r1, r3
 8002daa:	0010      	movs	r0, r2
 8002dac:	f7fd f9ac 	bl	8000108 <__udivsi3>
 8002db0:	0003      	movs	r3, r0
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2b0f      	cmp	r3, #15
 8002dba:	d909      	bls.n	8002dd0 <UART_SetConfig+0x538>
 8002dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	025b      	lsls	r3, r3, #9
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d204      	bcs.n	8002dd0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	e006      	b.n	8002dde <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd0:	231a      	movs	r3, #26
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	44bc      	add	ip, r7
 8002dd8:	4463      	add	r3, ip
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2200      	movs	r2, #0
 8002de2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2200      	movs	r2, #0
 8002de8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002dea:	231a      	movs	r3, #26
 8002dec:	2218      	movs	r2, #24
 8002dee:	4694      	mov	ip, r2
 8002df0:	44bc      	add	ip, r7
 8002df2:	4463      	add	r3, ip
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b00e      	add	sp, #56	; 0x38
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	08003624 	.word	0x08003624
 8002e04:	40021000 	.word	0x40021000
 8002e08:	003d0900 	.word	0x003d0900
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	08003648 	.word	0x08003648

08002e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a4a      	ldr	r2, [pc, #296]	; (8002f58 <UART_AdvFeatureConfig+0x144>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a43      	ldr	r2, [pc, #268]	; (8002f5c <UART_AdvFeatureConfig+0x148>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2204      	movs	r2, #4
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a3b      	ldr	r2, [pc, #236]	; (8002f60 <UART_AdvFeatureConfig+0x14c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2208      	movs	r2, #8
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <UART_AdvFeatureConfig+0x150>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <UART_AdvFeatureConfig+0x154>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2220      	movs	r2, #32
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <UART_AdvFeatureConfig+0x158>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <UART_AdvFeatureConfig+0x15c>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	035b      	lsls	r3, r3, #13
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d10b      	bne.n	8002f2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <UART_AdvFeatureConfig+0x160>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	4013      	ands	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <UART_AdvFeatureConfig+0x164>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	fffdffff 	.word	0xfffdffff
 8002f5c:	fffeffff 	.word	0xfffeffff
 8002f60:	fffbffff 	.word	0xfffbffff
 8002f64:	ffff7fff 	.word	0xffff7fff
 8002f68:	ffffefff 	.word	0xffffefff
 8002f6c:	ffffdfff 	.word	0xffffdfff
 8002f70:	ffefffff 	.word	0xffefffff
 8002f74:	ff9fffff 	.word	0xff9fffff
 8002f78:	fff7ffff 	.word	0xfff7ffff

08002f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f8c:	f7fd fe7c 	bl	8000c88 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d10c      	bne.n	8002fbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	0391      	lsls	r1, r2, #14
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <UART_CheckIdleState+0x8c>)
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f000 f82c 	bl	800300c <UART_WaitOnFlagUntilTimeout>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d001      	beq.n	8002fbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e021      	b.n	8003000 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d10c      	bne.n	8002fe4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	03d1      	lsls	r1, r2, #15
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <UART_CheckIdleState+0x8c>)
 8002fd4:	9200      	str	r2, [sp, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f000 f818 	bl	800300c <UART_WaitOnFlagUntilTimeout>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e00d      	b.n	8003000 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2274      	movs	r2, #116	; 0x74
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b004      	add	sp, #16
 8003006:	bd80      	pop	{r7, pc}
 8003008:	01ffffff 	.word	0x01ffffff

0800300c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301c:	e05e      	b.n	80030dc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	3301      	adds	r3, #1
 8003022:	d05b      	beq.n	80030dc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fd fe30 	bl	8000c88 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11b      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	492f      	ldr	r1, [pc, #188]	; (8003104 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003046:	400a      	ands	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	438a      	bics	r2, r1
 8003058:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2274      	movs	r2, #116	; 0x74
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e044      	b.n	80030fc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2204      	movs	r2, #4
 800307a:	4013      	ands	r3, r2
 800307c:	d02e      	beq.n	80030dc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	401a      	ands	r2, r3
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	429a      	cmp	r2, r3
 8003090:	d124      	bne.n	80030dc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4917      	ldr	r1, [pc, #92]	; (8003104 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	438a      	bics	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	2120      	movs	r1, #32
 80030ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2274      	movs	r2, #116	; 0x74
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e00f      	b.n	80030fc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4013      	ands	r3, r2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	425a      	negs	r2, r3
 80030ec:	4153      	adcs	r3, r2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	001a      	movs	r2, r3
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d091      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	fffffe5f 	.word	0xfffffe5f

08003108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	1dbb      	adds	r3, r7, #6
 8003114:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1dba      	adds	r2, r7, #6
 8003120:	2158      	movs	r1, #88	; 0x58
 8003122:	8812      	ldrh	r2, [r2, #0]
 8003124:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1dba      	adds	r2, r7, #6
 800312a:	215a      	movs	r1, #90	; 0x5a
 800312c:	8812      	ldrh	r2, [r2, #0]
 800312e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	015b      	lsls	r3, r3, #5
 800313e:	429a      	cmp	r2, r3
 8003140:	d10d      	bne.n	800315e <UART_Start_Receive_IT+0x56>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <UART_Start_Receive_IT+0x4c>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	225c      	movs	r2, #92	; 0x5c
 800314e:	4932      	ldr	r1, [pc, #200]	; (8003218 <UART_Start_Receive_IT+0x110>)
 8003150:	5299      	strh	r1, [r3, r2]
 8003152:	e02e      	b.n	80031b2 <UART_Start_Receive_IT+0xaa>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	225c      	movs	r2, #92	; 0x5c
 8003158:	21ff      	movs	r1, #255	; 0xff
 800315a:	5299      	strh	r1, [r3, r2]
 800315c:	e029      	b.n	80031b2 <UART_Start_Receive_IT+0xaa>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <UART_Start_Receive_IT+0x7a>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <UART_Start_Receive_IT+0x70>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	225c      	movs	r2, #92	; 0x5c
 8003172:	21ff      	movs	r1, #255	; 0xff
 8003174:	5299      	strh	r1, [r3, r2]
 8003176:	e01c      	b.n	80031b2 <UART_Start_Receive_IT+0xaa>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	225c      	movs	r2, #92	; 0x5c
 800317c:	217f      	movs	r1, #127	; 0x7f
 800317e:	5299      	strh	r1, [r3, r2]
 8003180:	e017      	b.n	80031b2 <UART_Start_Receive_IT+0xaa>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	055b      	lsls	r3, r3, #21
 800318a:	429a      	cmp	r2, r3
 800318c:	d10d      	bne.n	80031aa <UART_Start_Receive_IT+0xa2>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <UART_Start_Receive_IT+0x98>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	225c      	movs	r2, #92	; 0x5c
 800319a:	217f      	movs	r1, #127	; 0x7f
 800319c:	5299      	strh	r1, [r3, r2]
 800319e:	e008      	b.n	80031b2 <UART_Start_Receive_IT+0xaa>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	225c      	movs	r2, #92	; 0x5c
 80031a4:	213f      	movs	r1, #63	; 0x3f
 80031a6:	5299      	strh	r1, [r3, r2]
 80031a8:	e003      	b.n	80031b2 <UART_Start_Receive_IT+0xaa>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	225c      	movs	r2, #92	; 0x5c
 80031ae:	2100      	movs	r1, #0
 80031b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	2100      	movs	r1, #0
 80031b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2222      	movs	r2, #34	; 0x22
 80031be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <UART_Start_Receive_IT+0xe4>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a0d      	ldr	r2, [pc, #52]	; (800321c <UART_Start_Receive_IT+0x114>)
 80031e8:	665a      	str	r2, [r3, #100]	; 0x64
 80031ea:	e002      	b.n	80031f2 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <UART_Start_Receive_IT+0x118>)
 80031f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2274      	movs	r2, #116	; 0x74
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2190      	movs	r1, #144	; 0x90
 8003206:	0049      	lsls	r1, r1, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b004      	add	sp, #16
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	000001ff 	.word	0x000001ff
 800321c:	080033d1 	.word	0x080033d1
 8003220:	080032e9 	.word	0x080032e9

08003224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4912      	ldr	r1, [pc, #72]	; (8003280 <UART_EndRxTransfer+0x5c>)
 8003238:	400a      	ands	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2101      	movs	r1, #1
 8003248:	438a      	bics	r2, r1
 800324a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2110      	movs	r1, #16
 8003260:	438a      	bics	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	fffffedf 	.word	0xfffffedf

08003284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	225a      	movs	r2, #90	; 0x5a
 8003296:	2100      	movs	r1, #0
 8003298:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2252      	movs	r2, #82	; 0x52
 800329e:	2100      	movs	r1, #0
 80032a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff fae3 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fd fbad 	bl	8000a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80032f0:	200e      	movs	r0, #14
 80032f2:	183b      	adds	r3, r7, r0
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	215c      	movs	r1, #92	; 0x5c
 80032f8:	5a52      	ldrh	r2, [r2, r1]
 80032fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003300:	2b22      	cmp	r3, #34	; 0x22
 8003302:	d157      	bne.n	80033b4 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330a:	210c      	movs	r1, #12
 800330c:	187b      	adds	r3, r7, r1
 800330e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003310:	187b      	adds	r3, r7, r1
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	183b      	adds	r3, r7, r0
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b2d9      	uxtb	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	400a      	ands	r2, r1
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	225a      	movs	r2, #90	; 0x5a
 8003334:	5a9b      	ldrh	r3, [r3, r2]
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b299      	uxth	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	225a      	movs	r2, #90	; 0x5a
 8003340:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	225a      	movs	r2, #90	; 0x5a
 8003346:	5a9b      	ldrh	r3, [r3, r2]
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13a      	bne.n	80033c4 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	491c      	ldr	r1, [pc, #112]	; (80033cc <UART_RxISR_8BIT+0xe4>)
 800335a:	400a      	ands	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	438a      	bics	r2, r1
 800336c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	2b01      	cmp	r3, #1
 8003380:	d110      	bne.n	80033a4 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2110      	movs	r1, #16
 800338e:	438a      	bics	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2258      	movs	r2, #88	; 0x58
 8003396:	5a9a      	ldrh	r2, [r3, r2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fa6f 	bl	8002880 <HAL_UARTEx_RxEventCallback>
 80033a2:	e003      	b.n	80033ac <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7fd fb32 	bl	8000a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033b2:	e007      	b.n	80033c4 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2108      	movs	r1, #8
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	fffffedf 	.word	0xfffffedf

080033d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80033d8:	200e      	movs	r0, #14
 80033da:	183b      	adds	r3, r7, r0
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	215c      	movs	r1, #92	; 0x5c
 80033e0:	5a52      	ldrh	r2, [r2, r1]
 80033e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e8:	2b22      	cmp	r3, #34	; 0x22
 80033ea:	d157      	bne.n	800349c <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f2:	210c      	movs	r1, #12
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	183a      	adds	r2, r7, r0
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	8812      	ldrh	r2, [r2, #0]
 8003406:	4013      	ands	r3, r2
 8003408:	b29a      	uxth	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	225a      	movs	r2, #90	; 0x5a
 800341c:	5a9b      	ldrh	r3, [r3, r2]
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b299      	uxth	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	225a      	movs	r2, #90	; 0x5a
 8003428:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	225a      	movs	r2, #90	; 0x5a
 800342e:	5a9b      	ldrh	r3, [r3, r2]
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d13a      	bne.n	80034ac <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	491c      	ldr	r1, [pc, #112]	; (80034b4 <UART_RxISR_16BIT+0xe4>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	438a      	bics	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	2b01      	cmp	r3, #1
 8003468:	d110      	bne.n	800348c <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2110      	movs	r1, #16
 8003476:	438a      	bics	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2258      	movs	r2, #88	; 0x58
 800347e:	5a9a      	ldrh	r2, [r3, r2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff f9fb 	bl	8002880 <HAL_UARTEx_RxEventCallback>
 800348a:	e003      	b.n	8003494 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fabe 	bl	8000a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800349a:	e007      	b.n	80034ac <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2108      	movs	r1, #8
 80034a8:	430a      	orrs	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	fffffedf 	.word	0xfffffedf

080034b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <__libc_init_array>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	2600      	movs	r6, #0
 80034cc:	4d0c      	ldr	r5, [pc, #48]	; (8003500 <__libc_init_array+0x38>)
 80034ce:	4c0d      	ldr	r4, [pc, #52]	; (8003504 <__libc_init_array+0x3c>)
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	42a6      	cmp	r6, r4
 80034d6:	d109      	bne.n	80034ec <__libc_init_array+0x24>
 80034d8:	2600      	movs	r6, #0
 80034da:	f000 f821 	bl	8003520 <_init>
 80034de:	4d0a      	ldr	r5, [pc, #40]	; (8003508 <__libc_init_array+0x40>)
 80034e0:	4c0a      	ldr	r4, [pc, #40]	; (800350c <__libc_init_array+0x44>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	42a6      	cmp	r6, r4
 80034e8:	d105      	bne.n	80034f6 <__libc_init_array+0x2e>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	00b3      	lsls	r3, r6, #2
 80034ee:	58eb      	ldr	r3, [r5, r3]
 80034f0:	4798      	blx	r3
 80034f2:	3601      	adds	r6, #1
 80034f4:	e7ee      	b.n	80034d4 <__libc_init_array+0xc>
 80034f6:	00b3      	lsls	r3, r6, #2
 80034f8:	58eb      	ldr	r3, [r5, r3]
 80034fa:	4798      	blx	r3
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7f2      	b.n	80034e6 <__libc_init_array+0x1e>
 8003500:	08003674 	.word	0x08003674
 8003504:	08003674 	.word	0x08003674
 8003508:	08003674 	.word	0x08003674
 800350c:	08003678 	.word	0x08003678

08003510 <memset>:
 8003510:	0003      	movs	r3, r0
 8003512:	1882      	adds	r2, r0, r2
 8003514:	4293      	cmp	r3, r2
 8003516:	d100      	bne.n	800351a <memset+0xa>
 8003518:	4770      	bx	lr
 800351a:	7019      	strb	r1, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	e7f9      	b.n	8003514 <memset+0x4>

08003520 <_init>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr

0800352c <_fini>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr
