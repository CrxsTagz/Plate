
Prueba Proyecto 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800450c  0800450c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004514  08004514  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800451c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  0800458c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800458c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f6f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001609  00000000  00000000  00027007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00028610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00028ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001382e  00000000  00000000  00029338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008705  00000000  00000000  0003cb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ae4a  00000000  00000000  0004526b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c00b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  000c0108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042b0 	.word	0x080042b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080042b0 	.word	0x080042b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <gameplay>:
 * Setting the plate velocity with the Dip-Switch
 *
 */

int gameplay()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

	//velocity variable.

	int velocity = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) //First Switch
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	00da      	lsls	r2, r3, #3
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fb15 	bl	8001af4 <HAL_GPIO_ReadPin>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d018      	beq.n	8000500 <gameplay+0x50>

	{
	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) //Second Switch
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <gameplay+0x60>)
 80004d0:	2108      	movs	r1, #8
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fb0e 	bl	8001af4 <HAL_GPIO_ReadPin>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d00e      	beq.n	80004fa <gameplay+0x4a>

	    {

	        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)) //Thrid Switch
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <gameplay+0x60>)
 80004de:	2120      	movs	r1, #32
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fb07 	bl	8001af4 <HAL_GPIO_ReadPin>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d003      	beq.n	80004f2 <gameplay+0x42>

	        {
	            velocity = 500; //Super Fast
 80004ea:	23fa      	movs	r3, #250	; 0xfa
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	e009      	b.n	8000506 <gameplay+0x56>

	        }
	        else
	        {
	        	velocity = 1000; //Fast
 80004f2:	23fa      	movs	r3, #250	; 0xfa
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	e005      	b.n	8000506 <gameplay+0x56>
	    }

	  else

	    {
	        velocity = 1500; //Medium
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <gameplay+0x64>)
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	e002      	b.n	8000506 <gameplay+0x56>
	}

	  else
	  {

		velocity = 2000; //Slow
 8000500:	23fa      	movs	r3, #250	; 0xfa
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	607b      	str	r3, [r7, #4]
	  }

	return velocity; //Variable Exit
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b002      	add	sp, #8
 800050e:	bd80      	pop	{r7, pc}
 8000510:	50000400 	.word	0x50000400
 8000514:	000005dc 	.word	0x000005dc

08000518 <shoot>:
/*
 * Setting the shooting configuration (amount of shots the players can make)
 */

int shoot()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	//Shooting variable

	int shoot = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]

	//available shots

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) //Fourth Switch (levels)
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <shoot+0x2c>)
 8000524:	2110      	movs	r1, #16
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fae4 	bl	8001af4 <HAL_GPIO_ReadPin>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d002      	beq.n	8000536 <shoot+0x1e>
		{
			shoot = 11; //If it's DOWN
 8000530:	230b      	movs	r3, #11
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e001      	b.n	800053a <shoot+0x22>
		}
		else
		{
			shoot = 25; //If it's UP
 8000536:	2319      	movs	r3, #25
 8000538:	607b      	str	r3, [r7, #4]
		}

		return shoot; //Variable Exit
 800053a:	687b      	ldr	r3, [r7, #4]

}
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}
 8000544:	50000400 	.word	0x50000400

08000548 <plate>:

/*
 * Plate and underscores printing
 */

int plate(int time, int rounds, int score){
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b093      	sub	sp, #76	; 0x4c
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]

char buffspace;

//Loop till level selected

for(int i = 1; i <= rounds; i++)
 8000554:	2301      	movs	r3, #1
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
 8000558:	e3a4      	b.n	8000ca4 <plate+0x75c>
	char buffpoints[16];

	/*
	 * "Tiro" Transmission
	 * */
	HAL_UART_Transmit(&huart2, "\n\rTiro: ", 8 , HAL_MAX_DELAY);
 800055a:	2301      	movs	r3, #1
 800055c:	425b      	negs	r3, r3
 800055e:	49db      	ldr	r1, [pc, #876]	; (80008cc <plate+0x384>)
 8000560:	48db      	ldr	r0, [pc, #876]	; (80008d0 <plate+0x388>)
 8000562:	2208      	movs	r2, #8
 8000564:	f002 faa4 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffi,sprintf(buffi,"%d",i), 500);
 8000568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800056a:	49da      	ldr	r1, [pc, #872]	; (80008d4 <plate+0x38c>)
 800056c:	2420      	movs	r4, #32
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	f003 fa77 	bl	8003a64 <siprintf>
 8000576:	0003      	movs	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	23fa      	movs	r3, #250	; 0xfa
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	1939      	adds	r1, r7, r4
 8000580:	48d3      	ldr	r0, [pc, #844]	; (80008d0 <plate+0x388>)
 8000582:	f002 fa95 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " de ", 4 , HAL_MAX_DELAY);
 8000586:	2301      	movs	r3, #1
 8000588:	425b      	negs	r3, r3
 800058a:	49d3      	ldr	r1, [pc, #844]	; (80008d8 <plate+0x390>)
 800058c:	48d0      	ldr	r0, [pc, #832]	; (80008d0 <plate+0x388>)
 800058e:	2204      	movs	r2, #4
 8000590:	f002 fa8e 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffrounds, sprintf(buffrounds,"%d",rounds), 500);
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	49cf      	ldr	r1, [pc, #828]	; (80008d4 <plate+0x38c>)
 8000598:	2430      	movs	r4, #48	; 0x30
 800059a:	193b      	adds	r3, r7, r4
 800059c:	0018      	movs	r0, r3
 800059e:	f003 fa61 	bl	8003a64 <siprintf>
 80005a2:	0003      	movs	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	23fa      	movs	r3, #250	; 0xfa
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	1939      	adds	r1, r7, r4
 80005ac:	48c8      	ldr	r0, [pc, #800]	; (80008d0 <plate+0x388>)
 80005ae:	f002 fa7f 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 1 , HAL_MAX_DELAY);
 80005b2:	2301      	movs	r3, #1
 80005b4:	425b      	negs	r3, r3
 80005b6:	49c9      	ldr	r1, [pc, #804]	; (80008dc <plate+0x394>)
 80005b8:	48c5      	ldr	r0, [pc, #788]	; (80008d0 <plate+0x388>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	f002 fa78 	bl	8002ab0 <HAL_UART_Transmit>


	/*
	 * "Puntuacion" Transmission
	 * */
	HAL_UART_Transmit(&huart2, "\rPuntuacion: ", 13, HAL_MAX_DELAY);
 80005c0:	2301      	movs	r3, #1
 80005c2:	425b      	negs	r3, r3
 80005c4:	49c6      	ldr	r1, [pc, #792]	; (80008e0 <plate+0x398>)
 80005c6:	48c2      	ldr	r0, [pc, #776]	; (80008d0 <plate+0x388>)
 80005c8:	220d      	movs	r2, #13
 80005ca:	f002 fa71 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffpoints, sprintf(buffpoints,"%02d",score), 500);
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	49c4      	ldr	r1, [pc, #784]	; (80008e4 <plate+0x39c>)
 80005d2:	2410      	movs	r4, #16
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	0018      	movs	r0, r3
 80005d8:	f003 fa44 	bl	8003a64 <siprintf>
 80005dc:	0003      	movs	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	23fa      	movs	r3, #250	; 0xfa
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	1939      	adds	r1, r7, r4
 80005e6:	48ba      	ldr	r0, [pc, #744]	; (80008d0 <plate+0x388>)
 80005e8:	f002 fa62 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 1 , HAL_MAX_DELAY);
 80005ec:	2301      	movs	r3, #1
 80005ee:	425b      	negs	r3, r3
 80005f0:	49ba      	ldr	r1, [pc, #744]	; (80008dc <plate+0x394>)
 80005f2:	48b7      	ldr	r0, [pc, #732]	; (80008d0 <plate+0x388>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	f002 fa5b 	bl	8002ab0 <HAL_UART_Transmit>

	/*
	 * Rail and Plate Transmission // 'Space' key to start printing plus the interruption validations
	 * */
	HAL_UART_Transmit(&huart2, "\r_\t_\t_\t_\t_\t_\t_\t*\t_\t_\t\n", 24, HAL_MAX_DELAY);
 80005fa:	2301      	movs	r3, #1
 80005fc:	425b      	negs	r3, r3
 80005fe:	49ba      	ldr	r1, [pc, #744]	; (80008e8 <plate+0x3a0>)
 8000600:	48b3      	ldr	r0, [pc, #716]	; (80008d0 <plate+0x388>)
 8000602:	2218      	movs	r2, #24
 8000604:	f002 fa54 	bl	8002ab0 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart2, buffspace , 1, HAL_MAX_DELAY); //'SPACE' receiver
 8000608:	2343      	movs	r3, #67	; 0x43
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	0019      	movs	r1, r3
 8000610:	2301      	movs	r3, #1
 8000612:	425b      	negs	r3, r3
 8000614:	48ae      	ldr	r0, [pc, #696]	; (80008d0 <plate+0x388>)
 8000616:	2201      	movs	r2, #1
 8000618:	f002 faf2 	bl	8002c00 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart2, "\r@", 2, HAL_MAX_DELAY);
 800061c:	2301      	movs	r3, #1
 800061e:	425b      	negs	r3, r3
 8000620:	49b2      	ldr	r1, [pc, #712]	; (80008ec <plate+0x3a4>)
 8000622:	48ab      	ldr	r0, [pc, #684]	; (80008d0 <plate+0x388>)
 8000624:	2202      	movs	r2, #2
 8000626:	f002 fa43 	bl	8002ab0 <HAL_UART_Transmit>
	cont++;
 800062a:	4bb1      	ldr	r3, [pc, #708]	; (80008f0 <plate+0x3a8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	4baf      	ldr	r3, [pc, #700]	; (80008f0 <plate+0x3a8>)
 8000632:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 8000634:	4baf      	ldr	r3, [pc, #700]	; (80008f4 <plate+0x3ac>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <plate+0xfc>
	{
	  brk = 0;
 800063c:	4bad      	ldr	r3, [pc, #692]	; (80008f4 <plate+0x3ac>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	  break;
 8000642:	e334      	b.n	8000cae <plate+0x766>
	}
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000644:	49ac      	ldr	r1, [pc, #688]	; (80008f8 <plate+0x3b0>)
 8000646:	4ba2      	ldr	r3, [pc, #648]	; (80008d0 <plate+0x388>)
 8000648:	2201      	movs	r2, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f002 fbc6 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fff8 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000658:	49a7      	ldr	r1, [pc, #668]	; (80008f8 <plate+0x3b0>)
 800065a:	4b9d      	ldr	r3, [pc, #628]	; (80008d0 <plate+0x388>)
 800065c:	2201      	movs	r2, #1
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fbbc 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000664:	2301      	movs	r3, #1
 8000666:	425b      	negs	r3, r3
 8000668:	49a4      	ldr	r1, [pc, #656]	; (80008fc <plate+0x3b4>)
 800066a:	4899      	ldr	r0, [pc, #612]	; (80008d0 <plate+0x388>)
 800066c:	2201      	movs	r2, #1
 800066e:	f002 fa1f 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000672:	49a1      	ldr	r1, [pc, #644]	; (80008f8 <plate+0x3b0>)
 8000674:	4b96      	ldr	r3, [pc, #600]	; (80008d0 <plate+0x388>)
 8000676:	2201      	movs	r2, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fbaf 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, " ",  1, HAL_MAX_DELAY);
 800067e:	2301      	movs	r3, #1
 8000680:	425b      	negs	r3, r3
 8000682:	499f      	ldr	r1, [pc, #636]	; (8000900 <plate+0x3b8>)
 8000684:	4892      	ldr	r0, [pc, #584]	; (80008d0 <plate+0x388>)
 8000686:	2201      	movs	r2, #1
 8000688:	f002 fa12 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800068c:	499a      	ldr	r1, [pc, #616]	; (80008f8 <plate+0x3b0>)
 800068e:	4b90      	ldr	r3, [pc, #576]	; (80008d0 <plate+0x388>)
 8000690:	2201      	movs	r2, #1
 8000692:	0018      	movs	r0, r3
 8000694:	f002 fba2 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000698:	2301      	movs	r3, #1
 800069a:	425b      	negs	r3, r3
 800069c:	4997      	ldr	r1, [pc, #604]	; (80008fc <plate+0x3b4>)
 800069e:	488c      	ldr	r0, [pc, #560]	; (80008d0 <plate+0x388>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	f002 fa05 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80006a6:	4994      	ldr	r1, [pc, #592]	; (80008f8 <plate+0x3b0>)
 80006a8:	4b89      	ldr	r3, [pc, #548]	; (80008d0 <plate+0x388>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 fb95 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t@",2, HAL_MAX_DELAY);
 80006b2:	2301      	movs	r3, #1
 80006b4:	425b      	negs	r3, r3
 80006b6:	4993      	ldr	r1, [pc, #588]	; (8000904 <plate+0x3bc>)
 80006b8:	4885      	ldr	r0, [pc, #532]	; (80008d0 <plate+0x388>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	f002 f9f8 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80006c0:	498d      	ldr	r1, [pc, #564]	; (80008f8 <plate+0x3b0>)
 80006c2:	4b83      	ldr	r3, [pc, #524]	; (80008d0 <plate+0x388>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	0018      	movs	r0, r3
 80006c8:	f002 fb88 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 80006cc:	4b88      	ldr	r3, [pc, #544]	; (80008f0 <plate+0x3a8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	4b87      	ldr	r3, [pc, #540]	; (80008f0 <plate+0x3a8>)
 80006d4:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 80006d6:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <plate+0x3ac>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <plate+0x19e>
		{
		  brk = 0;
 80006de:	4b85      	ldr	r3, [pc, #532]	; (80008f4 <plate+0x3ac>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		  break;
 80006e4:	e2e3      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 80006e6:	4984      	ldr	r1, [pc, #528]	; (80008f8 <plate+0x3b0>)
 80006e8:	4b79      	ldr	r3, [pc, #484]	; (80008d0 <plate+0x388>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 fb75 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 ffa7 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80006fa:	497f      	ldr	r1, [pc, #508]	; (80008f8 <plate+0x3b0>)
 80006fc:	4b74      	ldr	r3, [pc, #464]	; (80008d0 <plate+0x388>)
 80006fe:	2201      	movs	r2, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f002 fb6b 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000706:	2301      	movs	r3, #1
 8000708:	425b      	negs	r3, r3
 800070a:	497c      	ldr	r1, [pc, #496]	; (80008fc <plate+0x3b4>)
 800070c:	4870      	ldr	r0, [pc, #448]	; (80008d0 <plate+0x388>)
 800070e:	2201      	movs	r2, #1
 8000710:	f002 f9ce 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000714:	4978      	ldr	r1, [pc, #480]	; (80008f8 <plate+0x3b0>)
 8000716:	4b6e      	ldr	r3, [pc, #440]	; (80008d0 <plate+0x388>)
 8000718:	2201      	movs	r2, #1
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fb5e 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t ", 2, HAL_MAX_DELAY);
 8000720:	2301      	movs	r3, #1
 8000722:	425b      	negs	r3, r3
 8000724:	4978      	ldr	r1, [pc, #480]	; (8000908 <plate+0x3c0>)
 8000726:	486a      	ldr	r0, [pc, #424]	; (80008d0 <plate+0x388>)
 8000728:	2202      	movs	r2, #2
 800072a:	f002 f9c1 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800072e:	4972      	ldr	r1, [pc, #456]	; (80008f8 <plate+0x3b0>)
 8000730:	4b67      	ldr	r3, [pc, #412]	; (80008d0 <plate+0x388>)
 8000732:	2201      	movs	r2, #1
 8000734:	0018      	movs	r0, r3
 8000736:	f002 fb51 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800073a:	2301      	movs	r3, #1
 800073c:	425b      	negs	r3, r3
 800073e:	496f      	ldr	r1, [pc, #444]	; (80008fc <plate+0x3b4>)
 8000740:	4863      	ldr	r0, [pc, #396]	; (80008d0 <plate+0x388>)
 8000742:	2201      	movs	r2, #1
 8000744:	f002 f9b4 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000748:	496b      	ldr	r1, [pc, #428]	; (80008f8 <plate+0x3b0>)
 800074a:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <plate+0x388>)
 800074c:	2201      	movs	r2, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f002 fb44 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t@", 3, HAL_MAX_DELAY);
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	496c      	ldr	r1, [pc, #432]	; (800090c <plate+0x3c4>)
 800075a:	485d      	ldr	r0, [pc, #372]	; (80008d0 <plate+0x388>)
 800075c:	2203      	movs	r2, #3
 800075e:	f002 f9a7 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000762:	4965      	ldr	r1, [pc, #404]	; (80008f8 <plate+0x3b0>)
 8000764:	4b5a      	ldr	r3, [pc, #360]	; (80008d0 <plate+0x388>)
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fb37 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 800076e:	4b60      	ldr	r3, [pc, #384]	; (80008f0 <plate+0x3a8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	4b5e      	ldr	r3, [pc, #376]	; (80008f0 <plate+0x3a8>)
 8000776:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 8000778:	4b5e      	ldr	r3, [pc, #376]	; (80008f4 <plate+0x3ac>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <plate+0x240>
		{
		  brk = 0;
 8000780:	4b5c      	ldr	r3, [pc, #368]	; (80008f4 <plate+0x3ac>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
		  break;
 8000786:	e292      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 8000788:	495b      	ldr	r1, [pc, #364]	; (80008f8 <plate+0x3b0>)
 800078a:	4b51      	ldr	r3, [pc, #324]	; (80008d0 <plate+0x388>)
 800078c:	2201      	movs	r2, #1
 800078e:	0018      	movs	r0, r3
 8000790:	f002 fb24 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	0018      	movs	r0, r3
 8000798:	f000 ff56 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800079c:	4956      	ldr	r1, [pc, #344]	; (80008f8 <plate+0x3b0>)
 800079e:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <plate+0x388>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fb1a 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	4953      	ldr	r1, [pc, #332]	; (80008fc <plate+0x3b4>)
 80007ae:	4848      	ldr	r0, [pc, #288]	; (80008d0 <plate+0x388>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	f002 f97d 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80007b6:	4950      	ldr	r1, [pc, #320]	; (80008f8 <plate+0x3b0>)
 80007b8:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <plate+0x388>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fb0d 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t ", 3, HAL_MAX_DELAY);
 80007c2:	2301      	movs	r3, #1
 80007c4:	425b      	negs	r3, r3
 80007c6:	4952      	ldr	r1, [pc, #328]	; (8000910 <plate+0x3c8>)
 80007c8:	4841      	ldr	r0, [pc, #260]	; (80008d0 <plate+0x388>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	f002 f970 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80007d0:	4949      	ldr	r1, [pc, #292]	; (80008f8 <plate+0x3b0>)
 80007d2:	4b3f      	ldr	r3, [pc, #252]	; (80008d0 <plate+0x388>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fb00 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007dc:	2301      	movs	r3, #1
 80007de:	425b      	negs	r3, r3
 80007e0:	4946      	ldr	r1, [pc, #280]	; (80008fc <plate+0x3b4>)
 80007e2:	483b      	ldr	r0, [pc, #236]	; (80008d0 <plate+0x388>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	f002 f963 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80007ea:	4943      	ldr	r1, [pc, #268]	; (80008f8 <plate+0x3b0>)
 80007ec:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <plate+0x388>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 faf3 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t@", 4, HAL_MAX_DELAY);
 80007f6:	2301      	movs	r3, #1
 80007f8:	425b      	negs	r3, r3
 80007fa:	4946      	ldr	r1, [pc, #280]	; (8000914 <plate+0x3cc>)
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <plate+0x388>)
 80007fe:	2204      	movs	r2, #4
 8000800:	f002 f956 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000804:	493c      	ldr	r1, [pc, #240]	; (80008f8 <plate+0x3b0>)
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <plate+0x388>)
 8000808:	2201      	movs	r2, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f002 fae6 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <plate+0x3a8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <plate+0x3a8>)
 8000818:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <plate+0x3ac>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <plate+0x2e2>
		{
		  brk = 0;
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <plate+0x3ac>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
		  break;
 8000828:	e241      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 800082a:	4933      	ldr	r1, [pc, #204]	; (80008f8 <plate+0x3b0>)
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <plate+0x388>)
 800082e:	2201      	movs	r2, #1
 8000830:	0018      	movs	r0, r3
 8000832:	f002 fad3 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	0018      	movs	r0, r3
 800083a:	f000 ff05 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800083e:	492e      	ldr	r1, [pc, #184]	; (80008f8 <plate+0x3b0>)
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <plate+0x388>)
 8000842:	2201      	movs	r2, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f002 fac9 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800084a:	2301      	movs	r3, #1
 800084c:	425b      	negs	r3, r3
 800084e:	492b      	ldr	r1, [pc, #172]	; (80008fc <plate+0x3b4>)
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <plate+0x388>)
 8000852:	2201      	movs	r2, #1
 8000854:	f002 f92c 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000858:	4927      	ldr	r1, [pc, #156]	; (80008f8 <plate+0x3b0>)
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <plate+0x388>)
 800085c:	2201      	movs	r2, #1
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fabc 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t ", 4, HAL_MAX_DELAY);
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	492b      	ldr	r1, [pc, #172]	; (8000918 <plate+0x3d0>)
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <plate+0x388>)
 800086c:	2204      	movs	r2, #4
 800086e:	f002 f91f 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000872:	4921      	ldr	r1, [pc, #132]	; (80008f8 <plate+0x3b0>)
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <plate+0x388>)
 8000876:	2201      	movs	r2, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f002 faaf 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800087e:	2301      	movs	r3, #1
 8000880:	425b      	negs	r3, r3
 8000882:	491e      	ldr	r1, [pc, #120]	; (80008fc <plate+0x3b4>)
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <plate+0x388>)
 8000886:	2201      	movs	r2, #1
 8000888:	f002 f912 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800088c:	491a      	ldr	r1, [pc, #104]	; (80008f8 <plate+0x3b0>)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <plate+0x388>)
 8000890:	2201      	movs	r2, #1
 8000892:	0018      	movs	r0, r3
 8000894:	f002 faa2 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t@",5, HAL_MAX_DELAY);
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	491f      	ldr	r1, [pc, #124]	; (800091c <plate+0x3d4>)
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <plate+0x388>)
 80008a0:	2205      	movs	r2, #5
 80008a2:	f002 f905 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80008a6:	4914      	ldr	r1, [pc, #80]	; (80008f8 <plate+0x3b0>)
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <plate+0x388>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	0018      	movs	r0, r3
 80008ae:	f002 fa95 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <plate+0x3a8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <plate+0x3a8>)
 80008ba:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <plate+0x3ac>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d02d      	beq.n	8000920 <plate+0x3d8>
		{
		  brk = 0;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <plate+0x3ac>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
		  break;
 80008ca:	e1f0      	b.n	8000cae <plate+0x766>
 80008cc:	080042c8 	.word	0x080042c8
 80008d0:	200000a0 	.word	0x200000a0
 80008d4:	080042d4 	.word	0x080042d4
 80008d8:	080042d8 	.word	0x080042d8
 80008dc:	080042e0 	.word	0x080042e0
 80008e0:	080042e4 	.word	0x080042e4
 80008e4:	080042f4 	.word	0x080042f4
 80008e8:	080042fc 	.word	0x080042fc
 80008ec:	08004314 	.word	0x08004314
 80008f0:	20000090 	.word	0x20000090
 80008f4:	2000008d 	.word	0x2000008d
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	08004318 	.word	0x08004318
 8000900:	0800431c 	.word	0x0800431c
 8000904:	08004320 	.word	0x08004320
 8000908:	08004324 	.word	0x08004324
 800090c:	08004328 	.word	0x08004328
 8000910:	0800432c 	.word	0x0800432c
 8000914:	08004330 	.word	0x08004330
 8000918:	08004338 	.word	0x08004338
 800091c:	08004340 	.word	0x08004340
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 8000920:	49e5      	ldr	r1, [pc, #916]	; (8000cb8 <plate+0x770>)
 8000922:	4be6      	ldr	r3, [pc, #920]	; (8000cbc <plate+0x774>)
 8000924:	2201      	movs	r2, #1
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fa58 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fe8a 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000934:	49e0      	ldr	r1, [pc, #896]	; (8000cb8 <plate+0x770>)
 8000936:	4be1      	ldr	r3, [pc, #900]	; (8000cbc <plate+0x774>)
 8000938:	2201      	movs	r2, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f002 fa4e 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000940:	2301      	movs	r3, #1
 8000942:	425b      	negs	r3, r3
 8000944:	49de      	ldr	r1, [pc, #888]	; (8000cc0 <plate+0x778>)
 8000946:	48dd      	ldr	r0, [pc, #884]	; (8000cbc <plate+0x774>)
 8000948:	2201      	movs	r2, #1
 800094a:	f002 f8b1 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800094e:	49da      	ldr	r1, [pc, #872]	; (8000cb8 <plate+0x770>)
 8000950:	4bda      	ldr	r3, [pc, #872]	; (8000cbc <plate+0x774>)
 8000952:	2201      	movs	r2, #1
 8000954:	0018      	movs	r0, r3
 8000956:	f002 fa41 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t ", 5, HAL_MAX_DELAY);
 800095a:	2301      	movs	r3, #1
 800095c:	425b      	negs	r3, r3
 800095e:	49d9      	ldr	r1, [pc, #868]	; (8000cc4 <plate+0x77c>)
 8000960:	48d6      	ldr	r0, [pc, #856]	; (8000cbc <plate+0x774>)
 8000962:	2205      	movs	r2, #5
 8000964:	f002 f8a4 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000968:	49d3      	ldr	r1, [pc, #844]	; (8000cb8 <plate+0x770>)
 800096a:	4bd4      	ldr	r3, [pc, #848]	; (8000cbc <plate+0x774>)
 800096c:	2201      	movs	r2, #1
 800096e:	0018      	movs	r0, r3
 8000970:	f002 fa34 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	49d1      	ldr	r1, [pc, #836]	; (8000cc0 <plate+0x778>)
 800097a:	48d0      	ldr	r0, [pc, #832]	; (8000cbc <plate+0x774>)
 800097c:	2201      	movs	r2, #1
 800097e:	f002 f897 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000982:	49cd      	ldr	r1, [pc, #820]	; (8000cb8 <plate+0x770>)
 8000984:	4bcd      	ldr	r3, [pc, #820]	; (8000cbc <plate+0x774>)
 8000986:	2201      	movs	r2, #1
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fa27 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t@", 6, HAL_MAX_DELAY);
 800098e:	2301      	movs	r3, #1
 8000990:	425b      	negs	r3, r3
 8000992:	49cd      	ldr	r1, [pc, #820]	; (8000cc8 <plate+0x780>)
 8000994:	48c9      	ldr	r0, [pc, #804]	; (8000cbc <plate+0x774>)
 8000996:	2206      	movs	r2, #6
 8000998:	f002 f88a 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 800099c:	49c6      	ldr	r1, [pc, #792]	; (8000cb8 <plate+0x770>)
 800099e:	4bc7      	ldr	r3, [pc, #796]	; (8000cbc <plate+0x774>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	0018      	movs	r0, r3
 80009a4:	f002 fa1a 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 80009a8:	4bc8      	ldr	r3, [pc, #800]	; (8000ccc <plate+0x784>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	4bc7      	ldr	r3, [pc, #796]	; (8000ccc <plate+0x784>)
 80009b0:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 80009b2:	4bc7      	ldr	r3, [pc, #796]	; (8000cd0 <plate+0x788>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <plate+0x47a>
		{
		  brk = 0;
 80009ba:	4bc5      	ldr	r3, [pc, #788]	; (8000cd0 <plate+0x788>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
		  break;
 80009c0:	e175      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 80009c2:	49bd      	ldr	r1, [pc, #756]	; (8000cb8 <plate+0x770>)
 80009c4:	4bbd      	ldr	r3, [pc, #756]	; (8000cbc <plate+0x774>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	0018      	movs	r0, r3
 80009ca:	f002 fa07 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fe39 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80009d6:	49b8      	ldr	r1, [pc, #736]	; (8000cb8 <plate+0x770>)
 80009d8:	4bb8      	ldr	r3, [pc, #736]	; (8000cbc <plate+0x774>)
 80009da:	2201      	movs	r2, #1
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 f9fd 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80009e2:	2301      	movs	r3, #1
 80009e4:	425b      	negs	r3, r3
 80009e6:	49b6      	ldr	r1, [pc, #728]	; (8000cc0 <plate+0x778>)
 80009e8:	48b4      	ldr	r0, [pc, #720]	; (8000cbc <plate+0x774>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	f002 f860 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 80009f0:	49b1      	ldr	r1, [pc, #708]	; (8000cb8 <plate+0x770>)
 80009f2:	4bb2      	ldr	r3, [pc, #712]	; (8000cbc <plate+0x774>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 f9f0 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t ", 6, HAL_MAX_DELAY);
 80009fc:	2301      	movs	r3, #1
 80009fe:	425b      	negs	r3, r3
 8000a00:	49b4      	ldr	r1, [pc, #720]	; (8000cd4 <plate+0x78c>)
 8000a02:	48ae      	ldr	r0, [pc, #696]	; (8000cbc <plate+0x774>)
 8000a04:	2206      	movs	r2, #6
 8000a06:	f002 f853 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000a0a:	49ab      	ldr	r1, [pc, #684]	; (8000cb8 <plate+0x770>)
 8000a0c:	4bab      	ldr	r3, [pc, #684]	; (8000cbc <plate+0x774>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 f9e3 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000a16:	2301      	movs	r3, #1
 8000a18:	425b      	negs	r3, r3
 8000a1a:	49a9      	ldr	r1, [pc, #676]	; (8000cc0 <plate+0x778>)
 8000a1c:	48a7      	ldr	r0, [pc, #668]	; (8000cbc <plate+0x774>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f002 f846 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000a24:	49a4      	ldr	r1, [pc, #656]	; (8000cb8 <plate+0x770>)
 8000a26:	4ba5      	ldr	r3, [pc, #660]	; (8000cbc <plate+0x774>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 f9d6 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t@", 7, HAL_MAX_DELAY);
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	49a8      	ldr	r1, [pc, #672]	; (8000cd8 <plate+0x790>)
 8000a36:	48a1      	ldr	r0, [pc, #644]	; (8000cbc <plate+0x774>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	f002 f839 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000a3e:	499e      	ldr	r1, [pc, #632]	; (8000cb8 <plate+0x770>)
 8000a40:	4b9e      	ldr	r3, [pc, #632]	; (8000cbc <plate+0x774>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 f9c9 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 8000a4a:	4ba0      	ldr	r3, [pc, #640]	; (8000ccc <plate+0x784>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	4b9e      	ldr	r3, [pc, #632]	; (8000ccc <plate+0x784>)
 8000a52:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 8000a54:	4b9e      	ldr	r3, [pc, #632]	; (8000cd0 <plate+0x788>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <plate+0x51c>
		{
		  brk = 0;
 8000a5c:	4b9c      	ldr	r3, [pc, #624]	; (8000cd0 <plate+0x788>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
		  break;
 8000a62:	e124      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 8000a64:	4994      	ldr	r1, [pc, #592]	; (8000cb8 <plate+0x770>)
 8000a66:	4b95      	ldr	r3, [pc, #596]	; (8000cbc <plate+0x774>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 f9b6 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fde8 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000a78:	498f      	ldr	r1, [pc, #572]	; (8000cb8 <plate+0x770>)
 8000a7a:	4b90      	ldr	r3, [pc, #576]	; (8000cbc <plate+0x774>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 f9ac 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000a84:	2301      	movs	r3, #1
 8000a86:	425b      	negs	r3, r3
 8000a88:	498d      	ldr	r1, [pc, #564]	; (8000cc0 <plate+0x778>)
 8000a8a:	488c      	ldr	r0, [pc, #560]	; (8000cbc <plate+0x774>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f002 f80f 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000a92:	4989      	ldr	r1, [pc, #548]	; (8000cb8 <plate+0x770>)
 8000a94:	4b89      	ldr	r3, [pc, #548]	; (8000cbc <plate+0x774>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 f99f 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t ", 7, HAL_MAX_DELAY);
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	425b      	negs	r3, r3
 8000aa2:	498e      	ldr	r1, [pc, #568]	; (8000cdc <plate+0x794>)
 8000aa4:	4885      	ldr	r0, [pc, #532]	; (8000cbc <plate+0x774>)
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	f002 f802 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000aac:	4982      	ldr	r1, [pc, #520]	; (8000cb8 <plate+0x770>)
 8000aae:	4b83      	ldr	r3, [pc, #524]	; (8000cbc <plate+0x774>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 f992 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	4980      	ldr	r1, [pc, #512]	; (8000cc0 <plate+0x778>)
 8000abe:	487f      	ldr	r0, [pc, #508]	; (8000cbc <plate+0x774>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f001 fff5 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000ac6:	497c      	ldr	r1, [pc, #496]	; (8000cb8 <plate+0x770>)
 8000ac8:	4b7c      	ldr	r3, [pc, #496]	; (8000cbc <plate+0x774>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 f985 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t@", 8, HAL_MAX_DELAY);
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	4982      	ldr	r1, [pc, #520]	; (8000ce0 <plate+0x798>)
 8000ad8:	4878      	ldr	r0, [pc, #480]	; (8000cbc <plate+0x774>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	f001 ffe8 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000ae0:	4975      	ldr	r1, [pc, #468]	; (8000cb8 <plate+0x770>)
 8000ae2:	4b76      	ldr	r3, [pc, #472]	; (8000cbc <plate+0x774>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 f978 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 8000aec:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <plate+0x784>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	4b76      	ldr	r3, [pc, #472]	; (8000ccc <plate+0x784>)
 8000af4:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 8000af6:	4b76      	ldr	r3, [pc, #472]	; (8000cd0 <plate+0x788>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <plate+0x5be>
		{
		  brk = 0;
 8000afe:	4b74      	ldr	r3, [pc, #464]	; (8000cd0 <plate+0x788>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		  break;
 8000b04:	e0d3      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 8000b06:	496c      	ldr	r1, [pc, #432]	; (8000cb8 <plate+0x770>)
 8000b08:	4b6c      	ldr	r3, [pc, #432]	; (8000cbc <plate+0x774>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 f965 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fd97 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000b1a:	4967      	ldr	r1, [pc, #412]	; (8000cb8 <plate+0x770>)
 8000b1c:	4b67      	ldr	r3, [pc, #412]	; (8000cbc <plate+0x774>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 f95b 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000b26:	2301      	movs	r3, #1
 8000b28:	425b      	negs	r3, r3
 8000b2a:	4965      	ldr	r1, [pc, #404]	; (8000cc0 <plate+0x778>)
 8000b2c:	4863      	ldr	r0, [pc, #396]	; (8000cbc <plate+0x774>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f001 ffbe 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000b34:	4960      	ldr	r1, [pc, #384]	; (8000cb8 <plate+0x770>)
 8000b36:	4b61      	ldr	r3, [pc, #388]	; (8000cbc <plate+0x774>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 f94e 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t ", 8, HAL_MAX_DELAY);
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	4967      	ldr	r1, [pc, #412]	; (8000ce4 <plate+0x79c>)
 8000b46:	485d      	ldr	r0, [pc, #372]	; (8000cbc <plate+0x774>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	f001 ffb1 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000b4e:	495a      	ldr	r1, [pc, #360]	; (8000cb8 <plate+0x770>)
 8000b50:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <plate+0x774>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 f941 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	4958      	ldr	r1, [pc, #352]	; (8000cc0 <plate+0x778>)
 8000b60:	4856      	ldr	r0, [pc, #344]	; (8000cbc <plate+0x774>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	f001 ffa4 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000b68:	4953      	ldr	r1, [pc, #332]	; (8000cb8 <plate+0x770>)
 8000b6a:	4b54      	ldr	r3, [pc, #336]	; (8000cbc <plate+0x774>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 f934 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t@", 9, HAL_MAX_DELAY);
 8000b74:	2301      	movs	r3, #1
 8000b76:	425b      	negs	r3, r3
 8000b78:	495b      	ldr	r1, [pc, #364]	; (8000ce8 <plate+0x7a0>)
 8000b7a:	4850      	ldr	r0, [pc, #320]	; (8000cbc <plate+0x774>)
 8000b7c:	2209      	movs	r2, #9
 8000b7e:	f001 ff97 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000b82:	494d      	ldr	r1, [pc, #308]	; (8000cb8 <plate+0x770>)
 8000b84:	4b4d      	ldr	r3, [pc, #308]	; (8000cbc <plate+0x774>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f002 f927 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <plate+0x784>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <plate+0x784>)
 8000b96:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <plate+0x788>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <plate+0x660>
		{
		  brk = 0;
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <plate+0x788>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
		  break;
 8000ba6:	e082      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 8000ba8:	4943      	ldr	r1, [pc, #268]	; (8000cb8 <plate+0x770>)
 8000baa:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <plate+0x774>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 f914 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fd46 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000bbc:	493e      	ldr	r1, [pc, #248]	; (8000cb8 <plate+0x770>)
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <plate+0x774>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f002 f90a 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425b      	negs	r3, r3
 8000bcc:	493c      	ldr	r1, [pc, #240]	; (8000cc0 <plate+0x778>)
 8000bce:	483b      	ldr	r0, [pc, #236]	; (8000cbc <plate+0x774>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f001 ff6d 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000bd6:	4938      	ldr	r1, [pc, #224]	; (8000cb8 <plate+0x770>)
 8000bd8:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <plate+0x774>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 f8fd 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t ", 9, HAL_MAX_DELAY);
 8000be2:	2301      	movs	r3, #1
 8000be4:	425b      	negs	r3, r3
 8000be6:	4941      	ldr	r1, [pc, #260]	; (8000cec <plate+0x7a4>)
 8000be8:	4834      	ldr	r0, [pc, #208]	; (8000cbc <plate+0x774>)
 8000bea:	2209      	movs	r2, #9
 8000bec:	f001 ff60 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000bf0:	4931      	ldr	r1, [pc, #196]	; (8000cb8 <plate+0x770>)
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <plate+0x774>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 f8f0 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	425b      	negs	r3, r3
 8000c00:	492f      	ldr	r1, [pc, #188]	; (8000cc0 <plate+0x778>)
 8000c02:	482e      	ldr	r0, [pc, #184]	; (8000cbc <plate+0x774>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	f001 ff53 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000c0a:	492b      	ldr	r1, [pc, #172]	; (8000cb8 <plate+0x770>)
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <plate+0x774>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 f8e3 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t@", 10, HAL_MAX_DELAY);
 8000c16:	2301      	movs	r3, #1
 8000c18:	425b      	negs	r3, r3
 8000c1a:	4935      	ldr	r1, [pc, #212]	; (8000cf0 <plate+0x7a8>)
 8000c1c:	4827      	ldr	r0, [pc, #156]	; (8000cbc <plate+0x774>)
 8000c1e:	220a      	movs	r2, #10
 8000c20:	f001 ff46 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000c24:	4924      	ldr	r1, [pc, #144]	; (8000cb8 <plate+0x770>)
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <plate+0x774>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 f8d6 	bl	8002ddc <HAL_UART_Receive_IT>
	cont++;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <plate+0x784>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <plate+0x784>)
 8000c38:	601a      	str	r2, [r3, #0]
	if(brk != 0)
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <plate+0x788>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <plate+0x702>
		{
		  brk = 0;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <plate+0x788>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		  break;
 8000c48:	e031      	b.n	8000cae <plate+0x766>
		}
	HAL_UART_Receive_IT (&huart2, IT, 1);
 8000c4a:	491b      	ldr	r1, [pc, #108]	; (8000cb8 <plate+0x770>)
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <plate+0x774>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 f8c3 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_Delay(time);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fcf5 	bl	8001648 <HAL_Delay>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000c5e:	4916      	ldr	r1, [pc, #88]	; (8000cb8 <plate+0x770>)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <plate+0x774>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 f8b9 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <plate+0x778>)
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <plate+0x774>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	f001 ff1c 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000c78:	490f      	ldr	r1, [pc, #60]	; (8000cb8 <plate+0x770>)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <plate+0x774>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 f8ac 	bl	8002ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t ", 10, HAL_MAX_DELAY);
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	491a      	ldr	r1, [pc, #104]	; (8000cf4 <plate+0x7ac>)
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <plate+0x774>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	f001 ff0f 	bl	8002ab0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart2, IT, 1); //Interrupt
 8000c92:	4909      	ldr	r1, [pc, #36]	; (8000cb8 <plate+0x770>)
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <plate+0x774>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f002 f89f 	bl	8002ddc <HAL_UART_Receive_IT>
for(int i = 1; i <= rounds; i++)
 8000c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8000ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dc00      	bgt.n	8000cae <plate+0x766>
 8000cac:	e455      	b.n	800055a <plate+0x12>
}



}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b013      	add	sp, #76	; 0x4c
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	200000a0 	.word	0x200000a0
 8000cc0:	08004318 	.word	0x08004318
 8000cc4:	08004348 	.word	0x08004348
 8000cc8:	08004350 	.word	0x08004350
 8000ccc:	20000090 	.word	0x20000090
 8000cd0:	2000008d 	.word	0x2000008d
 8000cd4:	08004358 	.word	0x08004358
 8000cd8:	08004360 	.word	0x08004360
 8000cdc:	08004368 	.word	0x08004368
 8000ce0:	08004370 	.word	0x08004370
 8000ce4:	0800437c 	.word	0x0800437c
 8000ce8:	08004388 	.word	0x08004388
 8000cec:	08004394 	.word	0x08004394
 8000cf0:	080043a0 	.word	0x080043a0
 8000cf4:	080043ac 	.word	0x080043ac

08000cf8 <main>:

/* USER CODE END 0 */

int main(void)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cfe:	f000 fc33 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 fa55 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 faef 	bl	80012e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d0a:	f000 fabd 	bl	8001288 <MX_USART2_UART_Init>
  /*
   * Function variable receivers for init
   * */
  int velocity_1;
  int shoot_1;
  char num = "a"; //'ENTER' key buffer
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <main+0x7c>)
 8000d10:	240f      	movs	r4, #15
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	701a      	strb	r2, [r3, #0]
  int score_1 = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]

  /*
   * Welcome Message
   * */
  HAL_UART_Transmit(&huart2, "\n\rBienvenido a tiro al plato!\n", 28 , HAL_MAX_DELAY);
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	4916      	ldr	r1, [pc, #88]	; (8000d78 <main+0x80>)
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <main+0x84>)
 8000d22:	221c      	movs	r2, #28
 8000d24:	f001 fec4 	bl	8002ab0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\n\rConfigure la velocidad y el nivel utilizando el dip-switch de cuatro posiciones.\n", 82 , HAL_MAX_DELAY);
 8000d28:	2301      	movs	r3, #1
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	4914      	ldr	r1, [pc, #80]	; (8000d80 <main+0x88>)
 8000d2e:	4813      	ldr	r0, [pc, #76]	; (8000d7c <main+0x84>)
 8000d30:	2252      	movs	r2, #82	; 0x52
 8000d32:	f001 febd 	bl	8002ab0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\n\rCuando esté listo, presione ENTER para comenzar!\n ", 52 , HAL_MAX_DELAY);
 8000d36:	2301      	movs	r3, #1
 8000d38:	425b      	negs	r3, r3
 8000d3a:	4912      	ldr	r1, [pc, #72]	; (8000d84 <main+0x8c>)
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <main+0x84>)
 8000d3e:	2234      	movs	r2, #52	; 0x34
 8000d40:	f001 feb6 	bl	8002ab0 <HAL_UART_Transmit>

  //Initialization of the functions
  velocity_1 = gameplay();
 8000d44:	f7ff fbb4 	bl	80004b0 <gameplay>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	607b      	str	r3, [r7, #4]
  shoot_1 = shoot();
 8000d4c:	f7ff fbe4 	bl	8000518 <shoot>
 8000d50:	0003      	movs	r3, r0
 8000d52:	603b      	str	r3, [r7, #0]


  HAL_UART_Receive(&huart2, num , 1, HAL_MAX_DELAY); //ENTER receiver
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	425b      	negs	r3, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <main+0x84>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	f001 ff4d 	bl	8002c00 <HAL_UART_Receive>


  plate(velocity_1,shoot_1, score_1); //GAME EXECUTION
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	6839      	ldr	r1, [r7, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fbeb 	bl	8000548 <plate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <main+0x7a>
 8000d74:	080043b8 	.word	0x080043b8
 8000d78:	080043bc 	.word	0x080043bc
 8000d7c:	200000a0 	.word	0x200000a0
 8000d80:	080043dc 	.word	0x080043dc
 8000d84:	08004430 	.word	0x08004430

08000d88 <HAL_UART_RxCpltCallback>:


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	int puntuacion; //Score variable (LITERALLY!!!)

	  if(cont == 8)
 8000d90:	4bd6      	ldr	r3, [pc, #856]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d12d      	bne.n	8000df4 <HAL_UART_RxCpltCallback+0x6c>
	  {

		puntuacion++;
 8000d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34

	    for(int i = 0; i<=4; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
 8000da2:	e023      	b.n	8000dec <HAL_UART_RxCpltCallback+0x64>
	    {
	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000da4:	2301      	movs	r3, #1
 8000da6:	425b      	negs	r3, r3
 8000da8:	49d1      	ldr	r1, [pc, #836]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000daa:	48d2      	ldr	r0, [pc, #840]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	f001 fe7f 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t ", 8, HAL_MAX_DELAY);
 8000db2:	2301      	movs	r3, #1
 8000db4:	425b      	negs	r3, r3
 8000db6:	49d0      	ldr	r1, [pc, #832]	; (80010f8 <HAL_UART_RxCpltCallback+0x370>)
 8000db8:	48ce      	ldr	r0, [pc, #824]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000dba:	2208      	movs	r2, #8
 8000dbc:	f001 fe78 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000dc0:	23fa      	movs	r3, #250	; 0xfa
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fc3f 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	425b      	negs	r3, r3
 8000dce:	49c8      	ldr	r1, [pc, #800]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000dd0:	48c8      	ldr	r0, [pc, #800]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f001 fe6c 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t@", 8, HAL_MAX_DELAY);
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	49c7      	ldr	r1, [pc, #796]	; (80010fc <HAL_UART_RxCpltCallback+0x374>)
 8000dde:	48c5      	ldr	r0, [pc, #788]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	f001 fe65 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8000de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de8:	3301      	adds	r3, #1
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
 8000dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	ddd8      	ble.n	8000da4 <HAL_UART_RxCpltCallback+0x1c>
 8000df2:	e1cc      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>
	    }

	  }

	  else if (cont == 1)
 8000df4:	4bbd      	ldr	r3, [pc, #756]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d12a      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0xca>
	  {

	    for(int i = 0; i<=4; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e00:	e023      	b.n	8000e4a <HAL_UART_RxCpltCallback+0xc2>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000e02:	2301      	movs	r3, #1
 8000e04:	425b      	negs	r3, r3
 8000e06:	49ba      	ldr	r1, [pc, #744]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000e08:	48ba      	ldr	r0, [pc, #744]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f001 fe50 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, " ",  1, HAL_MAX_DELAY);
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	49ba      	ldr	r1, [pc, #744]	; (8001100 <HAL_UART_RxCpltCallback+0x378>)
 8000e16:	48b7      	ldr	r0, [pc, #732]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f001 fe49 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000e1e:	23fa      	movs	r3, #250	; 0xfa
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fc10 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000e28:	2301      	movs	r3, #1
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	49b0      	ldr	r1, [pc, #704]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000e2e:	48b1      	ldr	r0, [pc, #708]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	f001 fe3d 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "@", 1, HAL_MAX_DELAY);
 8000e36:	2301      	movs	r3, #1
 8000e38:	425b      	negs	r3, r3
 8000e3a:	49b2      	ldr	r1, [pc, #712]	; (8001104 <HAL_UART_RxCpltCallback+0x37c>)
 8000e3c:	48ad      	ldr	r0, [pc, #692]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f001 fe36 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	ddd8      	ble.n	8000e02 <HAL_UART_RxCpltCallback+0x7a>
 8000e50:	e19d      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>
	    }

	  }

	  else if (cont == 2)
 8000e52:	4ba6      	ldr	r3, [pc, #664]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d12a      	bne.n	8000eb0 <HAL_UART_RxCpltCallback+0x128>
	  {

	    for(int i = 0; i<=4; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e5e:	e023      	b.n	8000ea8 <HAL_UART_RxCpltCallback+0x120>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000e60:	2301      	movs	r3, #1
 8000e62:	425b      	negs	r3, r3
 8000e64:	49a2      	ldr	r1, [pc, #648]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000e66:	48a3      	ldr	r0, [pc, #652]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f001 fe21 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t ",  2, HAL_MAX_DELAY);
 8000e6e:	2301      	movs	r3, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	49a5      	ldr	r1, [pc, #660]	; (8001108 <HAL_UART_RxCpltCallback+0x380>)
 8000e74:	489f      	ldr	r0, [pc, #636]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	f001 fe1a 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000e7c:	23fa      	movs	r3, #250	; 0xfa
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fbe1 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000e86:	2301      	movs	r3, #1
 8000e88:	425b      	negs	r3, r3
 8000e8a:	4999      	ldr	r1, [pc, #612]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000e8c:	4899      	ldr	r0, [pc, #612]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f001 fe0e 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t@", 2, HAL_MAX_DELAY);
 8000e94:	2301      	movs	r3, #1
 8000e96:	425b      	negs	r3, r3
 8000e98:	499c      	ldr	r1, [pc, #624]	; (800110c <HAL_UART_RxCpltCallback+0x384>)
 8000e9a:	4896      	ldr	r0, [pc, #600]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f001 fe07 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	ddd8      	ble.n	8000e60 <HAL_UART_RxCpltCallback+0xd8>
 8000eae:	e16e      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>
	    }

	  }

	  else if (cont == 3)
 8000eb0:	4b8e      	ldr	r3, [pc, #568]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d12a      	bne.n	8000f0e <HAL_UART_RxCpltCallback+0x186>
	  {

	    for(int i = 0; i<=4; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebc:	e023      	b.n	8000f06 <HAL_UART_RxCpltCallback+0x17e>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	425b      	negs	r3, r3
 8000ec2:	498b      	ldr	r1, [pc, #556]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000ec4:	488b      	ldr	r0, [pc, #556]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f001 fdf2 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t ",  3, HAL_MAX_DELAY);
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
 8000ed0:	498f      	ldr	r1, [pc, #572]	; (8001110 <HAL_UART_RxCpltCallback+0x388>)
 8000ed2:	4888      	ldr	r0, [pc, #544]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	f001 fdeb 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000eda:	23fa      	movs	r3, #250	; 0xfa
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fbb2 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	4981      	ldr	r1, [pc, #516]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000eea:	4882      	ldr	r0, [pc, #520]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f001 fddf 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t@", 3, HAL_MAX_DELAY);
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	4987      	ldr	r1, [pc, #540]	; (8001114 <HAL_UART_RxCpltCallback+0x38c>)
 8000ef8:	487e      	ldr	r0, [pc, #504]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	f001 fdd8 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3301      	adds	r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	ddd8      	ble.n	8000ebe <HAL_UART_RxCpltCallback+0x136>
 8000f0c:	e13f      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>
	    }

	  }

	  else if (cont == 4)
 8000f0e:	4b77      	ldr	r3, [pc, #476]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d12a      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x1e4>
	  {

	    for(int i = 0; i<=4; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
 8000f1a:	e023      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x1dc>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	425b      	negs	r3, r3
 8000f20:	4973      	ldr	r1, [pc, #460]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000f22:	4874      	ldr	r0, [pc, #464]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	f001 fdc3 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t ",  4, HAL_MAX_DELAY);
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	497a      	ldr	r1, [pc, #488]	; (8001118 <HAL_UART_RxCpltCallback+0x390>)
 8000f30:	4870      	ldr	r0, [pc, #448]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	f001 fdbc 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000f38:	23fa      	movs	r3, #250	; 0xfa
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fb83 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000f42:	2301      	movs	r3, #1
 8000f44:	425b      	negs	r3, r3
 8000f46:	496a      	ldr	r1, [pc, #424]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000f48:	486a      	ldr	r0, [pc, #424]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f001 fdb0 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t@", 4, HAL_MAX_DELAY);
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	4971      	ldr	r1, [pc, #452]	; (800111c <HAL_UART_RxCpltCallback+0x394>)
 8000f56:	4867      	ldr	r0, [pc, #412]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000f58:	2204      	movs	r2, #4
 8000f5a:	f001 fda9 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	3301      	adds	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	ddd8      	ble.n	8000f1c <HAL_UART_RxCpltCallback+0x194>
 8000f6a:	e110      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>

	    }
	  }

	  else if (cont == 5)
 8000f6c:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d12a      	bne.n	8000fca <HAL_UART_RxCpltCallback+0x242>
	  {

	    for(int i = 0; i<=4; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	e023      	b.n	8000fc2 <HAL_UART_RxCpltCallback+0x23a>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	495c      	ldr	r1, [pc, #368]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000f80:	485c      	ldr	r0, [pc, #368]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f001 fd94 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t ",  5, HAL_MAX_DELAY);
 8000f88:	2301      	movs	r3, #1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	4964      	ldr	r1, [pc, #400]	; (8001120 <HAL_UART_RxCpltCallback+0x398>)
 8000f8e:	4859      	ldr	r0, [pc, #356]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000f90:	2205      	movs	r2, #5
 8000f92:	f001 fd8d 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000f96:	23fa      	movs	r3, #250	; 0xfa
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fb54 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	4952      	ldr	r1, [pc, #328]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000fa6:	4853      	ldr	r0, [pc, #332]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f001 fd81 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t@", 5, HAL_MAX_DELAY);
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	495c      	ldr	r1, [pc, #368]	; (8001124 <HAL_UART_RxCpltCallback+0x39c>)
 8000fb4:	484f      	ldr	r0, [pc, #316]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	f001 fd7a 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	ddd8      	ble.n	8000f7a <HAL_UART_RxCpltCallback+0x1f2>
 8000fc8:	e0e1      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>

	    }

	  }

	  else if (cont == 6)
 8000fca:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d12a      	bne.n	8001028 <HAL_UART_RxCpltCallback+0x2a0>
	  {

	    for(int i = 0; i<=4; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	e023      	b.n	8001020 <HAL_UART_RxCpltCallback+0x298>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	4944      	ldr	r1, [pc, #272]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8000fde:	4845      	ldr	r0, [pc, #276]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f001 fd65 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t ",  6, HAL_MAX_DELAY);
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	425b      	negs	r3, r3
 8000fea:	494f      	ldr	r1, [pc, #316]	; (8001128 <HAL_UART_RxCpltCallback+0x3a0>)
 8000fec:	4841      	ldr	r0, [pc, #260]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8000fee:	2206      	movs	r2, #6
 8000ff0:	f001 fd5e 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000ff4:	23fa      	movs	r3, #250	; 0xfa
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 fb25 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000ffe:	2301      	movs	r3, #1
 8001000:	425b      	negs	r3, r3
 8001002:	493b      	ldr	r1, [pc, #236]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8001004:	483b      	ldr	r0, [pc, #236]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8001006:	2201      	movs	r2, #1
 8001008:	f001 fd52 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t@", 6, HAL_MAX_DELAY);
 800100c:	2301      	movs	r3, #1
 800100e:	425b      	negs	r3, r3
 8001010:	4946      	ldr	r1, [pc, #280]	; (800112c <HAL_UART_RxCpltCallback+0x3a4>)
 8001012:	4838      	ldr	r0, [pc, #224]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8001014:	2206      	movs	r2, #6
 8001016:	f001 fd4b 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	3301      	adds	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b04      	cmp	r3, #4
 8001024:	ddd8      	ble.n	8000fd8 <HAL_UART_RxCpltCallback+0x250>
 8001026:	e0b2      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>

	    }
	  }

	  else if (cont == 7)
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b07      	cmp	r3, #7
 800102e:	d12a      	bne.n	8001086 <HAL_UART_RxCpltCallback+0x2fe>
	  {

	    for(int i = 0; i<=4; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e023      	b.n	800107e <HAL_UART_RxCpltCallback+0x2f6>
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8001036:	2301      	movs	r3, #1
 8001038:	425b      	negs	r3, r3
 800103a:	492d      	ldr	r1, [pc, #180]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 800103c:	482d      	ldr	r0, [pc, #180]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 800103e:	2201      	movs	r2, #1
 8001040:	f001 fd36 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t ",  7, HAL_MAX_DELAY);
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
 8001048:	4939      	ldr	r1, [pc, #228]	; (8001130 <HAL_UART_RxCpltCallback+0x3a8>)
 800104a:	482a      	ldr	r0, [pc, #168]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 800104c:	2207      	movs	r2, #7
 800104e:	f001 fd2f 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001052:	23fa      	movs	r3, #250	; 0xfa
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	0018      	movs	r0, r3
 8001058:	f000 faf6 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	4923      	ldr	r1, [pc, #140]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 8001062:	4824      	ldr	r0, [pc, #144]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8001064:	2201      	movs	r2, #1
 8001066:	f001 fd23 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t@", 7, HAL_MAX_DELAY);
 800106a:	2301      	movs	r3, #1
 800106c:	425b      	negs	r3, r3
 800106e:	4931      	ldr	r1, [pc, #196]	; (8001134 <HAL_UART_RxCpltCallback+0x3ac>)
 8001070:	4820      	ldr	r0, [pc, #128]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 8001072:	2207      	movs	r2, #7
 8001074:	f001 fd1c 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b04      	cmp	r3, #4
 8001082:	ddd8      	ble.n	8001036 <HAL_UART_RxCpltCallback+0x2ae>
 8001084:	e083      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>

	    }
	  }

	  else if (cont == 9)
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_RxCpltCallback+0x364>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b09      	cmp	r3, #9
 800108c:	d12a      	bne.n	80010e4 <HAL_UART_RxCpltCallback+0x35c>
	  {
	    for(int i = 0; i<=4; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e023      	b.n	80010dc <HAL_UART_RxCpltCallback+0x354>
	    {
	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	4915      	ldr	r1, [pc, #84]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 800109a:	4816      	ldr	r0, [pc, #88]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 800109c:	2201      	movs	r2, #1
 800109e:	f001 fd07 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t ",  9, HAL_MAX_DELAY);
 80010a2:	2301      	movs	r3, #1
 80010a4:	425b      	negs	r3, r3
 80010a6:	4924      	ldr	r1, [pc, #144]	; (8001138 <HAL_UART_RxCpltCallback+0x3b0>)
 80010a8:	4812      	ldr	r0, [pc, #72]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 80010aa:	2209      	movs	r2, #9
 80010ac:	f001 fd00 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80010b0:	23fa      	movs	r3, #250	; 0xfa
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fac7 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80010ba:	2301      	movs	r3, #1
 80010bc:	425b      	negs	r3, r3
 80010be:	490c      	ldr	r1, [pc, #48]	; (80010f0 <HAL_UART_RxCpltCallback+0x368>)
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	f001 fcf4 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t@", 9, HAL_MAX_DELAY);
 80010c8:	2301      	movs	r3, #1
 80010ca:	425b      	negs	r3, r3
 80010cc:	491b      	ldr	r1, [pc, #108]	; (800113c <HAL_UART_RxCpltCallback+0x3b4>)
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <HAL_UART_RxCpltCallback+0x36c>)
 80010d0:	2209      	movs	r2, #9
 80010d2:	f001 fced 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	3301      	adds	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	ddd8      	ble.n	8001094 <HAL_UART_RxCpltCallback+0x30c>
 80010e2:	e054      	b.n	800118e <HAL_UART_RxCpltCallback+0x406>
	    }
	  }
	 else
	  {
	    for(int i = 0; i<=4; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e04e      	b.n	8001188 <HAL_UART_RxCpltCallback+0x400>
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000090 	.word	0x20000090
 80010f0:	08004318 	.word	0x08004318
 80010f4:	200000a0 	.word	0x200000a0
 80010f8:	0800437c 	.word	0x0800437c
 80010fc:	08004370 	.word	0x08004370
 8001100:	0800431c 	.word	0x0800431c
 8001104:	08004468 	.word	0x08004468
 8001108:	08004324 	.word	0x08004324
 800110c:	08004320 	.word	0x08004320
 8001110:	0800432c 	.word	0x0800432c
 8001114:	08004328 	.word	0x08004328
 8001118:	08004338 	.word	0x08004338
 800111c:	08004330 	.word	0x08004330
 8001120:	08004348 	.word	0x08004348
 8001124:	08004340 	.word	0x08004340
 8001128:	08004358 	.word	0x08004358
 800112c:	08004350 	.word	0x08004350
 8001130:	08004368 	.word	0x08004368
 8001134:	08004360 	.word	0x08004360
 8001138:	08004394 	.word	0x08004394
 800113c:	08004388 	.word	0x08004388
	    {

	    HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8001140:	2301      	movs	r3, #1
 8001142:	425b      	negs	r3, r3
 8001144:	4916      	ldr	r1, [pc, #88]	; (80011a0 <HAL_UART_RxCpltCallback+0x418>)
 8001146:	4817      	ldr	r0, [pc, #92]	; (80011a4 <HAL_UART_RxCpltCallback+0x41c>)
 8001148:	2201      	movs	r2, #1
 800114a:	f001 fcb1 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t ",  10, HAL_MAX_DELAY);
 800114e:	2301      	movs	r3, #1
 8001150:	425b      	negs	r3, r3
 8001152:	4915      	ldr	r1, [pc, #84]	; (80011a8 <HAL_UART_RxCpltCallback+0x420>)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <HAL_UART_RxCpltCallback+0x41c>)
 8001156:	220a      	movs	r2, #10
 8001158:	f001 fcaa 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800115c:	23fa      	movs	r3, #250	; 0xfa
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fa71 	bl	8001648 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8001166:	2301      	movs	r3, #1
 8001168:	425b      	negs	r3, r3
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <HAL_UART_RxCpltCallback+0x418>)
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_UART_RxCpltCallback+0x41c>)
 800116e:	2201      	movs	r2, #1
 8001170:	f001 fc9e 	bl	8002ab0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t@",10, HAL_MAX_DELAY);
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <HAL_UART_RxCpltCallback+0x424>)
 800117a:	480a      	ldr	r0, [pc, #40]	; (80011a4 <HAL_UART_RxCpltCallback+0x41c>)
 800117c:	220a      	movs	r2, #10
 800117e:	f001 fc97 	bl	8002ab0 <HAL_UART_Transmit>
	    for(int i = 0; i<=4; i++)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b04      	cmp	r3, #4
 800118c:	ddd8      	ble.n	8001140 <HAL_UART_RxCpltCallback+0x3b8>

	    }
	  }
		//brk++;

		if(puntuacion >= 8)
 800118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001190:	2b07      	cmp	r3, #7
 8001192:	dd00      	ble.n	8001196 <HAL_UART_RxCpltCallback+0x40e>
		{
			__NOP();
 8001194:	46c0      	nop			; (mov r8, r8)
		}
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b00e      	add	sp, #56	; 0x38
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	08004318 	.word	0x08004318
 80011a4:	200000a0 	.word	0x200000a0
 80011a8:	080043ac 	.word	0x080043ac
 80011ac:	080043a0 	.word	0x080043a0

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b09f      	sub	sp, #124	; 0x7c
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	2440      	movs	r4, #64	; 0x40
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	0018      	movs	r0, r3
 80011bc:	2338      	movs	r3, #56	; 0x38
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f002 fc47 	bl	8003a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	232c      	movs	r3, #44	; 0x2c
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	2314      	movs	r3, #20
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f002 fc3f 	bl	8003a54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	0018      	movs	r0, r3
 80011da:	2328      	movs	r3, #40	; 0x28
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f002 fc38 	bl	8003a54 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <SystemClock_Config+0xd4>)
 80011ea:	401a      	ands	r2, r3
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <SystemClock_Config+0xd0>)
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	0109      	lsls	r1, r1, #4
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011f6:	0021      	movs	r1, r4
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2210      	movs	r2, #16
 80011fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2201      	movs	r2, #1
 8001202:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	22a0      	movs	r2, #160	; 0xa0
 800120e:	0212      	lsls	r2, r2, #8
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	187b      	adds	r3, r7, r1
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fc88 	bl	8001b30 <HAL_RCC_OscConfig>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001224:	f000 f8c4 	bl	80013b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	212c      	movs	r1, #44	; 0x2c
 800122a:	187b      	adds	r3, r7, r1
 800122c:	220f      	movs	r2, #15
 800122e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2100      	movs	r1, #0
 800124c:	0018      	movs	r0, r3
 800124e:	f001 f843 	bl	80022d8 <HAL_RCC_ClockConfig>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001256:	f000 f8ab 	bl	80013b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2202      	movs	r2, #2
 800125e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	0018      	movs	r0, r3
 800126a:	f001 fa59 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001272:	f000 f89d 	bl	80013b0 <Error_Handler>
  }
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b01f      	add	sp, #124	; 0x7c
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40007000 	.word	0x40007000
 8001284:	ffffe7ff 	.word	0xffffe7ff

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <MX_USART2_UART_Init+0x5c>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 8001294:	2296      	movs	r2, #150	; 0x96
 8001296:	0192      	lsls	r2, r2, #6
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 fb9b 	bl	8002a08 <HAL_UART_Init>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012d6:	f000 f86b 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000a0 	.word	0x200000a0
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b08b      	sub	sp, #44	; 0x2c
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	2414      	movs	r4, #20
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	0018      	movs	r0, r3
 80012f4:	2314      	movs	r3, #20
 80012f6:	001a      	movs	r2, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	f002 fbab 	bl	8003a54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001304:	2104      	movs	r1, #4
 8001306:	430a      	orrs	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <MX_GPIO_Init+0xc0>)
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <MX_GPIO_Init+0xc0>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	430a      	orrs	r2, r1
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_GPIO_Init+0xc0>)
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_GPIO_Init+0xc0>)
 800134c:	2102      	movs	r1, #2
 800134e:	430a      	orrs	r2, r1
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_GPIO_Init+0xc0>)
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135e:	193b      	adds	r3, r7, r4
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	00d2      	lsls	r2, r2, #3
 8001364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	193b      	adds	r3, r7, r4
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	193a      	adds	r2, r7, r4
 8001374:	23a0      	movs	r3, #160	; 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f000 fa3c 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2238      	movs	r2, #56	; 0x38
 8001384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	193b      	adds	r3, r7, r4
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <MX_GPIO_Init+0xc4>)
 8001396:	0019      	movs	r1, r3
 8001398:	0010      	movs	r0, r2
 800139a:	f000 fa2d 	bl	80017f8 <HAL_GPIO_Init>

}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b00b      	add	sp, #44	; 0x2c
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	40021000 	.word	0x40021000
 80013ac:	50000400 	.word	0x50000400

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_MspInit+0x24>)
 80013c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_MspInit+0x24>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_MspInit+0x24>)
 80013ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_MspInit+0x24>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	0549      	lsls	r1, r1, #21
 80013d6:	430a      	orrs	r2, r1
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	240c      	movs	r4, #12
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	0018      	movs	r0, r3
 80013f2:	2314      	movs	r3, #20
 80013f4:	001a      	movs	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f002 fb2c 	bl	8003a54 <memset>
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x80>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d129      	bne.n	800145a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x84>)
 8001408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x84>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0289      	lsls	r1, r1, #10
 8001410:	430a      	orrs	r2, r1
 8001412:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_MspInit+0x84>)
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_UART_MspInit+0x84>)
 800141a:	2101      	movs	r1, #1
 800141c:	430a      	orrs	r2, r1
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x84>)
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2201      	movs	r2, #1
 8001426:	4013      	ands	r3, r2
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800142c:	0021      	movs	r1, r4
 800142e:	187b      	adds	r3, r7, r1
 8001430:	220c      	movs	r2, #12
 8001432:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2202      	movs	r2, #2
 8001438:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2203      	movs	r2, #3
 8001444:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2204      	movs	r2, #4
 800144a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	187a      	adds	r2, r7, r1
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f000 f9cf 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b009      	add	sp, #36	; 0x24
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40004400 	.word	0x40004400
 8001468:	40021000 	.word	0x40021000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f8be 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	18d3      	adds	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f002 fa98 	bl	8003a00 <__errno>
 80014d0:	0003      	movs	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	425b      	negs	r3, r3
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	18d2      	adds	r2, r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b006      	add	sp, #24
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20005000 	.word	0x20005000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000094 	.word	0x20000094
 8001504:	20000138 	.word	0x20000138

08001508 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151a:	490e      	ldr	r1, [pc, #56]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001530:	4c0b      	ldr	r4, [pc, #44]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800153e:	f7ff ffe3 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f002 fa63 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff fbd7 	bl	8000cf8 <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
   ldr   r0, =_estack
 800154c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001558:	0800451c 	.word	0x0800451c
  ldr r2, =_sbss
 800155c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001560:	20000138 	.word	0x20000138

08001564 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_COMP_IRQHandler>
	...

08001568 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_Init+0x3c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Init+0x3c>)
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001580:	2000      	movs	r0, #0
 8001582:	f000 f811 	bl	80015a8 <HAL_InitTick>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d003      	beq.n	8001592 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e001      	b.n	8001596 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001592:	f7ff ff13 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_InitTick+0x5c>)
 80015b2:	681c      	ldr	r4, [r3, #0]
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_InitTick+0x60>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	0019      	movs	r1, r3
 80015ba:	23fa      	movs	r3, #250	; 0xfa
 80015bc:	0098      	lsls	r0, r3, #2
 80015be:	f7fe fdad 	bl	800011c <__udivsi3>
 80015c2:	0003      	movs	r3, r0
 80015c4:	0019      	movs	r1, r3
 80015c6:	0020      	movs	r0, r4
 80015c8:	f7fe fda8 	bl	800011c <__udivsi3>
 80015cc:	0003      	movs	r3, r0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f905 	bl	80017de <HAL_SYSTICK_Config>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e00f      	b.n	80015fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d80b      	bhi.n	80015fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2301      	movs	r3, #1
 80015e6:	425b      	negs	r3, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f8e2 	bl	80017b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_InitTick+0x64>)
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b003      	add	sp, #12
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x1c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	001a      	movs	r2, r3
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x20>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	18d2      	adds	r2, r2, r3
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_IncTick+0x20>)
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	20000008 	.word	0x20000008
 8001630:	20000124 	.word	0x20000124

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_GetTick+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20000124 	.word	0x20000124

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fff0 	bl	8001634 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	001a      	movs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	189b      	adds	r3, r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	f7ff ffe0 	bl	8001634 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	20000008 	.word	0x20000008

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b7f      	cmp	r3, #127	; 0x7f
 80016a4:	d828      	bhi.n	80016f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <__NVIC_SetPriority+0xd4>)
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	33c0      	adds	r3, #192	; 0xc0
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	589b      	ldr	r3, [r3, r2]
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	0011      	movs	r1, r2
 80016bc:	2203      	movs	r2, #3
 80016be:	400a      	ands	r2, r1
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	21ff      	movs	r1, #255	; 0xff
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	43d2      	mvns	r2, r2
 80016ca:	401a      	ands	r2, r3
 80016cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	401a      	ands	r2, r3
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	2303      	movs	r3, #3
 80016de:	4003      	ands	r3, r0
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e4:	481f      	ldr	r0, [pc, #124]	; (8001764 <__NVIC_SetPriority+0xd4>)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	33c0      	adds	r3, #192	; 0xc0
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016f6:	e031      	b.n	800175c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <__NVIC_SetPriority+0xd8>)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0019      	movs	r1, r3
 8001700:	230f      	movs	r3, #15
 8001702:	400b      	ands	r3, r1
 8001704:	3b08      	subs	r3, #8
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3306      	adds	r3, #6
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1dfa      	adds	r2, r7, #7
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	0011      	movs	r1, r2
 8001718:	2203      	movs	r2, #3
 800171a:	400a      	ands	r2, r1
 800171c:	00d2      	lsls	r2, r2, #3
 800171e:	21ff      	movs	r1, #255	; 0xff
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	43d2      	mvns	r2, r2
 8001726:	401a      	ands	r2, r3
 8001728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	401a      	ands	r2, r3
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	0018      	movs	r0, r3
 8001738:	2303      	movs	r3, #3
 800173a:	4003      	ands	r3, r0
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <__NVIC_SetPriority+0xd8>)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001c      	movs	r4, r3
 8001748:	230f      	movs	r3, #15
 800174a:	4023      	ands	r3, r4
 800174c:	3b08      	subs	r3, #8
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	430a      	orrs	r2, r1
 8001752:	3306      	adds	r3, #6
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	18c3      	adds	r3, r0, r3
 8001758:	3304      	adds	r3, #4
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b003      	add	sp, #12
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	045b      	lsls	r3, r3, #17
 800177c:	429a      	cmp	r2, r3
 800177e:	d301      	bcc.n	8001784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001780:	2301      	movs	r3, #1
 8001782:	e010      	b.n	80017a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <SysTick_Config+0x44>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	3a01      	subs	r2, #1
 800178a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178c:	2301      	movs	r3, #1
 800178e:	425b      	negs	r3, r3
 8001790:	2103      	movs	r1, #3
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff7c 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x44>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x44>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	210f      	movs	r1, #15
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffbf 	bl	800176c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800180e:	e155      	b.n	8001abc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x30>
 8001826:	e146      	b.n	8001ab6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00b      	beq.n	8001848 <HAL_GPIO_Init+0x50>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183c:	2b11      	cmp	r3, #17
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b12      	cmp	r3, #18
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	409a      	lsls	r2, r3
 8001856:	0013      	movs	r3, r2
 8001858:	43da      	mvns	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	0013      	movs	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187e:	2201      	movs	r2, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	2201      	movs	r2, #1
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0xf2>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2107      	movs	r1, #7
 8001916:	400b      	ands	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	401a      	ands	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_GPIO_Init+0x17c>
 8001972:	e0a0      	b.n	8001ab6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001978:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001980:	4a55      	ldr	r2, [pc, #340]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	589b      	ldr	r3, [r3, r2]
 800198c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	23a0      	movs	r3, #160	; 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x1f2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_GPIO_Init+0x2f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a46      	ldr	r2, [pc, #280]	; (8001aec <HAL_GPIO_Init+0x2f4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019da:	2306      	movs	r3, #6
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019ee:	2300      	movs	r3, #0
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	2103      	movs	r1, #3
 80019f4:	400a      	ands	r2, r1
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	4013      	ands	r3, r2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	035b      	lsls	r3, r3, #13
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	40da      	lsrs	r2, r3
 8001ac4:	1e13      	subs	r3, r2, #0
 8001ac6:	d000      	beq.n	8001aca <HAL_GPIO_Init+0x2d2>
 8001ac8:	e6a2      	b.n	8001810 <HAL_GPIO_Init+0x18>
  }
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	50000c00 	.word	0x50000c00
 8001ae8:	50001000 	.word	0x50001000
 8001aec:	50001c00 	.word	0x50001c00
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	000a      	movs	r2, r1
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	1cba      	adds	r2, r7, #2
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f000 fbbf 	bl	80022c2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b44:	4bc9      	ldr	r3, [pc, #804]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	220c      	movs	r2, #12
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4e:	4bc7      	ldr	r3, [pc, #796]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	025b      	lsls	r3, r3, #9
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d100      	bne.n	8001b66 <HAL_RCC_OscConfig+0x36>
 8001b64:	e07e      	b.n	8001c64 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d007      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x68>
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	4bbb      	ldr	r3, [pc, #748]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5a>
 8001b88:	e06b      	b.n	8001c62 <HAL_RCC_OscConfig+0x132>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d167      	bne.n	8001c62 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f000 fb95 	bl	80022c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	025b      	lsls	r3, r3, #9
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x84>
 8001ba4:	4bb1      	ldr	r3, [pc, #708]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4bb0      	ldr	r3, [pc, #704]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	0249      	lsls	r1, r1, #9
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e027      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	23a0      	movs	r3, #160	; 0xa0
 8001bba:	02db      	lsls	r3, r3, #11
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10e      	bne.n	8001bde <HAL_RCC_OscConfig+0xae>
 8001bc0:	4baa      	ldr	r3, [pc, #680]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4ba9      	ldr	r3, [pc, #676]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	02c9      	lsls	r1, r1, #11
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	4ba7      	ldr	r3, [pc, #668]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4ba6      	ldr	r3, [pc, #664]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0249      	lsls	r1, r1, #9
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e012      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bde:	4ba3      	ldr	r3, [pc, #652]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4ba2      	ldr	r3, [pc, #648]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001be4:	49a2      	ldr	r1, [pc, #648]	; (8001e70 <HAL_RCC_OscConfig+0x340>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	4ba0      	ldr	r3, [pc, #640]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4b9c      	ldr	r3, [pc, #624]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b9b      	ldr	r3, [pc, #620]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001bfe:	499d      	ldr	r1, [pc, #628]	; (8001e74 <HAL_RCC_OscConfig+0x344>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d015      	beq.n	8001c38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fd12 	bl	8001634 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c14:	e009      	b.n	8001c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c16:	f7ff fd0d 	bl	8001634 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d902      	bls.n	8001c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	f000 fb4c 	bl	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c2a:	4b90      	ldr	r3, [pc, #576]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0ef      	beq.n	8001c16 <HAL_RCC_OscConfig+0xe6>
 8001c36:	e015      	b.n	8001c64 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fcfc 	bl	8001634 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c42:	f7ff fcf7 	bl	8001634 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e336      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x112>
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_OscConfig+0x140>
 8001c6e:	e099      	b.n	8001da4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	2220      	movs	r2, #32
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c7e:	4b7b      	ldr	r3, [pc, #492]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001c84:	2120      	movs	r1, #32
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	4393      	bics	r3, r2
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d13e      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1ec>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d13b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ca4:	4b71      	ldr	r3, [pc, #452]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4013      	ands	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x188>
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e304      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x348>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	021a      	lsls	r2, r3, #8
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2209      	movs	r2, #9
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce0:	f000 fc42 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8001ce4:	0001      	movs	r1, r0
 8001ce6:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	220f      	movs	r2, #15
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a62      	ldr	r2, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x34c>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	40da      	lsrs	r2, r3
 8001cf8:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x350>)
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCC_OscConfig+0x354>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2513      	movs	r5, #19
 8001d02:	197c      	adds	r4, r7, r5
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fc4f 	bl	80015a8 <HAL_InitTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d0e:	197b      	adds	r3, r7, r5
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d046      	beq.n	8001da4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001d16:	197b      	adds	r3, r7, r5
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	e2d2      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d027      	beq.n	8001d72 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d22:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2209      	movs	r2, #9
 8001d28:	4393      	bics	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fc7e 	bl	8001634 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc79 	bl	8001634 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e2b8      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2204      	movs	r2, #4
 8001d56:	4013      	ands	r3, r2
 8001d58:	d0f1      	beq.n	8001d3e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a46      	ldr	r2, [pc, #280]	; (8001e78 <HAL_RCC_OscConfig+0x348>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	021a      	lsls	r2, r3, #8
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	e018      	b.n	8001da4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	438a      	bics	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fc59 	bl	8001634 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fc54 	bl	8001634 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e293      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d1f1      	bne.n	8001d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	4013      	ands	r3, r2
 8001dac:	d100      	bne.n	8001db0 <HAL_RCC_OscConfig+0x280>
 8001dae:	e0a2      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d140      	bne.n	8001e38 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x29e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e279      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a2d      	ldr	r2, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x358>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	0a19      	lsrs	r1, r3, #8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	061a      	lsls	r2, r3, #24
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	0212      	lsls	r2, r2, #8
 8001e02:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x34c>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_OscConfig+0x350>)
 8001e16:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_RCC_OscConfig+0x354>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2513      	movs	r5, #19
 8001e1e:	197c      	adds	r4, r7, r5
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fbc1 	bl	80015a8 <HAL_InitTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e2a:	197b      	adds	r3, r7, r5
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d061      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001e32:	197b      	adds	r3, r7, r5
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	e244      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d040      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x33c>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0049      	lsls	r1, r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fbf1 	bl	8001634 <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e56:	e019      	b.n	8001e8c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e58:	f7ff fbec 	bl	8001634 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d912      	bls.n	8001e8c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e22b      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	fffeffff 	.word	0xfffeffff
 8001e74:	fffbffff 	.word	0xfffbffff
 8001e78:	ffffe0ff 	.word	0xffffe0ff
 8001e7c:	0800446c 	.word	0x0800446c
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004
 8001e88:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e8c:	4bca      	ldr	r3, [pc, #808]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d0df      	beq.n	8001e58 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	4bc7      	ldr	r3, [pc, #796]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4ac7      	ldr	r2, [pc, #796]	; (80021bc <HAL_RCC_OscConfig+0x68c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea6:	4bc4      	ldr	r3, [pc, #784]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eac:	4bc2      	ldr	r3, [pc, #776]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	0a19      	lsrs	r1, r3, #8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	061a      	lsls	r2, r3, #24
 8001eba:	4bbf      	ldr	r3, [pc, #764]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	e019      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ec2:	4bbd      	ldr	r3, [pc, #756]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4bbc      	ldr	r3, [pc, #752]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001ec8:	49bd      	ldr	r1, [pc, #756]	; (80021c0 <HAL_RCC_OscConfig+0x690>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fbb1 	bl	8001634 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fbac 	bl	8001634 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1eb      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eea:	4bb3      	ldr	r3, [pc, #716]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2208      	movs	r2, #8
 8001efc:	4013      	ands	r3, r2
 8001efe:	d036      	beq.n	8001f6e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d019      	beq.n	8001f3c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f08:	4bab      	ldr	r3, [pc, #684]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0c:	4baa      	ldr	r3, [pc, #680]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7ff fb8e 	bl	8001634 <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fb89 	bl	8001634 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1c8      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f30:	4ba1      	ldr	r3, [pc, #644]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0f1      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3ee>
 8001f3a:	e018      	b.n	8001f6e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f40:	4b9d      	ldr	r3, [pc, #628]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	438a      	bics	r2, r1
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fb74 	bl	8001634 <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff fb6f 	bl	8001634 <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e1ae      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f64:	4b94      	ldr	r3, [pc, #592]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d1f1      	bne.n	8001f52 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2204      	movs	r2, #4
 8001f74:	4013      	ands	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x44a>
 8001f78:	e0ae      	b.n	80020d8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2023      	movs	r0, #35	; 0x23
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b8d      	ldr	r3, [pc, #564]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	055b      	lsls	r3, r3, #21
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0549      	lsls	r1, r1, #21
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x694>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	d11a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fae:	4b85      	ldr	r3, [pc, #532]	; (80021c4 <HAL_RCC_OscConfig+0x694>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b84      	ldr	r3, [pc, #528]	; (80021c4 <HAL_RCC_OscConfig+0x694>)
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	0049      	lsls	r1, r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fb3a 	bl	8001634 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff fb35 	bl	8001634 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e174      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b7a      	ldr	r3, [pc, #488]	; (80021c4 <HAL_RCC_OscConfig+0x694>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x4d0>
 8001ff0:	4b71      	ldr	r3, [pc, #452]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0049      	lsls	r1, r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8001ffe:	e031      	b.n	8002064 <HAL_RCC_OscConfig+0x534>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x4f2>
 8002008:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800200a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200c:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800200e:	496c      	ldr	r1, [pc, #432]	; (80021c0 <HAL_RCC_OscConfig+0x690>)
 8002010:	400a      	ands	r2, r1
 8002012:	651a      	str	r2, [r3, #80]	; 0x50
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002018:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800201a:	496b      	ldr	r1, [pc, #428]	; (80021c8 <HAL_RCC_OscConfig+0x698>)
 800201c:	400a      	ands	r2, r1
 800201e:	651a      	str	r2, [r3, #80]	; 0x50
 8002020:	e020      	b.n	8002064 <HAL_RCC_OscConfig+0x534>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	23a0      	movs	r3, #160	; 0xa0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	429a      	cmp	r2, r3
 800202c:	d10e      	bne.n	800204c <HAL_RCC_OscConfig+0x51c>
 800202e:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	00c9      	lsls	r1, r1, #3
 8002038:	430a      	orrs	r2, r1
 800203a:	651a      	str	r2, [r3, #80]	; 0x50
 800203c:	4b5e      	ldr	r3, [pc, #376]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800203e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0049      	lsls	r1, r1, #1
 8002046:	430a      	orrs	r2, r1
 8002048:	651a      	str	r2, [r3, #80]	; 0x50
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x534>
 800204c:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800204e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002052:	495b      	ldr	r1, [pc, #364]	; (80021c0 <HAL_RCC_OscConfig+0x690>)
 8002054:	400a      	ands	r2, r1
 8002056:	651a      	str	r2, [r3, #80]	; 0x50
 8002058:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800205a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800205e:	495a      	ldr	r1, [pc, #360]	; (80021c8 <HAL_RCC_OscConfig+0x698>)
 8002060:	400a      	ands	r2, r1
 8002062:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d015      	beq.n	8002098 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fae2 	bl	8001634 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002074:	e009      	b.n	800208a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff fadd 	bl	8001634 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_OscConfig+0x69c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e11b      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800208c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4013      	ands	r3, r2
 8002094:	d0ef      	beq.n	8002076 <HAL_RCC_OscConfig+0x546>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff facc 	bl	8001634 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020a0:	e009      	b.n	80020b6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fac7 	bl	8001634 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4a47      	ldr	r2, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x69c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e105      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d1ef      	bne.n	80020a2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020c2:	2323      	movs	r3, #35	; 0x23
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020d2:	493f      	ldr	r1, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x6a0>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2220      	movs	r2, #32
 80020de:	4013      	ands	r3, r2
 80020e0:	d049      	beq.n	8002176 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d026      	beq.n	8002138 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x6a4>)
 8002104:	6a1a      	ldr	r2, [r3, #32]
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x6a4>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0189      	lsls	r1, r1, #6
 800210c:	430a      	orrs	r2, r1
 800210e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fa90 	bl	8001634 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211a:	f7ff fa8b 	bl	8001634 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0ca      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2202      	movs	r2, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d0f1      	beq.n	800211a <HAL_RCC_OscConfig+0x5ea>
 8002136:	e01e      	b.n	8002176 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800213e:	2101      	movs	r1, #1
 8002140:	438a      	bics	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_RCC_OscConfig+0x6a4>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_OscConfig+0x6a4>)
 800214a:	4923      	ldr	r1, [pc, #140]	; (80021d8 <HAL_RCC_OscConfig+0x6a8>)
 800214c:	400a      	ands	r2, r1
 800214e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fa70 	bl	8001634 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215a:	f7ff fa6b 	bl	8001634 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e0aa      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d1f1      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d100      	bne.n	8002180 <HAL_RCC_OscConfig+0x650>
 800217e:	e09f      	b.n	80022c0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d100      	bne.n	8002188 <HAL_RCC_OscConfig+0x658>
 8002186:	e078      	b.n	800227a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	2b02      	cmp	r3, #2
 800218e:	d159      	bne.n	8002244 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_OscConfig+0x688>)
 8002196:	4911      	ldr	r1, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x6ac>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fa4a 	bl	8001634 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff fa45 	bl	8001634 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d915      	bls.n	80021e0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e084      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	ffff1fff 	.word	0xffff1fff
 80021c0:	fffffeff 	.word	0xfffffeff
 80021c4:	40007000 	.word	0x40007000
 80021c8:	fffffbff 	.word	0xfffffbff
 80021cc:	00001388 	.word	0x00001388
 80021d0:	efffffff 	.word	0xefffffff
 80021d4:	40010000 	.word	0x40010000
 80021d8:	ffffdfff 	.word	0xffffdfff
 80021dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	049b      	lsls	r3, r3, #18
 80021e8:	4013      	ands	r3, r2
 80021ea:	d1dc      	bne.n	80021a6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a37      	ldr	r2, [pc, #220]	; (80022d0 <HAL_RCC_OscConfig+0x7a0>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	431a      	orrs	r2, r3
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0449      	lsls	r1, r1, #17
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fa0b 	bl	8001634 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff fa06 	bl	8001634 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e045      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	049b      	lsls	r3, r3, #18
 800223e:	4013      	ands	r3, r2
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x6f4>
 8002242:	e03d      	b.n	80022c0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <HAL_RCC_OscConfig+0x7a4>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff f9f0 	bl	8001634 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f9eb 	bl	8001634 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e02a      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	049b      	lsls	r3, r3, #18
 8002274:	4013      	ands	r3, r2
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x72a>
 8002278:	e022      	b.n	80022c0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e01d      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x79c>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	429a      	cmp	r2, r3
 800229a:	d10f      	bne.n	80022bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	23f0      	movs	r3, #240	; 0xf0
 80022a0:	039b      	lsls	r3, r3, #14
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	401a      	ands	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b00a      	add	sp, #40	; 0x28
 80022c8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40021000 	.word	0x40021000
 80022d0:	ff02ffff 	.word	0xff02ffff
 80022d4:	feffffff 	.word	0xfeffffff

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e128      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b96      	ldr	r3, [pc, #600]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d91e      	bls.n	8002338 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b93      	ldr	r3, [pc, #588]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	4b90      	ldr	r3, [pc, #576]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800230c:	f7ff f992 	bl	8001634 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002314:	e009      	b.n	800232a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7ff f98d 	bl	8001634 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	4a8a      	ldr	r2, [pc, #552]	; (800254c <HAL_RCC_ClockConfig+0x274>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e109      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b87      	ldr	r3, [pc, #540]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2202      	movs	r2, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002342:	4b83      	ldr	r3, [pc, #524]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	22f0      	movs	r2, #240	; 0xf0
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b7f      	ldr	r3, [pc, #508]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 8002352:	430a      	orrs	r2, r1
 8002354:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d100      	bne.n	8002362 <HAL_RCC_ClockConfig+0x8a>
 8002360:	e089      	b.n	8002476 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	029b      	lsls	r3, r3, #10
 8002372:	4013      	ands	r3, r2
 8002374:	d120      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0e1      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	049b      	lsls	r3, r3, #18
 800238a:	4013      	ands	r3, r2
 800238c:	d114      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0d5      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d106      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	d109      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0ca      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0c2      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b8:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2203      	movs	r2, #3
 80023be:	4393      	bics	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023cc:	f7ff f932 	bl	8001634 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d111      	bne.n	8002400 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023dc:	e009      	b.n	80023f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023de:	f7ff f929 	bl	8001634 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x274>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0a5      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	220c      	movs	r2, #12
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d1ef      	bne.n	80023de <HAL_RCC_ClockConfig+0x106>
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d111      	bne.n	800242c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	e009      	b.n	800241e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240a:	f7ff f913 	bl	8001634 <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x274>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e08f      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	220c      	movs	r2, #12
 8002424:	4013      	ands	r3, r2
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d1ef      	bne.n	800240a <HAL_RCC_ClockConfig+0x132>
 800242a:	e024      	b.n	8002476 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d11b      	bne.n	800246c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002434:	e009      	b.n	800244a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002436:	f7ff f8fd 	bl	8001634 <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x274>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e079      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	220c      	movs	r2, #12
 8002450:	4013      	ands	r3, r2
 8002452:	2b04      	cmp	r3, #4
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_ClockConfig+0x15e>
 8002456:	e00e      	b.n	8002476 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff f8ec 	bl	8001634 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4a3a      	ldr	r2, [pc, #232]	; (800254c <HAL_RCC_ClockConfig+0x274>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e068      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800246c:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	220c      	movs	r2, #12
 8002472:	4013      	ands	r3, r2
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d21e      	bcs.n	80024c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4393      	bics	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002496:	f7ff f8cd 	bl	8001634 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	e009      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff f8c8 	bl	8001634 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_RCC_ClockConfig+0x274>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e044      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_ClockConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d1ee      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2204      	movs	r2, #4
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a20      	ldr	r2, [pc, #128]	; (8002554 <HAL_RCC_ClockConfig+0x27c>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2208      	movs	r2, #8
 80024e6:	4013      	ands	r3, r2
 80024e8:	d00a      	beq.n	8002500 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_RCC_ClockConfig+0x280>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	00da      	lsls	r2, r3, #3
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002500:	f000 f832 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002504:	0001      	movs	r1, r0
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_ClockConfig+0x278>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	220f      	movs	r2, #15
 800250e:	4013      	ands	r3, r2
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x284>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	000a      	movs	r2, r1
 8002516:	40da      	lsrs	r2, r3
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_RCC_ClockConfig+0x288>)
 800251a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_ClockConfig+0x28c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	250b      	movs	r5, #11
 8002522:	197c      	adds	r4, r7, r5
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff f83f 	bl	80015a8 <HAL_InitTick>
 800252a:	0003      	movs	r3, r0
 800252c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800252e:	197b      	adds	r3, r7, r5
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002536:	197b      	adds	r3, r7, r5
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	e000      	b.n	800253e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bdb0      	pop	{r4, r5, r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40022000 	.word	0x40022000
 800254c:	00001388 	.word	0x00001388
 8002550:	40021000 	.word	0x40021000
 8002554:	fffff8ff 	.word	0xfffff8ff
 8002558:	ffffc7ff 	.word	0xffffc7ff
 800255c:	0800446c 	.word	0x0800446c
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002576:	230c      	movs	r3, #12
 8002578:	4013      	ands	r3, r2
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d014      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x40>
 800257e:	d900      	bls.n	8002582 <HAL_RCC_GetSysClockFreq+0x1a>
 8002580:	e07b      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x112>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x24>
 8002586:	2b08      	cmp	r3, #8
 8002588:	d00b      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e076      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800258c:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	4013      	ands	r3, r2
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800259a:	e07c      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025a0:	e079      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCC_GetSysClockFreq+0x144>)
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025a6:	e076      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	0c9a      	lsrs	r2, r3, #18
 80025ac:	230f      	movs	r3, #15
 80025ae:	401a      	ands	r2, r3
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	0d9a      	lsrs	r2, r3, #22
 80025ba:	2303      	movs	r3, #3
 80025bc:	4013      	ands	r3, r2
 80025be:	3301      	adds	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	4013      	ands	r3, r2
 80025cc:	d01a      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_RCC_GetSysClockFreq+0x144>)
 80025d8:	2300      	movs	r3, #0
 80025da:	69b8      	ldr	r0, [r7, #24]
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	f7fd fe49 	bl	8000274 <__aeabi_lmul>
 80025e2:	0002      	movs	r2, r0
 80025e4:	000b      	movs	r3, r1
 80025e6:	0010      	movs	r0, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f7fd fe1d 	bl	8000234 <__aeabi_uldivmod>
 80025fa:	0002      	movs	r2, r0
 80025fc:	000b      	movs	r3, r1
 80025fe:	0013      	movs	r3, r2
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
 8002602:	e037      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	4013      	ands	r3, r2
 800260c:	d01a      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002618:	2300      	movs	r3, #0
 800261a:	68b8      	ldr	r0, [r7, #8]
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	f7fd fe29 	bl	8000274 <__aeabi_lmul>
 8002622:	0002      	movs	r2, r0
 8002624:	000b      	movs	r3, r1
 8002626:	0010      	movs	r0, r2
 8002628:	0019      	movs	r1, r3
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f7fd fdfd 	bl	8000234 <__aeabi_uldivmod>
 800263a:	0002      	movs	r2, r0
 800263c:	000b      	movs	r3, r1
 800263e:	0013      	movs	r3, r2
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
 8002642:	e017      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	0018      	movs	r0, r3
 8002648:	2300      	movs	r3, #0
 800264a:	0019      	movs	r1, r3
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800264e:	2300      	movs	r3, #0
 8002650:	f7fd fe10 	bl	8000274 <__aeabi_lmul>
 8002654:	0002      	movs	r2, r0
 8002656:	000b      	movs	r3, r1
 8002658:	0010      	movs	r0, r2
 800265a:	0019      	movs	r1, r3
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	001c      	movs	r4, r3
 8002660:	2300      	movs	r3, #0
 8002662:	001d      	movs	r5, r3
 8002664:	0022      	movs	r2, r4
 8002666:	002b      	movs	r3, r5
 8002668:	f7fd fde4 	bl	8000234 <__aeabi_uldivmod>
 800266c:	0002      	movs	r2, r0
 800266e:	000b      	movs	r3, r1
 8002670:	0013      	movs	r3, r2
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002678:	e00d      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0b5b      	lsrs	r3, r3, #13
 8002680:	2207      	movs	r2, #7
 8002682:	4013      	ands	r3, r2
 8002684:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	3301      	adds	r3, #1
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0212      	lsls	r2, r2, #8
 800268e:	409a      	lsls	r2, r3
 8002690:	0013      	movs	r3, r2
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002694:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b00e      	add	sp, #56	; 0x38
 800269e:	bdb0      	pop	{r4, r5, r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	003d0900 	.word	0x003d0900
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	08004484 	.word	0x08004484

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff2 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d0:	0001      	movs	r1, r0
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	2207      	movs	r2, #7
 80026da:	4013      	ands	r3, r2
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	40d9      	lsrs	r1, r3
 80026e2:	000b      	movs	r3, r1
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	40021000 	.word	0x40021000
 80026f0:	0800447c 	.word	0x0800447c

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f8:	f7ff ffdc 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026fc:	0001      	movs	r1, r0
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	2207      	movs	r2, #7
 8002706:	4013      	ands	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_RCC_GetPCLK2Freq+0x28>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	40d9      	lsrs	r1, r3
 800270e:	000b      	movs	r3, r1
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40021000 	.word	0x40021000
 800271c:	0800447c 	.word	0x0800447c

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002728:	2317      	movs	r3, #23
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2220      	movs	r2, #32
 8002736:	4013      	ands	r3, r2
 8002738:	d106      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d100      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002746:	e0d9      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002748:	4ba4      	ldr	r3, [pc, #656]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800274a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	055b      	lsls	r3, r3, #21
 8002750:	4013      	ands	r3, r2
 8002752:	d10a      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	4ba1      	ldr	r3, [pc, #644]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002758:	4ba0      	ldr	r3, [pc, #640]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0549      	lsls	r1, r1, #21
 800275e:	430a      	orrs	r2, r1
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002762:	2317      	movs	r3, #23
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b9d      	ldr	r3, [pc, #628]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d11a      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b9a      	ldr	r3, [pc, #616]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b99      	ldr	r3, [pc, #612]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0049      	lsls	r1, r1, #1
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002784:	f7fe ff56 	bl	8001634 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe ff51 	bl	8001634 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e118      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b8f      	ldr	r3, [pc, #572]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d0f0      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027ac:	4b8b      	ldr	r3, [pc, #556]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	039b      	lsls	r3, r3, #14
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	23c0      	movs	r3, #192	; 0xc0
 80027be:	039b      	lsls	r3, r3, #14
 80027c0:	4013      	ands	r3, r2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	23c0      	movs	r3, #192	; 0xc0
 80027ce:	039b      	lsls	r3, r3, #14
 80027d0:	4013      	ands	r3, r2
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d013      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	23c0      	movs	r3, #192	; 0xc0
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	401a      	ands	r2, r3
 80027e2:	23c0      	movs	r3, #192	; 0xc0
 80027e4:	029b      	lsls	r3, r3, #10
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d10a      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027ea:	4b7c      	ldr	r3, [pc, #496]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	029b      	lsls	r3, r3, #10
 80027f2:	401a      	ands	r2, r3
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d101      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0e8      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002800:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d049      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	429a      	cmp	r2, r3
 8002820:	d004      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2220      	movs	r2, #32
 8002828:	4013      	ands	r3, r2
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	23c0      	movs	r3, #192	; 0xc0
 8002832:	029b      	lsls	r3, r3, #10
 8002834:	4013      	ands	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d034      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4013      	ands	r3, r2
 8002846:	d02e      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002848:	4b64      	ldr	r3, [pc, #400]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800284a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284c:	4a65      	ldr	r2, [pc, #404]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b62      	ldr	r3, [pc, #392]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002856:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0309      	lsls	r1, r1, #12
 800285c:	430a      	orrs	r2, r1
 800285e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002860:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002862:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002864:	4b5d      	ldr	r3, [pc, #372]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002866:	4960      	ldr	r1, [pc, #384]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002868:	400a      	ands	r2, r1
 800286a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800286c:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d014      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe feda 	bl	8001634 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002884:	e009      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fed5 	bl	8001634 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	4a56      	ldr	r2, [pc, #344]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e09b      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800289a:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800289c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d0ef      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	401a      	ands	r2, r3
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	029b      	lsls	r3, r3, #10
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	23c0      	movs	r3, #192	; 0xc0
 80028c8:	039b      	lsls	r3, r3, #14
 80028ca:	401a      	ands	r2, r3
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	401a      	ands	r2, r3
 80028e0:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028e6:	2317      	movs	r3, #23
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f4:	4b39      	ldr	r3, [pc, #228]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028f6:	493f      	ldr	r1, [pc, #252]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002906:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	2203      	movs	r2, #3
 800290c:	4393      	bics	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002916:	430a      	orrs	r2, r1
 8002918:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	220c      	movs	r2, #12
 800292a:	4393      	bics	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002934:	430a      	orrs	r2, r1
 8002936:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2204      	movs	r2, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002948:	4013      	ands	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002952:	430a      	orrs	r2, r1
 8002954:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	4013      	ands	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	4a25      	ldr	r2, [pc, #148]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002970:	430a      	orrs	r2, r1
 8002972:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4013      	ands	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002990:	430a      	orrs	r2, r1
 8002992:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	4013      	ands	r3, r2
 80029ba:	d009      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c0:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029cc:	430a      	orrs	r2, r1
 80029ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b006      	add	sp, #24
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
 80029e4:	fffcffff 	.word	0xfffcffff
 80029e8:	fff7ffff 	.word	0xfff7ffff
 80029ec:	00001388 	.word	0x00001388
 80029f0:	ffcfffff 	.word	0xffcfffff
 80029f4:	efffffff 	.word	0xefffffff
 80029f8:	fffff3ff 	.word	0xfffff3ff
 80029fc:	ffffcfff 	.word	0xffffcfff
 8002a00:	fbffffff 	.word	0xfbffffff
 8002a04:	fff3ffff 	.word	0xfff3ffff

08002a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e044      	b.n	8002aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2274      	movs	r2, #116	; 0x74
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fe fcd9 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	; 0x24
 8002a36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2101      	movs	r1, #1
 8002a44:	438a      	bics	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fa2a 	bl	8002ea4 <UART_SetConfig>
 8002a50:	0003      	movs	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e024      	b.n	8002aa4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 fcdb 	bl	8003420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	490d      	ldr	r1, [pc, #52]	; (8002aac <HAL_UART_Init+0xa4>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	212a      	movs	r1, #42	; 0x2a
 8002a86:	438a      	bics	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fd73 	bl	8003588 <UART_CheckIdleState>
 8002aa2:	0003      	movs	r3, r0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffffb7ff 	.word	0xffffb7ff

08002ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	1dbb      	adds	r3, r7, #6
 8002abe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d000      	beq.n	8002aca <HAL_UART_Transmit+0x1a>
 8002ac8:	e095      	b.n	8002bf6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_UART_Transmit+0x28>
 8002ad0:	1dbb      	adds	r3, r7, #6
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e08d      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	015b      	lsls	r3, r3, #5
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d109      	bne.n	8002afc <HAL_UART_Transmit+0x4c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d001      	beq.n	8002afc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e07d      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2274      	movs	r2, #116	; 0x74
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Transmit+0x5a>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e076      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2274      	movs	r2, #116	; 0x74
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	2100      	movs	r1, #0
 8002b18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fd88 	bl	8001634 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1dba      	adds	r2, r7, #6
 8002b2c:	2150      	movs	r1, #80	; 0x50
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1dba      	adds	r2, r7, #6
 8002b36:	2152      	movs	r1, #82	; 0x52
 8002b38:	8812      	ldrh	r2, [r2, #0]
 8002b3a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	015b      	lsls	r3, r3, #5
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d108      	bne.n	8002b5a <HAL_UART_Transmit+0xaa>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e003      	b.n	8002b62 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2274      	movs	r2, #116	; 0x74
 8002b66:	2100      	movs	r1, #0
 8002b68:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002b6a:	e02c      	b.n	8002bc6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	0013      	movs	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	f000 fd4d 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e038      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	001a      	movs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	05d2      	lsls	r2, r2, #23
 8002b98:	0dd2      	lsrs	r2, r2, #23
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e007      	b.n	8002bb4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2252      	movs	r2, #82	; 0x52
 8002bb8:	5a9b      	ldrh	r3, [r3, r2]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b299      	uxth	r1, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2252      	movs	r2, #82	; 0x52
 8002bc4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2252      	movs	r2, #82	; 0x52
 8002bca:	5a9b      	ldrh	r3, [r3, r2]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1cc      	bne.n	8002b6c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	0013      	movs	r3, r2
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	f000 fd1a 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e005      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b008      	add	sp, #32
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d000      	beq.n	8002c1a <HAL_UART_Receive+0x1a>
 8002c18:	e0d9      	b.n	8002dce <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_UART_Receive+0x28>
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d1      	b.n	8002dd0 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	015b      	lsls	r3, r3, #5
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d109      	bne.n	8002c4c <HAL_UART_Receive+0x4c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0c1      	b.n	8002dd0 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2274      	movs	r2, #116	; 0x74
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Receive+0x5a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0ba      	b.n	8002dd0 <HAL_UART_Receive+0x1d0>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2274      	movs	r2, #116	; 0x74
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	2100      	movs	r1, #0
 8002c68:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2222      	movs	r2, #34	; 0x22
 8002c6e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c76:	f7fe fcdd 	bl	8001634 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1dba      	adds	r2, r7, #6
 8002c82:	2158      	movs	r1, #88	; 0x58
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1dba      	adds	r2, r7, #6
 8002c8c:	215a      	movs	r1, #90	; 0x5a
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d10d      	bne.n	8002cba <HAL_UART_Receive+0xba>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Receive+0xb0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	225c      	movs	r2, #92	; 0x5c
 8002caa:	494b      	ldr	r1, [pc, #300]	; (8002dd8 <HAL_UART_Receive+0x1d8>)
 8002cac:	5299      	strh	r1, [r3, r2]
 8002cae:	e02e      	b.n	8002d0e <HAL_UART_Receive+0x10e>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	225c      	movs	r2, #92	; 0x5c
 8002cb4:	21ff      	movs	r1, #255	; 0xff
 8002cb6:	5299      	strh	r1, [r3, r2]
 8002cb8:	e029      	b.n	8002d0e <HAL_UART_Receive+0x10e>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_UART_Receive+0xde>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_UART_Receive+0xd4>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	225c      	movs	r2, #92	; 0x5c
 8002cce:	21ff      	movs	r1, #255	; 0xff
 8002cd0:	5299      	strh	r1, [r3, r2]
 8002cd2:	e01c      	b.n	8002d0e <HAL_UART_Receive+0x10e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	225c      	movs	r2, #92	; 0x5c
 8002cd8:	217f      	movs	r1, #127	; 0x7f
 8002cda:	5299      	strh	r1, [r3, r2]
 8002cdc:	e017      	b.n	8002d0e <HAL_UART_Receive+0x10e>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	055b      	lsls	r3, r3, #21
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d10d      	bne.n	8002d06 <HAL_UART_Receive+0x106>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <HAL_UART_Receive+0xfc>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	225c      	movs	r2, #92	; 0x5c
 8002cf6:	217f      	movs	r1, #127	; 0x7f
 8002cf8:	5299      	strh	r1, [r3, r2]
 8002cfa:	e008      	b.n	8002d0e <HAL_UART_Receive+0x10e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	225c      	movs	r2, #92	; 0x5c
 8002d00:	213f      	movs	r1, #63	; 0x3f
 8002d02:	5299      	strh	r1, [r3, r2]
 8002d04:	e003      	b.n	8002d0e <HAL_UART_Receive+0x10e>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	225c      	movs	r2, #92	; 0x5c
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002d0e:	2312      	movs	r3, #18
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	215c      	movs	r1, #92	; 0x5c
 8002d16:	5a52      	ldrh	r2, [r2, r1]
 8002d18:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	015b      	lsls	r3, r3, #5
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Receive+0x138>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2274      	movs	r2, #116	; 0x74
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d48:	e036      	b.n	8002db8 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	0013      	movs	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	2120      	movs	r1, #32
 8002d58:	f000 fc5e 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e035      	b.n	8002dd0 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10e      	bne.n	8002d88 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2212      	movs	r2, #18
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	3302      	adds	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e00e      	b.n	8002da6 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2212      	movs	r2, #18
 8002d92:	18ba      	adds	r2, r7, r2
 8002d94:	8812      	ldrh	r2, [r2, #0]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	225a      	movs	r2, #90	; 0x5a
 8002daa:	5a9b      	ldrh	r3, [r3, r2]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b299      	uxth	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	225a      	movs	r2, #90	; 0x5a
 8002db6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	225a      	movs	r2, #90	; 0x5a
 8002dbc:	5a9b      	ldrh	r3, [r3, r2]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1c2      	bne.n	8002d4a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
  }
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b008      	add	sp, #32
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	000001ff 	.word	0x000001ff

08002ddc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d144      	bne.n	8002e7c <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_UART_Receive_IT+0x24>
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e03c      	b.n	8002e7e <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d109      	bne.n	8002e24 <HAL_UART_Receive_IT+0x48>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d001      	beq.n	8002e24 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02c      	b.n	8002e7e <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2274      	movs	r2, #116	; 0x74
 8002e28:	5c9b      	ldrb	r3, [r3, r2]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Receive_IT+0x56>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e025      	b.n	8002e7e <HAL_UART_Receive_IT+0xa2>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2274      	movs	r2, #116	; 0x74
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <HAL_UART_Receive_IT+0xac>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00f      	beq.n	8002e6a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	4013      	ands	r3, r2
 8002e56:	d008      	beq.n	8002e6a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002e6a:	1dbb      	adds	r3, r7, #6
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 fc4e 	bl	8003714 <UART_Start_Receive_IT>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	40004800 	.word	0x40004800

08002e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	000a      	movs	r2, r1
 8002e96:	1cbb      	adds	r3, r7, #2
 8002e98:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea4:	b5b0      	push	{r4, r5, r7, lr}
 8002ea6:	b08e      	sub	sp, #56	; 0x38
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eac:	231a      	movs	r3, #26
 8002eae:	2218      	movs	r2, #24
 8002eb0:	4694      	mov	ip, r2
 8002eb2:	44bc      	add	ip, r7
 8002eb4:	4463      	add	r3, ip
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4ab0      	ldr	r2, [pc, #704]	; (800319c <UART_SetConfig+0x2f8>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4aac      	ldr	r2, [pc, #688]	; (80031a0 <UART_SetConfig+0x2fc>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4aa6      	ldr	r2, [pc, #664]	; (80031a4 <UART_SetConfig+0x300>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f16:	4313      	orrs	r3, r2
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4aa1      	ldr	r2, [pc, #644]	; (80031a8 <UART_SetConfig+0x304>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9d      	ldr	r2, [pc, #628]	; (80031ac <UART_SetConfig+0x308>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d136      	bne.n	8002fa8 <UART_SetConfig+0x104>
 8002f3a:	4b9d      	ldr	r3, [pc, #628]	; (80031b0 <UART_SetConfig+0x30c>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	2203      	movs	r2, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d020      	beq.n	8002f88 <UART_SetConfig+0xe4>
 8002f46:	d827      	bhi.n	8002f98 <UART_SetConfig+0xf4>
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d00d      	beq.n	8002f68 <UART_SetConfig+0xc4>
 8002f4c:	d824      	bhi.n	8002f98 <UART_SetConfig+0xf4>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <UART_SetConfig+0xb4>
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d010      	beq.n	8002f78 <UART_SetConfig+0xd4>
 8002f56:	e01f      	b.n	8002f98 <UART_SetConfig+0xf4>
 8002f58:	231b      	movs	r3, #27
 8002f5a:	2218      	movs	r2, #24
 8002f5c:	4694      	mov	ip, r2
 8002f5e:	44bc      	add	ip, r7
 8002f60:	4463      	add	r3, ip
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e0c5      	b.n	80030f4 <UART_SetConfig+0x250>
 8002f68:	231b      	movs	r3, #27
 8002f6a:	2218      	movs	r2, #24
 8002f6c:	4694      	mov	ip, r2
 8002f6e:	44bc      	add	ip, r7
 8002f70:	4463      	add	r3, ip
 8002f72:	2202      	movs	r2, #2
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e0bd      	b.n	80030f4 <UART_SetConfig+0x250>
 8002f78:	231b      	movs	r3, #27
 8002f7a:	2218      	movs	r2, #24
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	44bc      	add	ip, r7
 8002f80:	4463      	add	r3, ip
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e0b5      	b.n	80030f4 <UART_SetConfig+0x250>
 8002f88:	231b      	movs	r3, #27
 8002f8a:	2218      	movs	r2, #24
 8002f8c:	4694      	mov	ip, r2
 8002f8e:	44bc      	add	ip, r7
 8002f90:	4463      	add	r3, ip
 8002f92:	2208      	movs	r2, #8
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e0ad      	b.n	80030f4 <UART_SetConfig+0x250>
 8002f98:	231b      	movs	r3, #27
 8002f9a:	2218      	movs	r2, #24
 8002f9c:	4694      	mov	ip, r2
 8002f9e:	44bc      	add	ip, r7
 8002fa0:	4463      	add	r3, ip
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e0a5      	b.n	80030f4 <UART_SetConfig+0x250>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a81      	ldr	r2, [pc, #516]	; (80031b4 <UART_SetConfig+0x310>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d136      	bne.n	8003020 <UART_SetConfig+0x17c>
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <UART_SetConfig+0x30c>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d020      	beq.n	8003000 <UART_SetConfig+0x15c>
 8002fbe:	d827      	bhi.n	8003010 <UART_SetConfig+0x16c>
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d00d      	beq.n	8002fe0 <UART_SetConfig+0x13c>
 8002fc4:	d824      	bhi.n	8003010 <UART_SetConfig+0x16c>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <UART_SetConfig+0x12c>
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d010      	beq.n	8002ff0 <UART_SetConfig+0x14c>
 8002fce:	e01f      	b.n	8003010 <UART_SetConfig+0x16c>
 8002fd0:	231b      	movs	r3, #27
 8002fd2:	2218      	movs	r2, #24
 8002fd4:	4694      	mov	ip, r2
 8002fd6:	44bc      	add	ip, r7
 8002fd8:	4463      	add	r3, ip
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e089      	b.n	80030f4 <UART_SetConfig+0x250>
 8002fe0:	231b      	movs	r3, #27
 8002fe2:	2218      	movs	r2, #24
 8002fe4:	4694      	mov	ip, r2
 8002fe6:	44bc      	add	ip, r7
 8002fe8:	4463      	add	r3, ip
 8002fea:	2202      	movs	r2, #2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e081      	b.n	80030f4 <UART_SetConfig+0x250>
 8002ff0:	231b      	movs	r3, #27
 8002ff2:	2218      	movs	r2, #24
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	44bc      	add	ip, r7
 8002ff8:	4463      	add	r3, ip
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e079      	b.n	80030f4 <UART_SetConfig+0x250>
 8003000:	231b      	movs	r3, #27
 8003002:	2218      	movs	r2, #24
 8003004:	4694      	mov	ip, r2
 8003006:	44bc      	add	ip, r7
 8003008:	4463      	add	r3, ip
 800300a:	2208      	movs	r2, #8
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e071      	b.n	80030f4 <UART_SetConfig+0x250>
 8003010:	231b      	movs	r3, #27
 8003012:	2218      	movs	r2, #24
 8003014:	4694      	mov	ip, r2
 8003016:	44bc      	add	ip, r7
 8003018:	4463      	add	r3, ip
 800301a:	2210      	movs	r2, #16
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e069      	b.n	80030f4 <UART_SetConfig+0x250>
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a64      	ldr	r2, [pc, #400]	; (80031b8 <UART_SetConfig+0x314>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d107      	bne.n	800303a <UART_SetConfig+0x196>
 800302a:	231b      	movs	r3, #27
 800302c:	2218      	movs	r2, #24
 800302e:	4694      	mov	ip, r2
 8003030:	44bc      	add	ip, r7
 8003032:	4463      	add	r3, ip
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e05c      	b.n	80030f4 <UART_SetConfig+0x250>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5f      	ldr	r2, [pc, #380]	; (80031bc <UART_SetConfig+0x318>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d107      	bne.n	8003054 <UART_SetConfig+0x1b0>
 8003044:	231b      	movs	r3, #27
 8003046:	2218      	movs	r2, #24
 8003048:	4694      	mov	ip, r2
 800304a:	44bc      	add	ip, r7
 800304c:	4463      	add	r3, ip
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e04f      	b.n	80030f4 <UART_SetConfig+0x250>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <UART_SetConfig+0x300>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d143      	bne.n	80030e6 <UART_SetConfig+0x242>
 800305e:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <UART_SetConfig+0x30c>)
 8003060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	4013      	ands	r3, r2
 8003068:	22c0      	movs	r2, #192	; 0xc0
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	4293      	cmp	r3, r2
 800306e:	d02a      	beq.n	80030c6 <UART_SetConfig+0x222>
 8003070:	22c0      	movs	r2, #192	; 0xc0
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	4293      	cmp	r3, r2
 8003076:	d82e      	bhi.n	80030d6 <UART_SetConfig+0x232>
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	4293      	cmp	r3, r2
 800307e:	d012      	beq.n	80030a6 <UART_SetConfig+0x202>
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	0112      	lsls	r2, r2, #4
 8003084:	4293      	cmp	r3, r2
 8003086:	d826      	bhi.n	80030d6 <UART_SetConfig+0x232>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <UART_SetConfig+0x1f2>
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	00d2      	lsls	r2, r2, #3
 8003090:	4293      	cmp	r3, r2
 8003092:	d010      	beq.n	80030b6 <UART_SetConfig+0x212>
 8003094:	e01f      	b.n	80030d6 <UART_SetConfig+0x232>
 8003096:	231b      	movs	r3, #27
 8003098:	2218      	movs	r2, #24
 800309a:	4694      	mov	ip, r2
 800309c:	44bc      	add	ip, r7
 800309e:	4463      	add	r3, ip
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e026      	b.n	80030f4 <UART_SetConfig+0x250>
 80030a6:	231b      	movs	r3, #27
 80030a8:	2218      	movs	r2, #24
 80030aa:	4694      	mov	ip, r2
 80030ac:	44bc      	add	ip, r7
 80030ae:	4463      	add	r3, ip
 80030b0:	2202      	movs	r2, #2
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e01e      	b.n	80030f4 <UART_SetConfig+0x250>
 80030b6:	231b      	movs	r3, #27
 80030b8:	2218      	movs	r2, #24
 80030ba:	4694      	mov	ip, r2
 80030bc:	44bc      	add	ip, r7
 80030be:	4463      	add	r3, ip
 80030c0:	2204      	movs	r2, #4
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e016      	b.n	80030f4 <UART_SetConfig+0x250>
 80030c6:	231b      	movs	r3, #27
 80030c8:	2218      	movs	r2, #24
 80030ca:	4694      	mov	ip, r2
 80030cc:	44bc      	add	ip, r7
 80030ce:	4463      	add	r3, ip
 80030d0:	2208      	movs	r2, #8
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e00e      	b.n	80030f4 <UART_SetConfig+0x250>
 80030d6:	231b      	movs	r3, #27
 80030d8:	2218      	movs	r2, #24
 80030da:	4694      	mov	ip, r2
 80030dc:	44bc      	add	ip, r7
 80030de:	4463      	add	r3, ip
 80030e0:	2210      	movs	r2, #16
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e006      	b.n	80030f4 <UART_SetConfig+0x250>
 80030e6:	231b      	movs	r3, #27
 80030e8:	2218      	movs	r2, #24
 80030ea:	4694      	mov	ip, r2
 80030ec:	44bc      	add	ip, r7
 80030ee:	4463      	add	r3, ip
 80030f0:	2210      	movs	r2, #16
 80030f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <UART_SetConfig+0x300>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d000      	beq.n	8003100 <UART_SetConfig+0x25c>
 80030fe:	e09e      	b.n	800323e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003100:	231b      	movs	r3, #27
 8003102:	2218      	movs	r2, #24
 8003104:	4694      	mov	ip, r2
 8003106:	44bc      	add	ip, r7
 8003108:	4463      	add	r3, ip
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d01d      	beq.n	800314c <UART_SetConfig+0x2a8>
 8003110:	dc20      	bgt.n	8003154 <UART_SetConfig+0x2b0>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d015      	beq.n	8003142 <UART_SetConfig+0x29e>
 8003116:	dc1d      	bgt.n	8003154 <UART_SetConfig+0x2b0>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <UART_SetConfig+0x27e>
 800311c:	2b02      	cmp	r3, #2
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0x288>
 8003120:	e018      	b.n	8003154 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003122:	f7ff fad1 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003126:	0003      	movs	r3, r0
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800312a:	e01d      	b.n	8003168 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <UART_SetConfig+0x30c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2210      	movs	r2, #16
 8003132:	4013      	ands	r3, r2
 8003134:	d002      	beq.n	800313c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <UART_SetConfig+0x31c>)
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800313a:	e015      	b.n	8003168 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800313c:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <UART_SetConfig+0x320>)
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003140:	e012      	b.n	8003168 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7ff fa11 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8003146:	0003      	movs	r3, r0
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800314a:	e00d      	b.n	8003168 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003152:	e009      	b.n	8003168 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003158:	231a      	movs	r3, #26
 800315a:	2218      	movs	r2, #24
 800315c:	4694      	mov	ip, r2
 800315e:	44bc      	add	ip, r7
 8003160:	4463      	add	r3, ip
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
        break;
 8003166:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d100      	bne.n	8003170 <UART_SetConfig+0x2cc>
 800316e:	e13c      	b.n	80033ea <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	0013      	movs	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	189b      	adds	r3, r3, r2
 800317a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317c:	429a      	cmp	r2, r3
 800317e:	d305      	bcc.n	800318c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003188:	429a      	cmp	r2, r3
 800318a:	d91d      	bls.n	80031c8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800318c:	231a      	movs	r3, #26
 800318e:	2218      	movs	r2, #24
 8003190:	4694      	mov	ip, r2
 8003192:	44bc      	add	ip, r7
 8003194:	4463      	add	r3, ip
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e126      	b.n	80033ea <UART_SetConfig+0x546>
 800319c:	efff69f3 	.word	0xefff69f3
 80031a0:	ffffcfff 	.word	0xffffcfff
 80031a4:	40004800 	.word	0x40004800
 80031a8:	fffff4ff 	.word	0xfffff4ff
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40004c00 	.word	0x40004c00
 80031bc:	40005000 	.word	0x40005000
 80031c0:	003d0900 	.word	0x003d0900
 80031c4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	6939      	ldr	r1, [r7, #16]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	000b      	movs	r3, r1
 80031d6:	0e1b      	lsrs	r3, r3, #24
 80031d8:	0010      	movs	r0, r2
 80031da:	0205      	lsls	r5, r0, #8
 80031dc:	431d      	orrs	r5, r3
 80031de:	000b      	movs	r3, r1
 80031e0:	021c      	lsls	r4, r3, #8
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68b8      	ldr	r0, [r7, #8]
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	1900      	adds	r0, r0, r4
 80031f4:	4169      	adcs	r1, r5
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f7fd f816 	bl	8000234 <__aeabi_uldivmod>
 8003208:	0002      	movs	r2, r0
 800320a:	000b      	movs	r3, r1
 800320c:	0013      	movs	r3, r2
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003212:	23c0      	movs	r3, #192	; 0xc0
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	429a      	cmp	r2, r3
 8003218:	d309      	bcc.n	800322e <UART_SetConfig+0x38a>
 800321a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	035b      	lsls	r3, r3, #13
 8003220:	429a      	cmp	r2, r3
 8003222:	d204      	bcs.n	800322e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	e0dd      	b.n	80033ea <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800322e:	231a      	movs	r3, #26
 8003230:	2218      	movs	r2, #24
 8003232:	4694      	mov	ip, r2
 8003234:	44bc      	add	ip, r7
 8003236:	4463      	add	r3, ip
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e0d5      	b.n	80033ea <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	429a      	cmp	r2, r3
 8003248:	d000      	beq.n	800324c <UART_SetConfig+0x3a8>
 800324a:	e074      	b.n	8003336 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800324c:	231b      	movs	r3, #27
 800324e:	2218      	movs	r2, #24
 8003250:	4694      	mov	ip, r2
 8003252:	44bc      	add	ip, r7
 8003254:	4463      	add	r3, ip
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d822      	bhi.n	80032a2 <UART_SetConfig+0x3fe>
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	4b6b      	ldr	r3, [pc, #428]	; (800340c <UART_SetConfig+0x568>)
 8003260:	18d3      	adds	r3, r2, r3
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003266:	f7ff fa2f 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 800326a:	0003      	movs	r3, r0
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800326e:	e022      	b.n	80032b6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7ff fa40 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8003274:	0003      	movs	r3, r0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003278:	e01d      	b.n	80032b6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <UART_SetConfig+0x56c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2210      	movs	r2, #16
 8003280:	4013      	ands	r3, r2
 8003282:	d002      	beq.n	800328a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003284:	4b63      	ldr	r3, [pc, #396]	; (8003414 <UART_SetConfig+0x570>)
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003288:	e015      	b.n	80032b6 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <UART_SetConfig+0x574>)
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800328e:	e012      	b.n	80032b6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003290:	f7ff f96a 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8003294:	0003      	movs	r3, r0
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003298:	e00d      	b.n	80032b6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032a0:	e009      	b.n	80032b6 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032a6:	231a      	movs	r3, #26
 80032a8:	2218      	movs	r2, #24
 80032aa:	4694      	mov	ip, r2
 80032ac:	44bc      	add	ip, r7
 80032ae:	4463      	add	r3, ip
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
        break;
 80032b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d100      	bne.n	80032be <UART_SetConfig+0x41a>
 80032bc:	e095      	b.n	80033ea <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	005a      	lsls	r2, r3, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	18d2      	adds	r2, r2, r3
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	0019      	movs	r1, r3
 80032d0:	0010      	movs	r0, r2
 80032d2:	f7fc ff23 	bl	800011c <__udivsi3>
 80032d6:	0003      	movs	r3, r0
 80032d8:	b29b      	uxth	r3, r3
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d921      	bls.n	8003326 <UART_SetConfig+0x482>
 80032e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d21c      	bcs.n	8003326 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	200e      	movs	r0, #14
 80032f2:	2418      	movs	r4, #24
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	181b      	adds	r3, r3, r0
 80032f8:	210f      	movs	r1, #15
 80032fa:	438a      	bics	r2, r1
 80032fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	b29b      	uxth	r3, r3
 8003304:	2207      	movs	r2, #7
 8003306:	4013      	ands	r3, r2
 8003308:	b299      	uxth	r1, r3
 800330a:	193b      	adds	r3, r7, r4
 800330c:	181b      	adds	r3, r3, r0
 800330e:	193a      	adds	r2, r7, r4
 8003310:	1812      	adds	r2, r2, r0
 8003312:	8812      	ldrh	r2, [r2, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	193a      	adds	r2, r7, r4
 800331e:	1812      	adds	r2, r2, r0
 8003320:	8812      	ldrh	r2, [r2, #0]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	e061      	b.n	80033ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003326:	231a      	movs	r3, #26
 8003328:	2218      	movs	r2, #24
 800332a:	4694      	mov	ip, r2
 800332c:	44bc      	add	ip, r7
 800332e:	4463      	add	r3, ip
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e059      	b.n	80033ea <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003336:	231b      	movs	r3, #27
 8003338:	2218      	movs	r2, #24
 800333a:	4694      	mov	ip, r2
 800333c:	44bc      	add	ip, r7
 800333e:	4463      	add	r3, ip
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d822      	bhi.n	800338c <UART_SetConfig+0x4e8>
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <UART_SetConfig+0x578>)
 800334a:	18d3      	adds	r3, r2, r3
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7ff f9ba 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003354:	0003      	movs	r3, r0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003358:	e022      	b.n	80033a0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800335a:	f7ff f9cb 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 800335e:	0003      	movs	r3, r0
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003362:	e01d      	b.n	80033a0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <UART_SetConfig+0x56c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	4013      	ands	r3, r2
 800336c:	d002      	beq.n	8003374 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800336e:	4b29      	ldr	r3, [pc, #164]	; (8003414 <UART_SetConfig+0x570>)
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003372:	e015      	b.n	80033a0 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <UART_SetConfig+0x574>)
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003378:	e012      	b.n	80033a0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7ff f8f5 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 800337e:	0003      	movs	r3, r0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003382:	e00d      	b.n	80033a0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800338a:	e009      	b.n	80033a0 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2218      	movs	r2, #24
 8003394:	4694      	mov	ip, r2
 8003396:	44bc      	add	ip, r7
 8003398:	4463      	add	r3, ip
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
        break;
 800339e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d021      	beq.n	80033ea <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	085a      	lsrs	r2, r3, #1
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	18d2      	adds	r2, r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0019      	movs	r1, r3
 80033b6:	0010      	movs	r0, r2
 80033b8:	f7fc feb0 	bl	800011c <__udivsi3>
 80033bc:	0003      	movs	r3, r0
 80033be:	b29b      	uxth	r3, r3
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d909      	bls.n	80033dc <UART_SetConfig+0x538>
 80033c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	025b      	lsls	r3, r3, #9
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d204      	bcs.n	80033dc <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	e006      	b.n	80033ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80033dc:	231a      	movs	r3, #26
 80033de:	2218      	movs	r2, #24
 80033e0:	4694      	mov	ip, r2
 80033e2:	44bc      	add	ip, r7
 80033e4:	4463      	add	r3, ip
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2200      	movs	r2, #0
 80033ee:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2200      	movs	r2, #0
 80033f4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033f6:	231a      	movs	r3, #26
 80033f8:	2218      	movs	r2, #24
 80033fa:	4694      	mov	ip, r2
 80033fc:	44bc      	add	ip, r7
 80033fe:	4463      	add	r3, ip
 8003400:	781b      	ldrb	r3, [r3, #0]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b00e      	add	sp, #56	; 0x38
 8003408:	bdb0      	pop	{r4, r5, r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	08004490 	.word	0x08004490
 8003410:	40021000 	.word	0x40021000
 8003414:	003d0900 	.word	0x003d0900
 8003418:	00f42400 	.word	0x00f42400
 800341c:	080044b4 	.word	0x080044b4

08003420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d00b      	beq.n	800344a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <UART_AdvFeatureConfig+0x144>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2202      	movs	r2, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d00b      	beq.n	800346c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a43      	ldr	r2, [pc, #268]	; (8003568 <UART_AdvFeatureConfig+0x148>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2204      	movs	r2, #4
 8003472:	4013      	ands	r3, r2
 8003474:	d00b      	beq.n	800348e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a3b      	ldr	r2, [pc, #236]	; (800356c <UART_AdvFeatureConfig+0x14c>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2208      	movs	r2, #8
 8003494:	4013      	ands	r3, r2
 8003496:	d00b      	beq.n	80034b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a34      	ldr	r2, [pc, #208]	; (8003570 <UART_AdvFeatureConfig+0x150>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2210      	movs	r2, #16
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <UART_AdvFeatureConfig+0x154>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2220      	movs	r2, #32
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4a25      	ldr	r2, [pc, #148]	; (8003578 <UART_AdvFeatureConfig+0x158>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	4013      	ands	r3, r2
 80034fc:	d01d      	beq.n	800353a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <UART_AdvFeatureConfig+0x15c>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	035b      	lsls	r3, r3, #13
 800351e:	429a      	cmp	r2, r3
 8003520:	d10b      	bne.n	800353a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <UART_AdvFeatureConfig+0x160>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	4013      	ands	r3, r2
 8003542:	d00b      	beq.n	800355c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <UART_AdvFeatureConfig+0x164>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fffdffff 	.word	0xfffdffff
 8003568:	fffeffff 	.word	0xfffeffff
 800356c:	fffbffff 	.word	0xfffbffff
 8003570:	ffff7fff 	.word	0xffff7fff
 8003574:	ffffefff 	.word	0xffffefff
 8003578:	ffffdfff 	.word	0xffffdfff
 800357c:	ffefffff 	.word	0xffefffff
 8003580:	ff9fffff 	.word	0xff9fffff
 8003584:	fff7ffff 	.word	0xfff7ffff

08003588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	2100      	movs	r1, #0
 8003596:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003598:	f7fe f84c 	bl	8001634 <HAL_GetTick>
 800359c:	0003      	movs	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2208      	movs	r2, #8
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d10c      	bne.n	80035c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	0391      	lsls	r1, r2, #14
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <UART_CheckIdleState+0x8c>)
 80035b8:	9200      	str	r2, [sp, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f000 f82c 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d001      	beq.n	80035c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e021      	b.n	800360c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d10c      	bne.n	80035f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	03d1      	lsls	r1, r2, #15
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <UART_CheckIdleState+0x8c>)
 80035e0:	9200      	str	r2, [sp, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f000 f818 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d001      	beq.n	80035f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e00d      	b.n	800360c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2274      	movs	r2, #116	; 0x74
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	01ffffff 	.word	0x01ffffff

08003618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	1dfb      	adds	r3, r7, #7
 8003626:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	e05e      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	3301      	adds	r3, #1
 800362e:	d05b      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7fe f800 	bl	8001634 <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d11b      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	492f      	ldr	r1, [pc, #188]	; (8003710 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003652:	400a      	ands	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	438a      	bics	r2, r1
 8003664:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2274      	movs	r2, #116	; 0x74
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e044      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2204      	movs	r2, #4
 8003686:	4013      	ands	r3, r2
 8003688:	d02e      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	401a      	ands	r2, r3
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	429a      	cmp	r2, r3
 800369c:	d124      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4917      	ldr	r1, [pc, #92]	; (8003710 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036b4:	400a      	ands	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	438a      	bics	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	2120      	movs	r1, #32
 80036da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2274      	movs	r2, #116	; 0x74
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e00f      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	425a      	negs	r2, r3
 80036f8:	4153      	adcs	r3, r2
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	001a      	movs	r2, r3
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d091      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b004      	add	sp, #16
 800370e:	bd80      	pop	{r7, pc}
 8003710:	fffffe5f 	.word	0xfffffe5f

08003714 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	1dbb      	adds	r3, r7, #6
 8003720:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1dba      	adds	r2, r7, #6
 800372c:	2158      	movs	r1, #88	; 0x58
 800372e:	8812      	ldrh	r2, [r2, #0]
 8003730:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1dba      	adds	r2, r7, #6
 8003736:	215a      	movs	r1, #90	; 0x5a
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	015b      	lsls	r3, r3, #5
 800374a:	429a      	cmp	r2, r3
 800374c:	d10d      	bne.n	800376a <UART_Start_Receive_IT+0x56>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d104      	bne.n	8003760 <UART_Start_Receive_IT+0x4c>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	225c      	movs	r2, #92	; 0x5c
 800375a:	4932      	ldr	r1, [pc, #200]	; (8003824 <UART_Start_Receive_IT+0x110>)
 800375c:	5299      	strh	r1, [r3, r2]
 800375e:	e02e      	b.n	80037be <UART_Start_Receive_IT+0xaa>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	225c      	movs	r2, #92	; 0x5c
 8003764:	21ff      	movs	r1, #255	; 0xff
 8003766:	5299      	strh	r1, [r3, r2]
 8003768:	e029      	b.n	80037be <UART_Start_Receive_IT+0xaa>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <UART_Start_Receive_IT+0x7a>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <UART_Start_Receive_IT+0x70>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	225c      	movs	r2, #92	; 0x5c
 800377e:	21ff      	movs	r1, #255	; 0xff
 8003780:	5299      	strh	r1, [r3, r2]
 8003782:	e01c      	b.n	80037be <UART_Start_Receive_IT+0xaa>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	225c      	movs	r2, #92	; 0x5c
 8003788:	217f      	movs	r1, #127	; 0x7f
 800378a:	5299      	strh	r1, [r3, r2]
 800378c:	e017      	b.n	80037be <UART_Start_Receive_IT+0xaa>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	055b      	lsls	r3, r3, #21
 8003796:	429a      	cmp	r2, r3
 8003798:	d10d      	bne.n	80037b6 <UART_Start_Receive_IT+0xa2>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <UART_Start_Receive_IT+0x98>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	225c      	movs	r2, #92	; 0x5c
 80037a6:	217f      	movs	r1, #127	; 0x7f
 80037a8:	5299      	strh	r1, [r3, r2]
 80037aa:	e008      	b.n	80037be <UART_Start_Receive_IT+0xaa>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	225c      	movs	r2, #92	; 0x5c
 80037b0:	213f      	movs	r1, #63	; 0x3f
 80037b2:	5299      	strh	r1, [r3, r2]
 80037b4:	e003      	b.n	80037be <UART_Start_Receive_IT+0xaa>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	225c      	movs	r2, #92	; 0x5c
 80037ba:	2100      	movs	r1, #0
 80037bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	2100      	movs	r1, #0
 80037c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2222      	movs	r2, #34	; 0x22
 80037ca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	015b      	lsls	r3, r3, #5
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d107      	bne.n	80037f8 <UART_Start_Receive_IT+0xe4>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <UART_Start_Receive_IT+0x114>)
 80037f4:	665a      	str	r2, [r3, #100]	; 0x64
 80037f6:	e002      	b.n	80037fe <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <UART_Start_Receive_IT+0x118>)
 80037fc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2274      	movs	r2, #116	; 0x74
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2190      	movs	r1, #144	; 0x90
 8003812:	0049      	lsls	r1, r1, #1
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	000001ff 	.word	0x000001ff
 8003828:	08003919 	.word	0x08003919
 800382c:	08003831 	.word	0x08003831

08003830 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003838:	200e      	movs	r0, #14
 800383a:	183b      	adds	r3, r7, r0
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	215c      	movs	r1, #92	; 0x5c
 8003840:	5a52      	ldrh	r2, [r2, r1]
 8003842:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003848:	2b22      	cmp	r3, #34	; 0x22
 800384a:	d157      	bne.n	80038fc <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003852:	210c      	movs	r1, #12
 8003854:	187b      	adds	r3, r7, r1
 8003856:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003858:	187b      	adds	r3, r7, r1
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	183b      	adds	r3, r7, r0
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b2d9      	uxtb	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	400a      	ands	r2, r1
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	225a      	movs	r2, #90	; 0x5a
 800387c:	5a9b      	ldrh	r3, [r3, r2]
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b299      	uxth	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	225a      	movs	r2, #90	; 0x5a
 8003888:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	225a      	movs	r2, #90	; 0x5a
 800388e:	5a9b      	ldrh	r3, [r3, r2]
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13a      	bne.n	800390c <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	491c      	ldr	r1, [pc, #112]	; (8003914 <UART_RxISR_8BIT+0xe4>)
 80038a2:	400a      	ands	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2101      	movs	r1, #1
 80038b2:	438a      	bics	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d110      	bne.n	80038ec <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2110      	movs	r1, #16
 80038d6:	438a      	bics	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2258      	movs	r2, #88	; 0x58
 80038de:	5a9a      	ldrh	r2, [r3, r2]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0011      	movs	r1, r2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff fad1 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
 80038ea:	e003      	b.n	80038f4 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fd fa4a 	bl	8000d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038fa:	e007      	b.n	800390c <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2108      	movs	r1, #8
 8003908:	430a      	orrs	r2, r1
 800390a:	619a      	str	r2, [r3, #24]
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	fffffedf 	.word	0xfffffedf

08003918 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003920:	200e      	movs	r0, #14
 8003922:	183b      	adds	r3, r7, r0
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	215c      	movs	r1, #92	; 0x5c
 8003928:	5a52      	ldrh	r2, [r2, r1]
 800392a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003930:	2b22      	cmp	r3, #34	; 0x22
 8003932:	d157      	bne.n	80039e4 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800393a:	210c      	movs	r1, #12
 800393c:	187b      	adds	r3, r7, r1
 800393e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003946:	187b      	adds	r3, r7, r1
 8003948:	183a      	adds	r2, r7, r0
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	4013      	ands	r3, r2
 8003950:	b29a      	uxth	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	1c9a      	adds	r2, r3, #2
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	225a      	movs	r2, #90	; 0x5a
 8003964:	5a9b      	ldrh	r3, [r3, r2]
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b299      	uxth	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	225a      	movs	r2, #90	; 0x5a
 8003970:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	225a      	movs	r2, #90	; 0x5a
 8003976:	5a9b      	ldrh	r3, [r3, r2]
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d13a      	bne.n	80039f4 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	491c      	ldr	r1, [pc, #112]	; (80039fc <UART_RxISR_16BIT+0xe4>)
 800398a:	400a      	ands	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	438a      	bics	r2, r1
 800399c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d110      	bne.n	80039d4 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2110      	movs	r1, #16
 80039be:	438a      	bics	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2258      	movs	r2, #88	; 0x58
 80039c6:	5a9a      	ldrh	r2, [r3, r2]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0011      	movs	r1, r2
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fa5d 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
 80039d2:	e003      	b.n	80039dc <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7fd f9d6 	bl	8000d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039e2:	e007      	b.n	80039f4 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2108      	movs	r1, #8
 80039f0:	430a      	orrs	r2, r1
 80039f2:	619a      	str	r2, [r3, #24]
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b004      	add	sp, #16
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	fffffedf 	.word	0xfffffedf

08003a00 <__errno>:
 8003a00:	4b01      	ldr	r3, [pc, #4]	; (8003a08 <__errno+0x8>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	4770      	bx	lr
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	2000000c 	.word	0x2000000c

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	2600      	movs	r6, #0
 8003a10:	4d0c      	ldr	r5, [pc, #48]	; (8003a44 <__libc_init_array+0x38>)
 8003a12:	4c0d      	ldr	r4, [pc, #52]	; (8003a48 <__libc_init_array+0x3c>)
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	f000 fc47 	bl	80042b0 <_init>
 8003a22:	4d0a      	ldr	r5, [pc, #40]	; (8003a4c <__libc_init_array+0x40>)
 8003a24:	4c0a      	ldr	r4, [pc, #40]	; (8003a50 <__libc_init_array+0x44>)
 8003a26:	1b64      	subs	r4, r4, r5
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	00b3      	lsls	r3, r6, #2
 8003a32:	58eb      	ldr	r3, [r5, r3]
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	00b3      	lsls	r3, r6, #2
 8003a3c:	58eb      	ldr	r3, [r5, r3]
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08004514 	.word	0x08004514
 8003a48:	08004514 	.word	0x08004514
 8003a4c:	08004514 	.word	0x08004514
 8003a50:	08004518 	.word	0x08004518

08003a54 <memset>:
 8003a54:	0003      	movs	r3, r0
 8003a56:	1882      	adds	r2, r0, r2
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <memset+0xa>
 8003a5c:	4770      	bx	lr
 8003a5e:	7019      	strb	r1, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	e7f9      	b.n	8003a58 <memset+0x4>

08003a64 <siprintf>:
 8003a64:	b40e      	push	{r1, r2, r3}
 8003a66:	b500      	push	{lr}
 8003a68:	490b      	ldr	r1, [pc, #44]	; (8003a98 <siprintf+0x34>)
 8003a6a:	b09c      	sub	sp, #112	; 0x70
 8003a6c:	ab1d      	add	r3, sp, #116	; 0x74
 8003a6e:	9002      	str	r0, [sp, #8]
 8003a70:	9006      	str	r0, [sp, #24]
 8003a72:	9107      	str	r1, [sp, #28]
 8003a74:	9104      	str	r1, [sp, #16]
 8003a76:	4809      	ldr	r0, [pc, #36]	; (8003a9c <siprintf+0x38>)
 8003a78:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <siprintf+0x3c>)
 8003a7a:	cb04      	ldmia	r3!, {r2}
 8003a7c:	9105      	str	r1, [sp, #20]
 8003a7e:	6800      	ldr	r0, [r0, #0]
 8003a80:	a902      	add	r1, sp, #8
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	f000 f870 	bl	8003b68 <_svfiprintf_r>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9a02      	ldr	r2, [sp, #8]
 8003a8c:	7013      	strb	r3, [r2, #0]
 8003a8e:	b01c      	add	sp, #112	; 0x70
 8003a90:	bc08      	pop	{r3}
 8003a92:	b003      	add	sp, #12
 8003a94:	4718      	bx	r3
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	7fffffff 	.word	0x7fffffff
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	ffff0208 	.word	0xffff0208

08003aa4 <__ssputs_r>:
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	688e      	ldr	r6, [r1, #8]
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	0007      	movs	r7, r0
 8003aac:	000c      	movs	r4, r1
 8003aae:	9203      	str	r2, [sp, #12]
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	429e      	cmp	r6, r3
 8003ab4:	d83c      	bhi.n	8003b30 <__ssputs_r+0x8c>
 8003ab6:	2390      	movs	r3, #144	; 0x90
 8003ab8:	898a      	ldrh	r2, [r1, #12]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	421a      	tst	r2, r3
 8003abe:	d034      	beq.n	8003b2a <__ssputs_r+0x86>
 8003ac0:	2503      	movs	r5, #3
 8003ac2:	6909      	ldr	r1, [r1, #16]
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	1a5b      	subs	r3, r3, r1
 8003ac8:	9302      	str	r3, [sp, #8]
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	9802      	ldr	r0, [sp, #8]
 8003ace:	435d      	muls	r5, r3
 8003ad0:	0feb      	lsrs	r3, r5, #31
 8003ad2:	195d      	adds	r5, r3, r5
 8003ad4:	9b01      	ldr	r3, [sp, #4]
 8003ad6:	106d      	asrs	r5, r5, #1
 8003ad8:	3301      	adds	r3, #1
 8003ada:	181b      	adds	r3, r3, r0
 8003adc:	42ab      	cmp	r3, r5
 8003ade:	d900      	bls.n	8003ae2 <__ssputs_r+0x3e>
 8003ae0:	001d      	movs	r5, r3
 8003ae2:	0553      	lsls	r3, r2, #21
 8003ae4:	d532      	bpl.n	8003b4c <__ssputs_r+0xa8>
 8003ae6:	0029      	movs	r1, r5
 8003ae8:	0038      	movs	r0, r7
 8003aea:	f000 fb31 	bl	8004150 <_malloc_r>
 8003aee:	1e06      	subs	r6, r0, #0
 8003af0:	d109      	bne.n	8003b06 <__ssputs_r+0x62>
 8003af2:	230c      	movs	r3, #12
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	2340      	movs	r3, #64	; 0x40
 8003af8:	2001      	movs	r0, #1
 8003afa:	89a2      	ldrh	r2, [r4, #12]
 8003afc:	4240      	negs	r0, r0
 8003afe:	4313      	orrs	r3, r2
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	b005      	add	sp, #20
 8003b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b06:	9a02      	ldr	r2, [sp, #8]
 8003b08:	6921      	ldr	r1, [r4, #16]
 8003b0a:	f000 faba 	bl	8004082 <memcpy>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <__ssputs_r+0xc0>)
 8003b12:	401a      	ands	r2, r3
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	4313      	orrs	r3, r2
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	9b02      	ldr	r3, [sp, #8]
 8003b1c:	6126      	str	r6, [r4, #16]
 8003b1e:	18f6      	adds	r6, r6, r3
 8003b20:	6026      	str	r6, [r4, #0]
 8003b22:	6165      	str	r5, [r4, #20]
 8003b24:	9e01      	ldr	r6, [sp, #4]
 8003b26:	1aed      	subs	r5, r5, r3
 8003b28:	60a5      	str	r5, [r4, #8]
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	429e      	cmp	r6, r3
 8003b2e:	d900      	bls.n	8003b32 <__ssputs_r+0x8e>
 8003b30:	9e01      	ldr	r6, [sp, #4]
 8003b32:	0032      	movs	r2, r6
 8003b34:	9903      	ldr	r1, [sp, #12]
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	f000 faac 	bl	8004094 <memmove>
 8003b3c:	68a3      	ldr	r3, [r4, #8]
 8003b3e:	2000      	movs	r0, #0
 8003b40:	1b9b      	subs	r3, r3, r6
 8003b42:	60a3      	str	r3, [r4, #8]
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	199e      	adds	r6, r3, r6
 8003b48:	6026      	str	r6, [r4, #0]
 8003b4a:	e7da      	b.n	8003b02 <__ssputs_r+0x5e>
 8003b4c:	002a      	movs	r2, r5
 8003b4e:	0038      	movs	r0, r7
 8003b50:	f000 fb5c 	bl	800420c <_realloc_r>
 8003b54:	1e06      	subs	r6, r0, #0
 8003b56:	d1e0      	bne.n	8003b1a <__ssputs_r+0x76>
 8003b58:	0038      	movs	r0, r7
 8003b5a:	6921      	ldr	r1, [r4, #16]
 8003b5c:	f000 faae 	bl	80040bc <_free_r>
 8003b60:	e7c7      	b.n	8003af2 <__ssputs_r+0x4e>
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	fffffb7f 	.word	0xfffffb7f

08003b68 <_svfiprintf_r>:
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b0a1      	sub	sp, #132	; 0x84
 8003b6c:	9003      	str	r0, [sp, #12]
 8003b6e:	001d      	movs	r5, r3
 8003b70:	898b      	ldrh	r3, [r1, #12]
 8003b72:	000f      	movs	r7, r1
 8003b74:	0016      	movs	r6, r2
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	d511      	bpl.n	8003b9e <_svfiprintf_r+0x36>
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10e      	bne.n	8003b9e <_svfiprintf_r+0x36>
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	f000 fae5 	bl	8004150 <_malloc_r>
 8003b86:	6038      	str	r0, [r7, #0]
 8003b88:	6138      	str	r0, [r7, #16]
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d105      	bne.n	8003b9a <_svfiprintf_r+0x32>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	9a03      	ldr	r2, [sp, #12]
 8003b92:	3801      	subs	r0, #1
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	b021      	add	sp, #132	; 0x84
 8003b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9a:	2340      	movs	r3, #64	; 0x40
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	ac08      	add	r4, sp, #32
 8003ba2:	6163      	str	r3, [r4, #20]
 8003ba4:	3320      	adds	r3, #32
 8003ba6:	7663      	strb	r3, [r4, #25]
 8003ba8:	3310      	adds	r3, #16
 8003baa:	76a3      	strb	r3, [r4, #26]
 8003bac:	9507      	str	r5, [sp, #28]
 8003bae:	0035      	movs	r5, r6
 8003bb0:	782b      	ldrb	r3, [r5, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <_svfiprintf_r+0x52>
 8003bb6:	2b25      	cmp	r3, #37	; 0x25
 8003bb8:	d147      	bne.n	8003c4a <_svfiprintf_r+0xe2>
 8003bba:	1bab      	subs	r3, r5, r6
 8003bbc:	9305      	str	r3, [sp, #20]
 8003bbe:	42b5      	cmp	r5, r6
 8003bc0:	d00c      	beq.n	8003bdc <_svfiprintf_r+0x74>
 8003bc2:	0032      	movs	r2, r6
 8003bc4:	0039      	movs	r1, r7
 8003bc6:	9803      	ldr	r0, [sp, #12]
 8003bc8:	f7ff ff6c 	bl	8003aa4 <__ssputs_r>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d100      	bne.n	8003bd2 <_svfiprintf_r+0x6a>
 8003bd0:	e0ae      	b.n	8003d30 <_svfiprintf_r+0x1c8>
 8003bd2:	6962      	ldr	r2, [r4, #20]
 8003bd4:	9b05      	ldr	r3, [sp, #20]
 8003bd6:	4694      	mov	ip, r2
 8003bd8:	4463      	add	r3, ip
 8003bda:	6163      	str	r3, [r4, #20]
 8003bdc:	782b      	ldrb	r3, [r5, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d100      	bne.n	8003be4 <_svfiprintf_r+0x7c>
 8003be2:	e0a5      	b.n	8003d30 <_svfiprintf_r+0x1c8>
 8003be4:	2201      	movs	r2, #1
 8003be6:	2300      	movs	r3, #0
 8003be8:	4252      	negs	r2, r2
 8003bea:	6062      	str	r2, [r4, #4]
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	3254      	adds	r2, #84	; 0x54
 8003bf0:	1852      	adds	r2, r2, r1
 8003bf2:	1c6e      	adds	r6, r5, #1
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	60e3      	str	r3, [r4, #12]
 8003bf8:	60a3      	str	r3, [r4, #8]
 8003bfa:	7013      	strb	r3, [r2, #0]
 8003bfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003bfe:	2205      	movs	r2, #5
 8003c00:	7831      	ldrb	r1, [r6, #0]
 8003c02:	4854      	ldr	r0, [pc, #336]	; (8003d54 <_svfiprintf_r+0x1ec>)
 8003c04:	f000 fa32 	bl	800406c <memchr>
 8003c08:	1c75      	adds	r5, r6, #1
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d11f      	bne.n	8003c4e <_svfiprintf_r+0xe6>
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	06d3      	lsls	r3, r2, #27
 8003c12:	d504      	bpl.n	8003c1e <_svfiprintf_r+0xb6>
 8003c14:	2353      	movs	r3, #83	; 0x53
 8003c16:	a904      	add	r1, sp, #16
 8003c18:	185b      	adds	r3, r3, r1
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	7019      	strb	r1, [r3, #0]
 8003c1e:	0713      	lsls	r3, r2, #28
 8003c20:	d504      	bpl.n	8003c2c <_svfiprintf_r+0xc4>
 8003c22:	2353      	movs	r3, #83	; 0x53
 8003c24:	a904      	add	r1, sp, #16
 8003c26:	185b      	adds	r3, r3, r1
 8003c28:	212b      	movs	r1, #43	; 0x2b
 8003c2a:	7019      	strb	r1, [r3, #0]
 8003c2c:	7833      	ldrb	r3, [r6, #0]
 8003c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c30:	d016      	beq.n	8003c60 <_svfiprintf_r+0xf8>
 8003c32:	0035      	movs	r5, r6
 8003c34:	2100      	movs	r1, #0
 8003c36:	200a      	movs	r0, #10
 8003c38:	68e3      	ldr	r3, [r4, #12]
 8003c3a:	782a      	ldrb	r2, [r5, #0]
 8003c3c:	1c6e      	adds	r6, r5, #1
 8003c3e:	3a30      	subs	r2, #48	; 0x30
 8003c40:	2a09      	cmp	r2, #9
 8003c42:	d94e      	bls.n	8003ce2 <_svfiprintf_r+0x17a>
 8003c44:	2900      	cmp	r1, #0
 8003c46:	d111      	bne.n	8003c6c <_svfiprintf_r+0x104>
 8003c48:	e017      	b.n	8003c7a <_svfiprintf_r+0x112>
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	e7b0      	b.n	8003bb0 <_svfiprintf_r+0x48>
 8003c4e:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <_svfiprintf_r+0x1ec>)
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	1ac0      	subs	r0, r0, r3
 8003c54:	2301      	movs	r3, #1
 8003c56:	4083      	lsls	r3, r0
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	002e      	movs	r6, r5
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	e7ce      	b.n	8003bfe <_svfiprintf_r+0x96>
 8003c60:	9b07      	ldr	r3, [sp, #28]
 8003c62:	1d19      	adds	r1, r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	9107      	str	r1, [sp, #28]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db01      	blt.n	8003c70 <_svfiprintf_r+0x108>
 8003c6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c6e:	e004      	b.n	8003c7a <_svfiprintf_r+0x112>
 8003c70:	425b      	negs	r3, r3
 8003c72:	60e3      	str	r3, [r4, #12]
 8003c74:	2302      	movs	r3, #2
 8003c76:	4313      	orrs	r3, r2
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	782b      	ldrb	r3, [r5, #0]
 8003c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003c7e:	d10a      	bne.n	8003c96 <_svfiprintf_r+0x12e>
 8003c80:	786b      	ldrb	r3, [r5, #1]
 8003c82:	2b2a      	cmp	r3, #42	; 0x2a
 8003c84:	d135      	bne.n	8003cf2 <_svfiprintf_r+0x18a>
 8003c86:	9b07      	ldr	r3, [sp, #28]
 8003c88:	3502      	adds	r5, #2
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	9207      	str	r2, [sp, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db2b      	blt.n	8003cec <_svfiprintf_r+0x184>
 8003c94:	9309      	str	r3, [sp, #36]	; 0x24
 8003c96:	4e30      	ldr	r6, [pc, #192]	; (8003d58 <_svfiprintf_r+0x1f0>)
 8003c98:	2203      	movs	r2, #3
 8003c9a:	0030      	movs	r0, r6
 8003c9c:	7829      	ldrb	r1, [r5, #0]
 8003c9e:	f000 f9e5 	bl	800406c <memchr>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d006      	beq.n	8003cb4 <_svfiprintf_r+0x14c>
 8003ca6:	2340      	movs	r3, #64	; 0x40
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	4083      	lsls	r3, r0
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	3501      	adds	r5, #1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	7829      	ldrb	r1, [r5, #0]
 8003cb6:	2206      	movs	r2, #6
 8003cb8:	4828      	ldr	r0, [pc, #160]	; (8003d5c <_svfiprintf_r+0x1f4>)
 8003cba:	1c6e      	adds	r6, r5, #1
 8003cbc:	7621      	strb	r1, [r4, #24]
 8003cbe:	f000 f9d5 	bl	800406c <memchr>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d03c      	beq.n	8003d40 <_svfiprintf_r+0x1d8>
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <_svfiprintf_r+0x1f8>)
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d125      	bne.n	8003d18 <_svfiprintf_r+0x1b0>
 8003ccc:	2207      	movs	r2, #7
 8003cce:	9b07      	ldr	r3, [sp, #28]
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	4393      	bics	r3, r2
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	9307      	str	r3, [sp, #28]
 8003cd8:	6963      	ldr	r3, [r4, #20]
 8003cda:	9a04      	ldr	r2, [sp, #16]
 8003cdc:	189b      	adds	r3, r3, r2
 8003cde:	6163      	str	r3, [r4, #20]
 8003ce0:	e765      	b.n	8003bae <_svfiprintf_r+0x46>
 8003ce2:	4343      	muls	r3, r0
 8003ce4:	0035      	movs	r5, r6
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	e7a6      	b.n	8003c3a <_svfiprintf_r+0xd2>
 8003cec:	2301      	movs	r3, #1
 8003cee:	425b      	negs	r3, r3
 8003cf0:	e7d0      	b.n	8003c94 <_svfiprintf_r+0x12c>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	200a      	movs	r0, #10
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	7829      	ldrb	r1, [r5, #0]
 8003cfe:	1c6e      	adds	r6, r5, #1
 8003d00:	3930      	subs	r1, #48	; 0x30
 8003d02:	2909      	cmp	r1, #9
 8003d04:	d903      	bls.n	8003d0e <_svfiprintf_r+0x1a6>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0c5      	beq.n	8003c96 <_svfiprintf_r+0x12e>
 8003d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d0c:	e7c3      	b.n	8003c96 <_svfiprintf_r+0x12e>
 8003d0e:	4342      	muls	r2, r0
 8003d10:	0035      	movs	r5, r6
 8003d12:	2301      	movs	r3, #1
 8003d14:	1852      	adds	r2, r2, r1
 8003d16:	e7f1      	b.n	8003cfc <_svfiprintf_r+0x194>
 8003d18:	ab07      	add	r3, sp, #28
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	003a      	movs	r2, r7
 8003d1e:	0021      	movs	r1, r4
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <_svfiprintf_r+0x1fc>)
 8003d22:	9803      	ldr	r0, [sp, #12]
 8003d24:	e000      	b.n	8003d28 <_svfiprintf_r+0x1c0>
 8003d26:	bf00      	nop
 8003d28:	9004      	str	r0, [sp, #16]
 8003d2a:	9b04      	ldr	r3, [sp, #16]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	d1d3      	bne.n	8003cd8 <_svfiprintf_r+0x170>
 8003d30:	89bb      	ldrh	r3, [r7, #12]
 8003d32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d34:	065b      	lsls	r3, r3, #25
 8003d36:	d400      	bmi.n	8003d3a <_svfiprintf_r+0x1d2>
 8003d38:	e72d      	b.n	8003b96 <_svfiprintf_r+0x2e>
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	4240      	negs	r0, r0
 8003d3e:	e72a      	b.n	8003b96 <_svfiprintf_r+0x2e>
 8003d40:	ab07      	add	r3, sp, #28
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	003a      	movs	r2, r7
 8003d46:	0021      	movs	r1, r4
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <_svfiprintf_r+0x1fc>)
 8003d4a:	9803      	ldr	r0, [sp, #12]
 8003d4c:	f000 f87c 	bl	8003e48 <_printf_i>
 8003d50:	e7ea      	b.n	8003d28 <_svfiprintf_r+0x1c0>
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	080044d8 	.word	0x080044d8
 8003d58:	080044de 	.word	0x080044de
 8003d5c:	080044e2 	.word	0x080044e2
 8003d60:	00000000 	.word	0x00000000
 8003d64:	08003aa5 	.word	0x08003aa5

08003d68 <_printf_common>:
 8003d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6a:	0015      	movs	r5, r2
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	688a      	ldr	r2, [r1, #8]
 8003d70:	690b      	ldr	r3, [r1, #16]
 8003d72:	000c      	movs	r4, r1
 8003d74:	9000      	str	r0, [sp, #0]
 8003d76:	4293      	cmp	r3, r2
 8003d78:	da00      	bge.n	8003d7c <_printf_common+0x14>
 8003d7a:	0013      	movs	r3, r2
 8003d7c:	0022      	movs	r2, r4
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	3243      	adds	r2, #67	; 0x43
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	d001      	beq.n	8003d8c <_printf_common+0x24>
 8003d88:	3301      	adds	r3, #1
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	d502      	bpl.n	8003d98 <_printf_common+0x30>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	3302      	adds	r3, #2
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	2306      	movs	r3, #6
 8003d9c:	0017      	movs	r7, r2
 8003d9e:	401f      	ands	r7, r3
 8003da0:	421a      	tst	r2, r3
 8003da2:	d027      	beq.n	8003df4 <_printf_common+0x8c>
 8003da4:	0023      	movs	r3, r4
 8003da6:	3343      	adds	r3, #67	; 0x43
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	1e5a      	subs	r2, r3, #1
 8003dac:	4193      	sbcs	r3, r2
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	0692      	lsls	r2, r2, #26
 8003db2:	d430      	bmi.n	8003e16 <_printf_common+0xae>
 8003db4:	0022      	movs	r2, r4
 8003db6:	9901      	ldr	r1, [sp, #4]
 8003db8:	9800      	ldr	r0, [sp, #0]
 8003dba:	9e08      	ldr	r6, [sp, #32]
 8003dbc:	3243      	adds	r2, #67	; 0x43
 8003dbe:	47b0      	blx	r6
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d025      	beq.n	8003e10 <_printf_common+0xa8>
 8003dc4:	2306      	movs	r3, #6
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	682a      	ldr	r2, [r5, #0]
 8003dca:	68e1      	ldr	r1, [r4, #12]
 8003dcc:	2500      	movs	r5, #0
 8003dce:	4003      	ands	r3, r0
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d103      	bne.n	8003ddc <_printf_common+0x74>
 8003dd4:	1a8d      	subs	r5, r1, r2
 8003dd6:	43eb      	mvns	r3, r5
 8003dd8:	17db      	asrs	r3, r3, #31
 8003dda:	401d      	ands	r5, r3
 8003ddc:	68a3      	ldr	r3, [r4, #8]
 8003dde:	6922      	ldr	r2, [r4, #16]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	dd01      	ble.n	8003de8 <_printf_common+0x80>
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	18ed      	adds	r5, r5, r3
 8003de8:	2700      	movs	r7, #0
 8003dea:	42bd      	cmp	r5, r7
 8003dec:	d120      	bne.n	8003e30 <_printf_common+0xc8>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e010      	b.n	8003e14 <_printf_common+0xac>
 8003df2:	3701      	adds	r7, #1
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	682a      	ldr	r2, [r5, #0]
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	42bb      	cmp	r3, r7
 8003dfc:	ddd2      	ble.n	8003da4 <_printf_common+0x3c>
 8003dfe:	0022      	movs	r2, r4
 8003e00:	2301      	movs	r3, #1
 8003e02:	9901      	ldr	r1, [sp, #4]
 8003e04:	9800      	ldr	r0, [sp, #0]
 8003e06:	9e08      	ldr	r6, [sp, #32]
 8003e08:	3219      	adds	r2, #25
 8003e0a:	47b0      	blx	r6
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d1f0      	bne.n	8003df2 <_printf_common+0x8a>
 8003e10:	2001      	movs	r0, #1
 8003e12:	4240      	negs	r0, r0
 8003e14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e16:	2030      	movs	r0, #48	; 0x30
 8003e18:	18e1      	adds	r1, r4, r3
 8003e1a:	3143      	adds	r1, #67	; 0x43
 8003e1c:	7008      	strb	r0, [r1, #0]
 8003e1e:	0021      	movs	r1, r4
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	3145      	adds	r1, #69	; 0x45
 8003e24:	7809      	ldrb	r1, [r1, #0]
 8003e26:	18a2      	adds	r2, r4, r2
 8003e28:	3243      	adds	r2, #67	; 0x43
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	7011      	strb	r1, [r2, #0]
 8003e2e:	e7c1      	b.n	8003db4 <_printf_common+0x4c>
 8003e30:	0022      	movs	r2, r4
 8003e32:	2301      	movs	r3, #1
 8003e34:	9901      	ldr	r1, [sp, #4]
 8003e36:	9800      	ldr	r0, [sp, #0]
 8003e38:	9e08      	ldr	r6, [sp, #32]
 8003e3a:	321a      	adds	r2, #26
 8003e3c:	47b0      	blx	r6
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d0e6      	beq.n	8003e10 <_printf_common+0xa8>
 8003e42:	3701      	adds	r7, #1
 8003e44:	e7d1      	b.n	8003dea <_printf_common+0x82>
	...

08003e48 <_printf_i>:
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b08b      	sub	sp, #44	; 0x2c
 8003e4c:	9206      	str	r2, [sp, #24]
 8003e4e:	000a      	movs	r2, r1
 8003e50:	3243      	adds	r2, #67	; 0x43
 8003e52:	9307      	str	r3, [sp, #28]
 8003e54:	9005      	str	r0, [sp, #20]
 8003e56:	9204      	str	r2, [sp, #16]
 8003e58:	7e0a      	ldrb	r2, [r1, #24]
 8003e5a:	000c      	movs	r4, r1
 8003e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e5e:	2a78      	cmp	r2, #120	; 0x78
 8003e60:	d806      	bhi.n	8003e70 <_printf_i+0x28>
 8003e62:	2a62      	cmp	r2, #98	; 0x62
 8003e64:	d808      	bhi.n	8003e78 <_printf_i+0x30>
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	d100      	bne.n	8003e6c <_printf_i+0x24>
 8003e6a:	e0c0      	b.n	8003fee <_printf_i+0x1a6>
 8003e6c:	2a58      	cmp	r2, #88	; 0x58
 8003e6e:	d052      	beq.n	8003f16 <_printf_i+0xce>
 8003e70:	0026      	movs	r6, r4
 8003e72:	3642      	adds	r6, #66	; 0x42
 8003e74:	7032      	strb	r2, [r6, #0]
 8003e76:	e022      	b.n	8003ebe <_printf_i+0x76>
 8003e78:	0010      	movs	r0, r2
 8003e7a:	3863      	subs	r0, #99	; 0x63
 8003e7c:	2815      	cmp	r0, #21
 8003e7e:	d8f7      	bhi.n	8003e70 <_printf_i+0x28>
 8003e80:	f7fc f942 	bl	8000108 <__gnu_thumb1_case_shi>
 8003e84:	001f0016 	.word	0x001f0016
 8003e88:	fff6fff6 	.word	0xfff6fff6
 8003e8c:	fff6fff6 	.word	0xfff6fff6
 8003e90:	fff6001f 	.word	0xfff6001f
 8003e94:	fff6fff6 	.word	0xfff6fff6
 8003e98:	00a8fff6 	.word	0x00a8fff6
 8003e9c:	009a0036 	.word	0x009a0036
 8003ea0:	fff6fff6 	.word	0xfff6fff6
 8003ea4:	fff600b9 	.word	0xfff600b9
 8003ea8:	fff60036 	.word	0xfff60036
 8003eac:	009efff6 	.word	0x009efff6
 8003eb0:	0026      	movs	r6, r4
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	3642      	adds	r6, #66	; 0x42
 8003eb6:	1d11      	adds	r1, r2, #4
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	7033      	strb	r3, [r6, #0]
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0a7      	b.n	8004012 <_printf_i+0x1ca>
 8003ec2:	6808      	ldr	r0, [r1, #0]
 8003ec4:	6819      	ldr	r1, [r3, #0]
 8003ec6:	1d0a      	adds	r2, r1, #4
 8003ec8:	0605      	lsls	r5, r0, #24
 8003eca:	d50b      	bpl.n	8003ee4 <_printf_i+0x9c>
 8003ecc:	680d      	ldr	r5, [r1, #0]
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	da03      	bge.n	8003edc <_printf_i+0x94>
 8003ed4:	232d      	movs	r3, #45	; 0x2d
 8003ed6:	9a04      	ldr	r2, [sp, #16]
 8003ed8:	426d      	negs	r5, r5
 8003eda:	7013      	strb	r3, [r2, #0]
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <_printf_i+0x21c>)
 8003ede:	270a      	movs	r7, #10
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	e032      	b.n	8003f4a <_printf_i+0x102>
 8003ee4:	680d      	ldr	r5, [r1, #0]
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	0641      	lsls	r1, r0, #25
 8003eea:	d5f1      	bpl.n	8003ed0 <_printf_i+0x88>
 8003eec:	b22d      	sxth	r5, r5
 8003eee:	e7ef      	b.n	8003ed0 <_printf_i+0x88>
 8003ef0:	680d      	ldr	r5, [r1, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	1d08      	adds	r0, r1, #4
 8003ef6:	6018      	str	r0, [r3, #0]
 8003ef8:	062e      	lsls	r6, r5, #24
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0xb8>
 8003efc:	680d      	ldr	r5, [r1, #0]
 8003efe:	e003      	b.n	8003f08 <_printf_i+0xc0>
 8003f00:	066d      	lsls	r5, r5, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0xb4>
 8003f04:	680d      	ldr	r5, [r1, #0]
 8003f06:	b2ad      	uxth	r5, r5
 8003f08:	4b56      	ldr	r3, [pc, #344]	; (8004064 <_printf_i+0x21c>)
 8003f0a:	270a      	movs	r7, #10
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	2a6f      	cmp	r2, #111	; 0x6f
 8003f10:	d117      	bne.n	8003f42 <_printf_i+0xfa>
 8003f12:	2708      	movs	r7, #8
 8003f14:	e015      	b.n	8003f42 <_printf_i+0xfa>
 8003f16:	3145      	adds	r1, #69	; 0x45
 8003f18:	700a      	strb	r2, [r1, #0]
 8003f1a:	4a52      	ldr	r2, [pc, #328]	; (8004064 <_printf_i+0x21c>)
 8003f1c:	9203      	str	r2, [sp, #12]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	6821      	ldr	r1, [r4, #0]
 8003f22:	ca20      	ldmia	r2!, {r5}
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	0608      	lsls	r0, r1, #24
 8003f28:	d550      	bpl.n	8003fcc <_printf_i+0x184>
 8003f2a:	07cb      	lsls	r3, r1, #31
 8003f2c:	d502      	bpl.n	8003f34 <_printf_i+0xec>
 8003f2e:	2320      	movs	r3, #32
 8003f30:	4319      	orrs	r1, r3
 8003f32:	6021      	str	r1, [r4, #0]
 8003f34:	2710      	movs	r7, #16
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	d103      	bne.n	8003f42 <_printf_i+0xfa>
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	439a      	bics	r2, r3
 8003f40:	6022      	str	r2, [r4, #0]
 8003f42:	0023      	movs	r3, r4
 8003f44:	2200      	movs	r2, #0
 8003f46:	3343      	adds	r3, #67	; 0x43
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	6863      	ldr	r3, [r4, #4]
 8003f4c:	60a3      	str	r3, [r4, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	db03      	blt.n	8003f5a <_printf_i+0x112>
 8003f52:	2204      	movs	r2, #4
 8003f54:	6821      	ldr	r1, [r4, #0]
 8003f56:	4391      	bics	r1, r2
 8003f58:	6021      	str	r1, [r4, #0]
 8003f5a:	2d00      	cmp	r5, #0
 8003f5c:	d102      	bne.n	8003f64 <_printf_i+0x11c>
 8003f5e:	9e04      	ldr	r6, [sp, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00c      	beq.n	8003f7e <_printf_i+0x136>
 8003f64:	9e04      	ldr	r6, [sp, #16]
 8003f66:	0028      	movs	r0, r5
 8003f68:	0039      	movs	r1, r7
 8003f6a:	f7fc f95d 	bl	8000228 <__aeabi_uidivmod>
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	3e01      	subs	r6, #1
 8003f72:	5c5b      	ldrb	r3, [r3, r1]
 8003f74:	7033      	strb	r3, [r6, #0]
 8003f76:	002b      	movs	r3, r5
 8003f78:	0005      	movs	r5, r0
 8003f7a:	429f      	cmp	r7, r3
 8003f7c:	d9f3      	bls.n	8003f66 <_printf_i+0x11e>
 8003f7e:	2f08      	cmp	r7, #8
 8003f80:	d109      	bne.n	8003f96 <_printf_i+0x14e>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	07db      	lsls	r3, r3, #31
 8003f86:	d506      	bpl.n	8003f96 <_printf_i+0x14e>
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	6922      	ldr	r2, [r4, #16]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	dc02      	bgt.n	8003f96 <_printf_i+0x14e>
 8003f90:	2330      	movs	r3, #48	; 0x30
 8003f92:	3e01      	subs	r6, #1
 8003f94:	7033      	strb	r3, [r6, #0]
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	1b9b      	subs	r3, r3, r6
 8003f9a:	6123      	str	r3, [r4, #16]
 8003f9c:	9b07      	ldr	r3, [sp, #28]
 8003f9e:	0021      	movs	r1, r4
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	9805      	ldr	r0, [sp, #20]
 8003fa4:	9b06      	ldr	r3, [sp, #24]
 8003fa6:	aa09      	add	r2, sp, #36	; 0x24
 8003fa8:	f7ff fede 	bl	8003d68 <_printf_common>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d135      	bne.n	800401c <_printf_i+0x1d4>
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	4240      	negs	r0, r0
 8003fb4:	b00b      	add	sp, #44	; 0x2c
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb8:	2220      	movs	r2, #32
 8003fba:	6809      	ldr	r1, [r1, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	0022      	movs	r2, r4
 8003fc2:	2178      	movs	r1, #120	; 0x78
 8003fc4:	3245      	adds	r2, #69	; 0x45
 8003fc6:	7011      	strb	r1, [r2, #0]
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <_printf_i+0x220>)
 8003fca:	e7a7      	b.n	8003f1c <_printf_i+0xd4>
 8003fcc:	0648      	lsls	r0, r1, #25
 8003fce:	d5ac      	bpl.n	8003f2a <_printf_i+0xe2>
 8003fd0:	b2ad      	uxth	r5, r5
 8003fd2:	e7aa      	b.n	8003f2a <_printf_i+0xe2>
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	680d      	ldr	r5, [r1, #0]
 8003fd8:	1d10      	adds	r0, r2, #4
 8003fda:	6949      	ldr	r1, [r1, #20]
 8003fdc:	6018      	str	r0, [r3, #0]
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	062e      	lsls	r6, r5, #24
 8003fe2:	d501      	bpl.n	8003fe8 <_printf_i+0x1a0>
 8003fe4:	6019      	str	r1, [r3, #0]
 8003fe6:	e002      	b.n	8003fee <_printf_i+0x1a6>
 8003fe8:	066d      	lsls	r5, r5, #25
 8003fea:	d5fb      	bpl.n	8003fe4 <_printf_i+0x19c>
 8003fec:	8019      	strh	r1, [r3, #0]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9e04      	ldr	r6, [sp, #16]
 8003ff2:	6123      	str	r3, [r4, #16]
 8003ff4:	e7d2      	b.n	8003f9c <_printf_i+0x154>
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	1d11      	adds	r1, r2, #4
 8003ffa:	6019      	str	r1, [r3, #0]
 8003ffc:	6816      	ldr	r6, [r2, #0]
 8003ffe:	2100      	movs	r1, #0
 8004000:	0030      	movs	r0, r6
 8004002:	6862      	ldr	r2, [r4, #4]
 8004004:	f000 f832 	bl	800406c <memchr>
 8004008:	2800      	cmp	r0, #0
 800400a:	d001      	beq.n	8004010 <_printf_i+0x1c8>
 800400c:	1b80      	subs	r0, r0, r6
 800400e:	6060      	str	r0, [r4, #4]
 8004010:	6863      	ldr	r3, [r4, #4]
 8004012:	6123      	str	r3, [r4, #16]
 8004014:	2300      	movs	r3, #0
 8004016:	9a04      	ldr	r2, [sp, #16]
 8004018:	7013      	strb	r3, [r2, #0]
 800401a:	e7bf      	b.n	8003f9c <_printf_i+0x154>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	0032      	movs	r2, r6
 8004020:	9906      	ldr	r1, [sp, #24]
 8004022:	9805      	ldr	r0, [sp, #20]
 8004024:	9d07      	ldr	r5, [sp, #28]
 8004026:	47a8      	blx	r5
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d0c1      	beq.n	8003fb0 <_printf_i+0x168>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	079b      	lsls	r3, r3, #30
 8004030:	d415      	bmi.n	800405e <_printf_i+0x216>
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	68e0      	ldr	r0, [r4, #12]
 8004036:	4298      	cmp	r0, r3
 8004038:	dabc      	bge.n	8003fb4 <_printf_i+0x16c>
 800403a:	0018      	movs	r0, r3
 800403c:	e7ba      	b.n	8003fb4 <_printf_i+0x16c>
 800403e:	0022      	movs	r2, r4
 8004040:	2301      	movs	r3, #1
 8004042:	9906      	ldr	r1, [sp, #24]
 8004044:	9805      	ldr	r0, [sp, #20]
 8004046:	9e07      	ldr	r6, [sp, #28]
 8004048:	3219      	adds	r2, #25
 800404a:	47b0      	blx	r6
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d0af      	beq.n	8003fb0 <_printf_i+0x168>
 8004050:	3501      	adds	r5, #1
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	42ab      	cmp	r3, r5
 800405a:	dcf0      	bgt.n	800403e <_printf_i+0x1f6>
 800405c:	e7e9      	b.n	8004032 <_printf_i+0x1ea>
 800405e:	2500      	movs	r5, #0
 8004060:	e7f7      	b.n	8004052 <_printf_i+0x20a>
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	080044e9 	.word	0x080044e9
 8004068:	080044fa 	.word	0x080044fa

0800406c <memchr>:
 800406c:	b2c9      	uxtb	r1, r1
 800406e:	1882      	adds	r2, r0, r2
 8004070:	4290      	cmp	r0, r2
 8004072:	d101      	bne.n	8004078 <memchr+0xc>
 8004074:	2000      	movs	r0, #0
 8004076:	4770      	bx	lr
 8004078:	7803      	ldrb	r3, [r0, #0]
 800407a:	428b      	cmp	r3, r1
 800407c:	d0fb      	beq.n	8004076 <memchr+0xa>
 800407e:	3001      	adds	r0, #1
 8004080:	e7f6      	b.n	8004070 <memchr+0x4>

08004082 <memcpy>:
 8004082:	2300      	movs	r3, #0
 8004084:	b510      	push	{r4, lr}
 8004086:	429a      	cmp	r2, r3
 8004088:	d100      	bne.n	800408c <memcpy+0xa>
 800408a:	bd10      	pop	{r4, pc}
 800408c:	5ccc      	ldrb	r4, [r1, r3]
 800408e:	54c4      	strb	r4, [r0, r3]
 8004090:	3301      	adds	r3, #1
 8004092:	e7f8      	b.n	8004086 <memcpy+0x4>

08004094 <memmove>:
 8004094:	b510      	push	{r4, lr}
 8004096:	4288      	cmp	r0, r1
 8004098:	d902      	bls.n	80040a0 <memmove+0xc>
 800409a:	188b      	adds	r3, r1, r2
 800409c:	4298      	cmp	r0, r3
 800409e:	d303      	bcc.n	80040a8 <memmove+0x14>
 80040a0:	2300      	movs	r3, #0
 80040a2:	e007      	b.n	80040b4 <memmove+0x20>
 80040a4:	5c8b      	ldrb	r3, [r1, r2]
 80040a6:	5483      	strb	r3, [r0, r2]
 80040a8:	3a01      	subs	r2, #1
 80040aa:	d2fb      	bcs.n	80040a4 <memmove+0x10>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	5ccc      	ldrb	r4, [r1, r3]
 80040b0:	54c4      	strb	r4, [r0, r3]
 80040b2:	3301      	adds	r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1fa      	bne.n	80040ae <memmove+0x1a>
 80040b8:	e7f8      	b.n	80040ac <memmove+0x18>
	...

080040bc <_free_r>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	0005      	movs	r5, r0
 80040c0:	2900      	cmp	r1, #0
 80040c2:	d010      	beq.n	80040e6 <_free_r+0x2a>
 80040c4:	1f0c      	subs	r4, r1, #4
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da00      	bge.n	80040ce <_free_r+0x12>
 80040cc:	18e4      	adds	r4, r4, r3
 80040ce:	0028      	movs	r0, r5
 80040d0:	f000 f8d4 	bl	800427c <__malloc_lock>
 80040d4:	4a1d      	ldr	r2, [pc, #116]	; (800414c <_free_r+0x90>)
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <_free_r+0x2c>
 80040dc:	6063      	str	r3, [r4, #4]
 80040de:	6014      	str	r4, [r2, #0]
 80040e0:	0028      	movs	r0, r5
 80040e2:	f000 f8d3 	bl	800428c <__malloc_unlock>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d908      	bls.n	80040fe <_free_r+0x42>
 80040ec:	6821      	ldr	r1, [r4, #0]
 80040ee:	1860      	adds	r0, r4, r1
 80040f0:	4283      	cmp	r3, r0
 80040f2:	d1f3      	bne.n	80040dc <_free_r+0x20>
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	1841      	adds	r1, r0, r1
 80040fa:	6021      	str	r1, [r4, #0]
 80040fc:	e7ee      	b.n	80040dc <_free_r+0x20>
 80040fe:	001a      	movs	r2, r3
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <_free_r+0x4e>
 8004106:	42a3      	cmp	r3, r4
 8004108:	d9f9      	bls.n	80040fe <_free_r+0x42>
 800410a:	6811      	ldr	r1, [r2, #0]
 800410c:	1850      	adds	r0, r2, r1
 800410e:	42a0      	cmp	r0, r4
 8004110:	d10b      	bne.n	800412a <_free_r+0x6e>
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	1809      	adds	r1, r1, r0
 8004116:	1850      	adds	r0, r2, r1
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	4283      	cmp	r3, r0
 800411c:	d1e0      	bne.n	80040e0 <_free_r+0x24>
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	1841      	adds	r1, r0, r1
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	6053      	str	r3, [r2, #4]
 8004128:	e7da      	b.n	80040e0 <_free_r+0x24>
 800412a:	42a0      	cmp	r0, r4
 800412c:	d902      	bls.n	8004134 <_free_r+0x78>
 800412e:	230c      	movs	r3, #12
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	e7d5      	b.n	80040e0 <_free_r+0x24>
 8004134:	6821      	ldr	r1, [r4, #0]
 8004136:	1860      	adds	r0, r4, r1
 8004138:	4283      	cmp	r3, r0
 800413a:	d103      	bne.n	8004144 <_free_r+0x88>
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	1841      	adds	r1, r0, r1
 8004142:	6021      	str	r1, [r4, #0]
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6054      	str	r4, [r2, #4]
 8004148:	e7ca      	b.n	80040e0 <_free_r+0x24>
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20000098 	.word	0x20000098

08004150 <_malloc_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	2303      	movs	r3, #3
 8004154:	1ccd      	adds	r5, r1, #3
 8004156:	439d      	bics	r5, r3
 8004158:	3508      	adds	r5, #8
 800415a:	0006      	movs	r6, r0
 800415c:	2d0c      	cmp	r5, #12
 800415e:	d21f      	bcs.n	80041a0 <_malloc_r+0x50>
 8004160:	250c      	movs	r5, #12
 8004162:	42a9      	cmp	r1, r5
 8004164:	d81e      	bhi.n	80041a4 <_malloc_r+0x54>
 8004166:	0030      	movs	r0, r6
 8004168:	f000 f888 	bl	800427c <__malloc_lock>
 800416c:	4925      	ldr	r1, [pc, #148]	; (8004204 <_malloc_r+0xb4>)
 800416e:	680a      	ldr	r2, [r1, #0]
 8004170:	0014      	movs	r4, r2
 8004172:	2c00      	cmp	r4, #0
 8004174:	d11a      	bne.n	80041ac <_malloc_r+0x5c>
 8004176:	4f24      	ldr	r7, [pc, #144]	; (8004208 <_malloc_r+0xb8>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <_malloc_r+0x38>
 800417e:	0021      	movs	r1, r4
 8004180:	0030      	movs	r0, r6
 8004182:	f000 f869 	bl	8004258 <_sbrk_r>
 8004186:	6038      	str	r0, [r7, #0]
 8004188:	0029      	movs	r1, r5
 800418a:	0030      	movs	r0, r6
 800418c:	f000 f864 	bl	8004258 <_sbrk_r>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d12b      	bne.n	80041ec <_malloc_r+0x9c>
 8004194:	230c      	movs	r3, #12
 8004196:	0030      	movs	r0, r6
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	f000 f877 	bl	800428c <__malloc_unlock>
 800419e:	e003      	b.n	80041a8 <_malloc_r+0x58>
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	dade      	bge.n	8004162 <_malloc_r+0x12>
 80041a4:	230c      	movs	r3, #12
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	2000      	movs	r0, #0
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	1b5b      	subs	r3, r3, r5
 80041b0:	d419      	bmi.n	80041e6 <_malloc_r+0x96>
 80041b2:	2b0b      	cmp	r3, #11
 80041b4:	d903      	bls.n	80041be <_malloc_r+0x6e>
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	18e4      	adds	r4, r4, r3
 80041ba:	6025      	str	r5, [r4, #0]
 80041bc:	e003      	b.n	80041c6 <_malloc_r+0x76>
 80041be:	6863      	ldr	r3, [r4, #4]
 80041c0:	42a2      	cmp	r2, r4
 80041c2:	d10e      	bne.n	80041e2 <_malloc_r+0x92>
 80041c4:	600b      	str	r3, [r1, #0]
 80041c6:	0030      	movs	r0, r6
 80041c8:	f000 f860 	bl	800428c <__malloc_unlock>
 80041cc:	0020      	movs	r0, r4
 80041ce:	2207      	movs	r2, #7
 80041d0:	300b      	adds	r0, #11
 80041d2:	1d23      	adds	r3, r4, #4
 80041d4:	4390      	bics	r0, r2
 80041d6:	1ac2      	subs	r2, r0, r3
 80041d8:	4298      	cmp	r0, r3
 80041da:	d0e6      	beq.n	80041aa <_malloc_r+0x5a>
 80041dc:	1a1b      	subs	r3, r3, r0
 80041de:	50a3      	str	r3, [r4, r2]
 80041e0:	e7e3      	b.n	80041aa <_malloc_r+0x5a>
 80041e2:	6053      	str	r3, [r2, #4]
 80041e4:	e7ef      	b.n	80041c6 <_malloc_r+0x76>
 80041e6:	0022      	movs	r2, r4
 80041e8:	6864      	ldr	r4, [r4, #4]
 80041ea:	e7c2      	b.n	8004172 <_malloc_r+0x22>
 80041ec:	2303      	movs	r3, #3
 80041ee:	1cc4      	adds	r4, r0, #3
 80041f0:	439c      	bics	r4, r3
 80041f2:	42a0      	cmp	r0, r4
 80041f4:	d0e1      	beq.n	80041ba <_malloc_r+0x6a>
 80041f6:	1a21      	subs	r1, r4, r0
 80041f8:	0030      	movs	r0, r6
 80041fa:	f000 f82d 	bl	8004258 <_sbrk_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d1db      	bne.n	80041ba <_malloc_r+0x6a>
 8004202:	e7c7      	b.n	8004194 <_malloc_r+0x44>
 8004204:	20000098 	.word	0x20000098
 8004208:	2000009c 	.word	0x2000009c

0800420c <_realloc_r>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	0007      	movs	r7, r0
 8004210:	000d      	movs	r5, r1
 8004212:	0016      	movs	r6, r2
 8004214:	2900      	cmp	r1, #0
 8004216:	d105      	bne.n	8004224 <_realloc_r+0x18>
 8004218:	0011      	movs	r1, r2
 800421a:	f7ff ff99 	bl	8004150 <_malloc_r>
 800421e:	0004      	movs	r4, r0
 8004220:	0020      	movs	r0, r4
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	2a00      	cmp	r2, #0
 8004226:	d103      	bne.n	8004230 <_realloc_r+0x24>
 8004228:	f7ff ff48 	bl	80040bc <_free_r>
 800422c:	0034      	movs	r4, r6
 800422e:	e7f7      	b.n	8004220 <_realloc_r+0x14>
 8004230:	f000 f834 	bl	800429c <_malloc_usable_size_r>
 8004234:	002c      	movs	r4, r5
 8004236:	42b0      	cmp	r0, r6
 8004238:	d2f2      	bcs.n	8004220 <_realloc_r+0x14>
 800423a:	0031      	movs	r1, r6
 800423c:	0038      	movs	r0, r7
 800423e:	f7ff ff87 	bl	8004150 <_malloc_r>
 8004242:	1e04      	subs	r4, r0, #0
 8004244:	d0ec      	beq.n	8004220 <_realloc_r+0x14>
 8004246:	0029      	movs	r1, r5
 8004248:	0032      	movs	r2, r6
 800424a:	f7ff ff1a 	bl	8004082 <memcpy>
 800424e:	0029      	movs	r1, r5
 8004250:	0038      	movs	r0, r7
 8004252:	f7ff ff33 	bl	80040bc <_free_r>
 8004256:	e7e3      	b.n	8004220 <_realloc_r+0x14>

08004258 <_sbrk_r>:
 8004258:	2300      	movs	r3, #0
 800425a:	b570      	push	{r4, r5, r6, lr}
 800425c:	4d06      	ldr	r5, [pc, #24]	; (8004278 <_sbrk_r+0x20>)
 800425e:	0004      	movs	r4, r0
 8004260:	0008      	movs	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fd f91a 	bl	800149c <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d103      	bne.n	8004274 <_sbrk_r+0x1c>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d000      	beq.n	8004274 <_sbrk_r+0x1c>
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	bd70      	pop	{r4, r5, r6, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	20000128 	.word	0x20000128

0800427c <__malloc_lock>:
 800427c:	b510      	push	{r4, lr}
 800427e:	4802      	ldr	r0, [pc, #8]	; (8004288 <__malloc_lock+0xc>)
 8004280:	f000 f814 	bl	80042ac <__retarget_lock_acquire_recursive>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000130 	.word	0x20000130

0800428c <__malloc_unlock>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4802      	ldr	r0, [pc, #8]	; (8004298 <__malloc_unlock+0xc>)
 8004290:	f000 f80d 	bl	80042ae <__retarget_lock_release_recursive>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	20000130 	.word	0x20000130

0800429c <_malloc_usable_size_r>:
 800429c:	1f0b      	subs	r3, r1, #4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1f18      	subs	r0, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da01      	bge.n	80042aa <_malloc_usable_size_r+0xe>
 80042a6:	580b      	ldr	r3, [r1, r0]
 80042a8:	18c0      	adds	r0, r0, r3
 80042aa:	4770      	bx	lr

080042ac <__retarget_lock_acquire_recursive>:
 80042ac:	4770      	bx	lr

080042ae <__retarget_lock_release_recursive>:
 80042ae:	4770      	bx	lr

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
