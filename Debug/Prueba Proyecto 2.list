
Prueba Proyecto 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e90  08002e90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002ea4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002ea4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006339  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f0  00000000  00000000  0002636d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00027760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00027e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000134f4  00000000  00000000  00028458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d91  00000000  00000000  0003b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078c03  00000000  00000000  000436dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc2e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001738  00000000  00000000  000bc334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d44 	.word	0x08002d44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d44 	.word	0x08002d44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <gameplay>:
/* USER CODE BEGIN 0 */



int gameplay()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
	int velocity = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]



	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	00da      	lsls	r2, r3, #3
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fe6f 	bl	8001194 <HAL_GPIO_ReadPin>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d017      	beq.n	80004ea <gameplay+0x4e>

	{
	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <gameplay+0x5c>)
 80004bc:	2108      	movs	r1, #8
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fe68 	bl	8001194 <HAL_GPIO_ReadPin>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d00d      	beq.n	80004e4 <gameplay+0x48>

	    {

	        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <gameplay+0x5c>)
 80004ca:	2120      	movs	r1, #32
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fe61 	bl	8001194 <HAL_GPIO_ReadPin>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d002      	beq.n	80004dc <gameplay+0x40>

	        {
	            velocity = 200;
 80004d6:	23c8      	movs	r3, #200	; 0xc8
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	e008      	b.n	80004ee <gameplay+0x52>

	        }
	        else
	        {
	        	velocity = 1000;
 80004dc:	23fa      	movs	r3, #250	; 0xfa
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	e004      	b.n	80004ee <gameplay+0x52>
	    }

	  else

	    {
	        velocity = 3000;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <gameplay+0x60>)
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e001      	b.n	80004ee <gameplay+0x52>
	}

	  else
	  {

		velocity = 5000;
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <gameplay+0x64>)
 80004ec:	607b      	str	r3, [r7, #4]
			break;
		}
	}*/


	return velocity;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	50000400 	.word	0x50000400
 80004fc:	00000bb8 	.word	0x00000bb8
 8000500:	00001388 	.word	0x00001388

08000504 <shoot>:

int shoot()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	int shoot = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
	//available shots
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <shoot+0x2c>)
 8000510:	2110      	movs	r1, #16
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fe3e 	bl	8001194 <HAL_GPIO_ReadPin>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d002      	beq.n	8000522 <shoot+0x1e>
		{
			shoot = 11;
 800051c:	230b      	movs	r3, #11
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e001      	b.n	8000526 <shoot+0x22>
		}
		else
		{
			shoot = 25;
 8000522:	2319      	movs	r3, #25
 8000524:	607b      	str	r3, [r7, #4]
		}

		return shoot;
 8000526:	687b      	ldr	r3, [r7, #4]

}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	50000400 	.word	0x50000400

08000534 <plate>:
void plate(int time, int rounds){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]

int i = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]


/*HAL_UART_Transmit(&huart2, "Tiro: ", 6 , HAL_MAX_DELAY);
HAL_UART_Transmit(&huart2, "Puntuacion: ", 12, HAL_MAX_DELAY);
*/
int cont = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
HAL_UART_Transmit(&huart2, "\r_\t_\t_\t_\t_\t_\t_\t*\t_\t_\t\n", 23, HAL_MAX_DELAY);
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	49b0      	ldr	r1, [pc, #704]	; (800080c <plate+0x2d8>)
 800054c:	48b0      	ldr	r0, [pc, #704]	; (8000810 <plate+0x2dc>)
 800054e:	2217      	movs	r2, #23
 8000550:	f001 fdfe 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r@", 2, HAL_MAX_DELAY);
 8000554:	2301      	movs	r3, #1
 8000556:	425b      	negs	r3, r3
 8000558:	49ae      	ldr	r1, [pc, #696]	; (8000814 <plate+0x2e0>)
 800055a:	48ad      	ldr	r0, [pc, #692]	; (8000810 <plate+0x2dc>)
 800055c:	2202      	movs	r2, #2
 800055e:	f001 fdf7 	bl	8002150 <HAL_UART_Transmit>
cont++;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	3301      	adds	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fbbc 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000570:	2301      	movs	r3, #1
 8000572:	425b      	negs	r3, r3
 8000574:	49a8      	ldr	r1, [pc, #672]	; (8000818 <plate+0x2e4>)
 8000576:	48a6      	ldr	r0, [pc, #664]	; (8000810 <plate+0x2dc>)
 8000578:	2201      	movs	r2, #1
 800057a:	f001 fde9 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, " ",  1, HAL_MAX_DELAY);
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	49a6      	ldr	r1, [pc, #664]	; (800081c <plate+0x2e8>)
 8000584:	48a2      	ldr	r0, [pc, #648]	; (8000810 <plate+0x2dc>)
 8000586:	2201      	movs	r2, #1
 8000588:	f001 fde2 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800058c:	2301      	movs	r3, #1
 800058e:	425b      	negs	r3, r3
 8000590:	49a1      	ldr	r1, [pc, #644]	; (8000818 <plate+0x2e4>)
 8000592:	489f      	ldr	r0, [pc, #636]	; (8000810 <plate+0x2dc>)
 8000594:	2201      	movs	r2, #1
 8000596:	f001 fddb 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t@",2, HAL_MAX_DELAY);
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	49a0      	ldr	r1, [pc, #640]	; (8000820 <plate+0x2ec>)
 80005a0:	489b      	ldr	r0, [pc, #620]	; (8000810 <plate+0x2dc>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	f001 fdd4 	bl	8002150 <HAL_UART_Transmit>
cont++;
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	3301      	adds	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fb99 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005b6:	2301      	movs	r3, #1
 80005b8:	425b      	negs	r3, r3
 80005ba:	4997      	ldr	r1, [pc, #604]	; (8000818 <plate+0x2e4>)
 80005bc:	4894      	ldr	r0, [pc, #592]	; (8000810 <plate+0x2dc>)
 80005be:	2201      	movs	r2, #1
 80005c0:	f001 fdc6 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t ", 2, HAL_MAX_DELAY);
 80005c4:	2301      	movs	r3, #1
 80005c6:	425b      	negs	r3, r3
 80005c8:	4996      	ldr	r1, [pc, #600]	; (8000824 <plate+0x2f0>)
 80005ca:	4891      	ldr	r0, [pc, #580]	; (8000810 <plate+0x2dc>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	f001 fdbf 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005d2:	2301      	movs	r3, #1
 80005d4:	425b      	negs	r3, r3
 80005d6:	4990      	ldr	r1, [pc, #576]	; (8000818 <plate+0x2e4>)
 80005d8:	488d      	ldr	r0, [pc, #564]	; (8000810 <plate+0x2dc>)
 80005da:	2201      	movs	r2, #1
 80005dc:	f001 fdb8 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t@", 3, HAL_MAX_DELAY);
 80005e0:	2301      	movs	r3, #1
 80005e2:	425b      	negs	r3, r3
 80005e4:	4990      	ldr	r1, [pc, #576]	; (8000828 <plate+0x2f4>)
 80005e6:	488a      	ldr	r0, [pc, #552]	; (8000810 <plate+0x2dc>)
 80005e8:	2203      	movs	r2, #3
 80005ea:	f001 fdb1 	bl	8002150 <HAL_UART_Transmit>
cont++;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fb76 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80005fc:	2301      	movs	r3, #1
 80005fe:	425b      	negs	r3, r3
 8000600:	4985      	ldr	r1, [pc, #532]	; (8000818 <plate+0x2e4>)
 8000602:	4883      	ldr	r0, [pc, #524]	; (8000810 <plate+0x2dc>)
 8000604:	2201      	movs	r2, #1
 8000606:	f001 fda3 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t ", 3, HAL_MAX_DELAY);
 800060a:	2301      	movs	r3, #1
 800060c:	425b      	negs	r3, r3
 800060e:	4987      	ldr	r1, [pc, #540]	; (800082c <plate+0x2f8>)
 8000610:	487f      	ldr	r0, [pc, #508]	; (8000810 <plate+0x2dc>)
 8000612:	2203      	movs	r2, #3
 8000614:	f001 fd9c 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000618:	2301      	movs	r3, #1
 800061a:	425b      	negs	r3, r3
 800061c:	497e      	ldr	r1, [pc, #504]	; (8000818 <plate+0x2e4>)
 800061e:	487c      	ldr	r0, [pc, #496]	; (8000810 <plate+0x2dc>)
 8000620:	2201      	movs	r2, #1
 8000622:	f001 fd95 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t@", 4, HAL_MAX_DELAY);
 8000626:	2301      	movs	r3, #1
 8000628:	425b      	negs	r3, r3
 800062a:	4981      	ldr	r1, [pc, #516]	; (8000830 <plate+0x2fc>)
 800062c:	4878      	ldr	r0, [pc, #480]	; (8000810 <plate+0x2dc>)
 800062e:	2204      	movs	r2, #4
 8000630:	f001 fd8e 	bl	8002150 <HAL_UART_Transmit>
cont++;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3301      	adds	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fb53 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000642:	2301      	movs	r3, #1
 8000644:	425b      	negs	r3, r3
 8000646:	4974      	ldr	r1, [pc, #464]	; (8000818 <plate+0x2e4>)
 8000648:	4871      	ldr	r0, [pc, #452]	; (8000810 <plate+0x2dc>)
 800064a:	2201      	movs	r2, #1
 800064c:	f001 fd80 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t ", 4, HAL_MAX_DELAY);
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	4977      	ldr	r1, [pc, #476]	; (8000834 <plate+0x300>)
 8000656:	486e      	ldr	r0, [pc, #440]	; (8000810 <plate+0x2dc>)
 8000658:	2204      	movs	r2, #4
 800065a:	f001 fd79 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800065e:	2301      	movs	r3, #1
 8000660:	425b      	negs	r3, r3
 8000662:	496d      	ldr	r1, [pc, #436]	; (8000818 <plate+0x2e4>)
 8000664:	486a      	ldr	r0, [pc, #424]	; (8000810 <plate+0x2dc>)
 8000666:	2201      	movs	r2, #1
 8000668:	f001 fd72 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t@",5, HAL_MAX_DELAY);
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	4971      	ldr	r1, [pc, #452]	; (8000838 <plate+0x304>)
 8000672:	4867      	ldr	r0, [pc, #412]	; (8000810 <plate+0x2dc>)
 8000674:	2205      	movs	r2, #5
 8000676:	f001 fd6b 	bl	8002150 <HAL_UART_Transmit>
cont++;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fb30 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000688:	2301      	movs	r3, #1
 800068a:	425b      	negs	r3, r3
 800068c:	4962      	ldr	r1, [pc, #392]	; (8000818 <plate+0x2e4>)
 800068e:	4860      	ldr	r0, [pc, #384]	; (8000810 <plate+0x2dc>)
 8000690:	2201      	movs	r2, #1
 8000692:	f001 fd5d 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t ", 5, HAL_MAX_DELAY);
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	4968      	ldr	r1, [pc, #416]	; (800083c <plate+0x308>)
 800069c:	485c      	ldr	r0, [pc, #368]	; (8000810 <plate+0x2dc>)
 800069e:	2205      	movs	r2, #5
 80006a0:	f001 fd56 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006a4:	2301      	movs	r3, #1
 80006a6:	425b      	negs	r3, r3
 80006a8:	495b      	ldr	r1, [pc, #364]	; (8000818 <plate+0x2e4>)
 80006aa:	4859      	ldr	r0, [pc, #356]	; (8000810 <plate+0x2dc>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	f001 fd4f 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t@", 6, HAL_MAX_DELAY);
 80006b2:	2301      	movs	r3, #1
 80006b4:	425b      	negs	r3, r3
 80006b6:	4962      	ldr	r1, [pc, #392]	; (8000840 <plate+0x30c>)
 80006b8:	4855      	ldr	r0, [pc, #340]	; (8000810 <plate+0x2dc>)
 80006ba:	2206      	movs	r2, #6
 80006bc:	f001 fd48 	bl	8002150 <HAL_UART_Transmit>
cont++;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fb0d 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006ce:	2301      	movs	r3, #1
 80006d0:	425b      	negs	r3, r3
 80006d2:	4951      	ldr	r1, [pc, #324]	; (8000818 <plate+0x2e4>)
 80006d4:	484e      	ldr	r0, [pc, #312]	; (8000810 <plate+0x2dc>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	f001 fd3a 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t ", 6, HAL_MAX_DELAY);
 80006dc:	2301      	movs	r3, #1
 80006de:	425b      	negs	r3, r3
 80006e0:	4958      	ldr	r1, [pc, #352]	; (8000844 <plate+0x310>)
 80006e2:	484b      	ldr	r0, [pc, #300]	; (8000810 <plate+0x2dc>)
 80006e4:	2206      	movs	r2, #6
 80006e6:	f001 fd33 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006ea:	2301      	movs	r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	494a      	ldr	r1, [pc, #296]	; (8000818 <plate+0x2e4>)
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <plate+0x2dc>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	f001 fd2c 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t@", 7, HAL_MAX_DELAY);
 80006f8:	2301      	movs	r3, #1
 80006fa:	425b      	negs	r3, r3
 80006fc:	4952      	ldr	r1, [pc, #328]	; (8000848 <plate+0x314>)
 80006fe:	4844      	ldr	r0, [pc, #272]	; (8000810 <plate+0x2dc>)
 8000700:	2207      	movs	r2, #7
 8000702:	f001 fd25 	bl	8002150 <HAL_UART_Transmit>
cont++;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	0018      	movs	r0, r3
 8000710:	f000 faea 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000714:	2301      	movs	r3, #1
 8000716:	425b      	negs	r3, r3
 8000718:	493f      	ldr	r1, [pc, #252]	; (8000818 <plate+0x2e4>)
 800071a:	483d      	ldr	r0, [pc, #244]	; (8000810 <plate+0x2dc>)
 800071c:	2201      	movs	r2, #1
 800071e:	f001 fd17 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t ", 7, HAL_MAX_DELAY);
 8000722:	2301      	movs	r3, #1
 8000724:	425b      	negs	r3, r3
 8000726:	4949      	ldr	r1, [pc, #292]	; (800084c <plate+0x318>)
 8000728:	4839      	ldr	r0, [pc, #228]	; (8000810 <plate+0x2dc>)
 800072a:	2207      	movs	r2, #7
 800072c:	f001 fd10 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000730:	2301      	movs	r3, #1
 8000732:	425b      	negs	r3, r3
 8000734:	4938      	ldr	r1, [pc, #224]	; (8000818 <plate+0x2e4>)
 8000736:	4836      	ldr	r0, [pc, #216]	; (8000810 <plate+0x2dc>)
 8000738:	2201      	movs	r2, #1
 800073a:	f001 fd09 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t@", 8, HAL_MAX_DELAY);
 800073e:	2301      	movs	r3, #1
 8000740:	425b      	negs	r3, r3
 8000742:	4943      	ldr	r1, [pc, #268]	; (8000850 <plate+0x31c>)
 8000744:	4832      	ldr	r0, [pc, #200]	; (8000810 <plate+0x2dc>)
 8000746:	2208      	movs	r2, #8
 8000748:	f001 fd02 	bl	8002150 <HAL_UART_Transmit>
cont++;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3301      	adds	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fac7 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800075a:	2301      	movs	r3, #1
 800075c:	425b      	negs	r3, r3
 800075e:	492e      	ldr	r1, [pc, #184]	; (8000818 <plate+0x2e4>)
 8000760:	482b      	ldr	r0, [pc, #172]	; (8000810 <plate+0x2dc>)
 8000762:	2201      	movs	r2, #1
 8000764:	f001 fcf4 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t ", 8, HAL_MAX_DELAY);
 8000768:	2301      	movs	r3, #1
 800076a:	425b      	negs	r3, r3
 800076c:	4939      	ldr	r1, [pc, #228]	; (8000854 <plate+0x320>)
 800076e:	4828      	ldr	r0, [pc, #160]	; (8000810 <plate+0x2dc>)
 8000770:	2208      	movs	r2, #8
 8000772:	f001 fced 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000776:	2301      	movs	r3, #1
 8000778:	425b      	negs	r3, r3
 800077a:	4927      	ldr	r1, [pc, #156]	; (8000818 <plate+0x2e4>)
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <plate+0x2dc>)
 800077e:	2201      	movs	r2, #1
 8000780:	f001 fce6 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t@", 9, HAL_MAX_DELAY);
 8000784:	2301      	movs	r3, #1
 8000786:	425b      	negs	r3, r3
 8000788:	4933      	ldr	r1, [pc, #204]	; (8000858 <plate+0x324>)
 800078a:	4821      	ldr	r0, [pc, #132]	; (8000810 <plate+0x2dc>)
 800078c:	2209      	movs	r2, #9
 800078e:	f001 fcdf 	bl	8002150 <HAL_UART_Transmit>
cont++;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	3301      	adds	r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	0018      	movs	r0, r3
 800079c:	f000 faa4 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007a0:	2301      	movs	r3, #1
 80007a2:	425b      	negs	r3, r3
 80007a4:	491c      	ldr	r1, [pc, #112]	; (8000818 <plate+0x2e4>)
 80007a6:	481a      	ldr	r0, [pc, #104]	; (8000810 <plate+0x2dc>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	f001 fcd1 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t ", 9, HAL_MAX_DELAY);
 80007ae:	2301      	movs	r3, #1
 80007b0:	425b      	negs	r3, r3
 80007b2:	492a      	ldr	r1, [pc, #168]	; (800085c <plate+0x328>)
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <plate+0x2dc>)
 80007b6:	2209      	movs	r2, #9
 80007b8:	f001 fcca 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007bc:	2301      	movs	r3, #1
 80007be:	425b      	negs	r3, r3
 80007c0:	4915      	ldr	r1, [pc, #84]	; (8000818 <plate+0x2e4>)
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <plate+0x2dc>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	f001 fcc3 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t@", 10, HAL_MAX_DELAY);
 80007ca:	2301      	movs	r3, #1
 80007cc:	425b      	negs	r3, r3
 80007ce:	4924      	ldr	r1, [pc, #144]	; (8000860 <plate+0x32c>)
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <plate+0x2dc>)
 80007d2:	220a      	movs	r2, #10
 80007d4:	f001 fcbc 	bl	8002150 <HAL_UART_Transmit>
cont++;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3301      	adds	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
HAL_Delay(time);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fa81 	bl	8000ce8 <HAL_Delay>
HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007e6:	2301      	movs	r3, #1
 80007e8:	425b      	negs	r3, r3
 80007ea:	490b      	ldr	r1, [pc, #44]	; (8000818 <plate+0x2e4>)
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <plate+0x2dc>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	f001 fcae 	bl	8002150 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t ", 10, HAL_MAX_DELAY);
 80007f4:	2301      	movs	r3, #1
 80007f6:	425b      	negs	r3, r3
 80007f8:	491a      	ldr	r1, [pc, #104]	; (8000864 <plate+0x330>)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <plate+0x2dc>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	f001 fca7 	bl	8002150 <HAL_UART_Transmit>
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	08002d5c 	.word	0x08002d5c
 8000810:	20000028 	.word	0x20000028
 8000814:	08002d74 	.word	0x08002d74
 8000818:	08002d78 	.word	0x08002d78
 800081c:	08002d7c 	.word	0x08002d7c
 8000820:	08002d80 	.word	0x08002d80
 8000824:	08002d84 	.word	0x08002d84
 8000828:	08002d88 	.word	0x08002d88
 800082c:	08002d8c 	.word	0x08002d8c
 8000830:	08002d90 	.word	0x08002d90
 8000834:	08002d98 	.word	0x08002d98
 8000838:	08002da0 	.word	0x08002da0
 800083c:	08002da8 	.word	0x08002da8
 8000840:	08002db0 	.word	0x08002db0
 8000844:	08002db8 	.word	0x08002db8
 8000848:	08002dc0 	.word	0x08002dc0
 800084c:	08002dc8 	.word	0x08002dc8
 8000850:	08002dd0 	.word	0x08002dd0
 8000854:	08002ddc 	.word	0x08002ddc
 8000858:	08002de8 	.word	0x08002de8
 800085c:	08002df4 	.word	0x08002df4
 8000860:	08002e00 	.word	0x08002e00
 8000864:	08002e0c 	.word	0x08002e0c

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 f9cb 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f825 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 f8bf 	bl	80009f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087a:	f000 f88d 	bl	8000998 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int velocity_1;
  int shoot_1;
  char num = "a";
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <main+0x50>)
 8000880:	240f      	movs	r4, #15
 8000882:	193b      	adds	r3, r7, r4
 8000884:	701a      	strb	r2, [r3, #0]

  velocity_1 = gameplay();
 8000886:	f7ff fe09 	bl	800049c <gameplay>
 800088a:	0003      	movs	r3, r0
 800088c:	60bb      	str	r3, [r7, #8]
  shoot_1 = shoot();
 800088e:	f7ff fe39 	bl	8000504 <shoot>
 8000892:	0003      	movs	r3, r0
 8000894:	607b      	str	r3, [r7, #4]

  HAL_UART_Receive(&huart2, num , 1, HAL_MAX_DELAY);
 8000896:	193b      	adds	r3, r7, r4
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	2301      	movs	r3, #1
 800089e:	425b      	negs	r3, r3
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <main+0x54>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	f001 fcfc 	bl	80022a0 <HAL_UART_Receive>

  plate(velocity_1,shoot_1);
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fe40 	bl	8000534 <plate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x4c>
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	08002e18 	.word	0x08002e18
 80008bc:	20000028 	.word	0x20000028

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b09f      	sub	sp, #124	; 0x7c
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	2440      	movs	r4, #64	; 0x40
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	0018      	movs	r0, r3
 80008cc:	2338      	movs	r3, #56	; 0x38
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f002 fa2f 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d6:	232c      	movs	r3, #44	; 0x2c
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f002 fa27 	bl	8002d34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2328      	movs	r3, #40	; 0x28
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f002 fa20 	bl	8002d34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <SystemClock_Config+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a26      	ldr	r2, [pc, #152]	; (8000994 <SystemClock_Config+0xd4>)
 80008fa:	401a      	ands	r2, r3
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <SystemClock_Config+0xd0>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0109      	lsls	r1, r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000906:	0021      	movs	r1, r4
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2210      	movs	r2, #16
 800090c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	22a0      	movs	r2, #160	; 0xa0
 800091e:	0212      	lsls	r2, r2, #8
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	187b      	adds	r3, r7, r1
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fc50 	bl	80011d0 <HAL_RCC_OscConfig>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000934:	f000 f8c4 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	212c      	movs	r1, #44	; 0x2c
 800093a:	187b      	adds	r3, r7, r1
 800093c:	220f      	movs	r2, #15
 800093e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2100      	movs	r1, #0
 800095c:	0018      	movs	r0, r3
 800095e:	f001 f80b 	bl	8001978 <HAL_RCC_ClockConfig>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000966:	f000 f8ab 	bl	8000ac0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2202      	movs	r2, #2
 800096e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fa21 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000982:	f000 f89d 	bl	8000ac0 <Error_Handler>
  }
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b01f      	add	sp, #124	; 0x7c
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40007000 	.word	0x40007000
 8000994:	ffffe7ff 	.word	0xffffe7ff

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	2296      	movs	r2, #150	; 0x96
 80009a6:	0192      	lsls	r2, r2, #6
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 fb63 	bl	80020a8 <HAL_UART_Init>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f86b 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000028 	.word	0x20000028
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	2414      	movs	r4, #20
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	0018      	movs	r0, r3
 8000a04:	2314      	movs	r3, #20
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f002 f993 	bl	8002d34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a14:	2104      	movs	r1, #4
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	430a      	orrs	r2, r1
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	2202      	movs	r2, #2
 8000a68:	4013      	ands	r3, r2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	00d2      	lsls	r2, r2, #3
 8000a74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	193a      	adds	r2, r7, r4
 8000a84:	23a0      	movs	r3, #160	; 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fa04 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2238      	movs	r2, #56	; 0x38
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <MX_GPIO_Init+0xc4>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 f9f5 	bl	8000e98 <HAL_GPIO_Init>

}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b00b      	add	sp, #44	; 0x2c
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	50000400 	.word	0x50000400

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_MspInit+0x24>)
 8000ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x24>)
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_MspInit+0x24>)
 8000ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_MspInit+0x24>)
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	0549      	lsls	r1, r1, #21
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	240c      	movs	r4, #12
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2314      	movs	r3, #20
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f002 f914 	bl	8002d34 <memset>
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d129      	bne.n	8000b6a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0289      	lsls	r1, r1, #10
 8000b20:	430a      	orrs	r2, r1
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	2201      	movs	r2, #1
 8000b36:	4013      	ands	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	220c      	movs	r2, #12
 8000b42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2202      	movs	r2, #2
 8000b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2203      	movs	r2, #3
 8000b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2204      	movs	r2, #4
 8000b5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	187a      	adds	r2, r7, r1
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 f997 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b009      	add	sp, #36	; 0x24
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f886 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bde:	f7ff ffe4 	bl	8000baa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f002 f883 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fe3f 	bl	8000868 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
   ldr   r0, =_estack
 8000bec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	08002e98 	.word	0x08002e98
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	200000b0 	.word	0x200000b0

08000c04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_COMP_IRQHandler>
	...

08000c08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x3c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Init+0x3c>)
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f811 	bl	8000c48 <HAL_InitTick>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e001      	b.n	8000c36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c32:	f7ff ff4b 	bl	8000acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c52:	681c      	ldr	r4, [r3, #0]
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_InitTick+0x60>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	0019      	movs	r1, r3
 8000c5a:	23fa      	movs	r3, #250	; 0xfa
 8000c5c:	0098      	lsls	r0, r3, #2
 8000c5e:	f7ff fa53 	bl	8000108 <__udivsi3>
 8000c62:	0003      	movs	r3, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff fa4e 	bl	8000108 <__udivsi3>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f905 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e00f      	b.n	8000c9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d80b      	bhi.n	8000c9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f8e2 	bl	8000e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_InitTick+0x64>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	001a      	movs	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	18d2      	adds	r2, r2, r3
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	200000ac 	.word	0x200000ac

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	200000ac 	.word	0x200000ac

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff fff0 	bl	8000cd4 <HAL_GetTick>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	001a      	movs	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	189b      	adds	r3, r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	f7ff ffe0 	bl	8000cd4 <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7f      	cmp	r3, #127	; 0x7f
 8000d44:	d828      	bhi.n	8000d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	33c0      	adds	r3, #192	; 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	589b      	ldr	r3, [r3, r2]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	481f      	ldr	r0, [pc, #124]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	33c0      	adds	r3, #192	; 0xc0
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e031      	b.n	8000dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	400b      	ands	r3, r1
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3306      	adds	r3, #6
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	; 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	001c      	movs	r4, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18c3      	adds	r3, r0, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	045b      	lsls	r3, r3, #17
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d301      	bcc.n	8000e24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e20:	2301      	movs	r3, #1
 8000e22:	e010      	b.n	8000e46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SysTick_Config+0x44>)
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	2103      	movs	r1, #3
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff ff7c 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x44>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x44>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ffbf 	bl	8000e0c <SysTick_Config>
 8000e8e:	0003      	movs	r3, r0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eae:	e155      	b.n	800115c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <HAL_GPIO_Init+0x30>
 8000ec6:	e146      	b.n	8001156 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d00b      	beq.n	8000ee8 <HAL_GPIO_Init+0x50>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000edc:	2b11      	cmp	r3, #17
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0xf2>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d123      	bne.n	8000fd2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	58d3      	ldr	r3, [r2, r3]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691a      	ldr	r2, [r3, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	6939      	ldr	r1, [r7, #16]
 8000fd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2203      	movs	r2, #3
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	055b      	lsls	r3, r3, #21
 800100e:	4013      	ands	r3, r2
 8001010:	d100      	bne.n	8001014 <HAL_GPIO_Init+0x17c>
 8001012:	e0a0      	b.n	8001156 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_GPIO_Init+0x2dc>)
 8001016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001018:	4b56      	ldr	r3, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x2dc>)
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001020:	4a55      	ldr	r2, [pc, #340]	; (8001178 <HAL_GPIO_Init+0x2e0>)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	589b      	ldr	r3, [r3, r2]
 800102c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2203      	movs	r2, #3
 8001032:	4013      	ands	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	409a      	lsls	r2, r3
 800103a:	0013      	movs	r3, r2
 800103c:	43da      	mvns	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	23a0      	movs	r3, #160	; 0xa0
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	429a      	cmp	r2, r3
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x1f6>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_GPIO_Init+0x2e4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x1f2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1ee>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1ea>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a47      	ldr	r2, [pc, #284]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1e6>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_GPIO_Init+0x2f4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1e2>
 8001076:	2305      	movs	r3, #5
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x1f8>
 800107a:	2306      	movs	r3, #6
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x1f8>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x1f8>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x1f8>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x1f8>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x1f8>
 800108e:	2300      	movs	r3, #0
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	2103      	movs	r1, #3
 8001094:	400a      	ands	r2, r1
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x2e0>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ae:	4b38      	ldr	r3, [pc, #224]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4013      	ands	r3, r2
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	035b      	lsls	r3, r3, #13
 800111a:	4013      	ands	r3, r2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	039b      	lsls	r3, r3, #14
 8001144:	4013      	ands	r3, r2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	40da      	lsrs	r2, r3
 8001164:	1e13      	subs	r3, r2, #0
 8001166:	d000      	beq.n	800116a <HAL_GPIO_Init+0x2d2>
 8001168:	e6a2      	b.n	8000eb0 <HAL_GPIO_Init+0x18>
  }
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b006      	add	sp, #24
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	50000400 	.word	0x50000400
 8001180:	50000800 	.word	0x50000800
 8001184:	50000c00 	.word	0x50000c00
 8001188:	50001000 	.word	0x50001000
 800118c:	50001c00 	.word	0x50001c00
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	000a      	movs	r2, r1
 800119e:	1cbb      	adds	r3, r7, #2
 80011a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	1cba      	adds	r2, r7, #2
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	d004      	beq.n	80011b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011ae:	230f      	movs	r3, #15
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e003      	b.n	80011c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f000 fbbf 	bl	8001962 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e4:	4bc9      	ldr	r3, [pc, #804]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	220c      	movs	r2, #12
 80011ea:	4013      	ands	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ee:	4bc7      	ldr	r3, [pc, #796]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2201      	movs	r2, #1
 8001200:	4013      	ands	r3, r2
 8001202:	d100      	bne.n	8001206 <HAL_RCC_OscConfig+0x36>
 8001204:	e07e      	b.n	8001304 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	2b08      	cmp	r3, #8
 800120a:	d007      	beq.n	800121c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x68>
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	429a      	cmp	r2, r3
 800121a:	d10d      	bne.n	8001238 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4bbb      	ldr	r3, [pc, #748]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d100      	bne.n	800122a <HAL_RCC_OscConfig+0x5a>
 8001228:	e06b      	b.n	8001302 <HAL_RCC_OscConfig+0x132>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d167      	bne.n	8001302 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	f000 fb95 	bl	8001962 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	429a      	cmp	r2, r3
 8001242:	d107      	bne.n	8001254 <HAL_RCC_OscConfig+0x84>
 8001244:	4bb1      	ldr	r3, [pc, #708]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4bb0      	ldr	r3, [pc, #704]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	0249      	lsls	r1, r1, #9
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e027      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	02db      	lsls	r3, r3, #11
 800125c:	429a      	cmp	r2, r3
 800125e:	d10e      	bne.n	800127e <HAL_RCC_OscConfig+0xae>
 8001260:	4baa      	ldr	r3, [pc, #680]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4ba9      	ldr	r3, [pc, #676]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	02c9      	lsls	r1, r1, #11
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	4ba7      	ldr	r3, [pc, #668]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4ba6      	ldr	r3, [pc, #664]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0249      	lsls	r1, r1, #9
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e012      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 800127e:	4ba3      	ldr	r3, [pc, #652]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4ba2      	ldr	r3, [pc, #648]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001284:	49a2      	ldr	r1, [pc, #648]	; (8001510 <HAL_RCC_OscConfig+0x340>)
 8001286:	400a      	ands	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	4ba0      	ldr	r3, [pc, #640]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4b9c      	ldr	r3, [pc, #624]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b9b      	ldr	r3, [pc, #620]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800129e:	499d      	ldr	r1, [pc, #628]	; (8001514 <HAL_RCC_OscConfig+0x344>)
 80012a0:	400a      	ands	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d015      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fd12 	bl	8000cd4 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b4:	e009      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff fd0d 	bl	8000cd4 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d902      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f000 fb4c 	bl	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ca:	4b90      	ldr	r3, [pc, #576]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	029b      	lsls	r3, r3, #10
 80012d2:	4013      	ands	r3, r2
 80012d4:	d0ef      	beq.n	80012b6 <HAL_RCC_OscConfig+0xe6>
 80012d6:	e015      	b.n	8001304 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcfc 	bl	8000cd4 <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff fcf7 	bl	8000cd4 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e336      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f4:	4b85      	ldr	r3, [pc, #532]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x112>
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2202      	movs	r2, #2
 800130a:	4013      	ands	r3, r2
 800130c:	d100      	bne.n	8001310 <HAL_RCC_OscConfig+0x140>
 800130e:	e099      	b.n	8001444 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	2220      	movs	r2, #32
 800131a:	4013      	ands	r3, r2
 800131c:	d009      	beq.n	8001332 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001324:	2120      	movs	r1, #32
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	2220      	movs	r2, #32
 800132e:	4393      	bics	r3, r2
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0c      	cmp	r3, #12
 800133c:	d13e      	bne.n	80013bc <HAL_RCC_OscConfig+0x1ec>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d13b      	bne.n	80013bc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001344:	4b71      	ldr	r3, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2204      	movs	r2, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d004      	beq.n	8001358 <HAL_RCC_OscConfig+0x188>
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e304      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b6c      	ldr	r3, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x348>)
 800135e:	4013      	ands	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	021a      	lsls	r2, r3, #8
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800136e:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2209      	movs	r2, #9
 8001374:	4393      	bics	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	4b64      	ldr	r3, [pc, #400]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800137a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001380:	f000 fc42 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001384:	0001      	movs	r1, r0
 8001386:	4b61      	ldr	r3, [pc, #388]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	220f      	movs	r2, #15
 800138e:	4013      	ands	r3, r2
 8001390:	4a62      	ldr	r2, [pc, #392]	; (800151c <HAL_RCC_OscConfig+0x34c>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	000a      	movs	r2, r1
 8001396:	40da      	lsrs	r2, r3
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <HAL_RCC_OscConfig+0x350>)
 800139a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800139c:	4b61      	ldr	r3, [pc, #388]	; (8001524 <HAL_RCC_OscConfig+0x354>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2513      	movs	r5, #19
 80013a2:	197c      	adds	r4, r7, r5
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fc4f 	bl	8000c48 <HAL_InitTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013ae:	197b      	adds	r3, r7, r5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d046      	beq.n	8001444 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	e2d2      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d027      	beq.n	8001412 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013c2:	4b52      	ldr	r3, [pc, #328]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2209      	movs	r2, #9
 80013c8:	4393      	bics	r3, r2
 80013ca:	0019      	movs	r1, r3
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc7e 	bl	8000cd4 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fc79 	bl	8000cd4 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2b8      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2204      	movs	r2, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d0f1      	beq.n	80013de <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x348>)
 8001400:	4013      	ands	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	021a      	lsls	r2, r3, #8
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001418:	2101      	movs	r1, #1
 800141a:	438a      	bics	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fc59 	bl	8000cd4 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff fc54 	bl	8000cd4 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e293      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2204      	movs	r2, #4
 8001440:	4013      	ands	r3, r2
 8001442:	d1f1      	bne.n	8001428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2210      	movs	r2, #16
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
 800144e:	e0a2      	b.n	8001596 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d140      	bne.n	80014d8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x29e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e279      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_RCC_OscConfig+0x358>)
 8001474:	4013      	ands	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 800147e:	430a      	orrs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	0a19      	lsrs	r1, r3, #8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	061a      	lsls	r2, r3, #24
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	0b5b      	lsrs	r3, r3, #13
 800149c:	3301      	adds	r3, #1
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	0212      	lsls	r2, r2, #8
 80014a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	210f      	movs	r1, #15
 80014ac:	400b      	ands	r3, r1
 80014ae:	491b      	ldr	r1, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x34c>)
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_RCC_OscConfig+0x350>)
 80014b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x354>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2513      	movs	r5, #19
 80014be:	197c      	adds	r4, r7, r5
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fbc1 	bl	8000c48 <HAL_InitTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014ca:	197b      	adds	r3, r7, r5
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d061      	beq.n	8001596 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80014d2:	197b      	adds	r3, r7, r5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	e244      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d040      	beq.n	8001562 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x33c>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0049      	lsls	r1, r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fbf1 	bl	8000cd4 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014f6:	e019      	b.n	800152c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f8:	f7ff fbec 	bl	8000cd4 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d912      	bls.n	800152c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e22b      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	40021000 	.word	0x40021000
 8001510:	fffeffff 	.word	0xfffeffff
 8001514:	fffbffff 	.word	0xfffbffff
 8001518:	ffffe0ff 	.word	0xffffe0ff
 800151c:	08002e1c 	.word	0x08002e1c
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004
 8001528:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800152c:	4bca      	ldr	r3, [pc, #808]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0df      	beq.n	80014f8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001538:	4bc7      	ldr	r3, [pc, #796]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4ac7      	ldr	r2, [pc, #796]	; (800185c <HAL_RCC_OscConfig+0x68c>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001546:	4bc4      	ldr	r3, [pc, #784]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	4bc2      	ldr	r3, [pc, #776]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	0a19      	lsrs	r1, r3, #8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	061a      	lsls	r2, r3, #24
 800155a:	4bbf      	ldr	r3, [pc, #764]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	e019      	b.n	8001596 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001562:	4bbd      	ldr	r3, [pc, #756]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4bbc      	ldr	r3, [pc, #752]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001568:	49bd      	ldr	r1, [pc, #756]	; (8001860 <HAL_RCC_OscConfig+0x690>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fbb1 	bl	8000cd4 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001578:	f7ff fbac 	bl	8000cd4 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1eb      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800158a:	4bb3      	ldr	r3, [pc, #716]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2208      	movs	r2, #8
 800159c:	4013      	ands	r3, r2
 800159e:	d036      	beq.n	800160e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d019      	beq.n	80015dc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	4bab      	ldr	r3, [pc, #684]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80015aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ac:	4baa      	ldr	r3, [pc, #680]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb8e 	bl	8000cd4 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fb89 	bl	8000cd4 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1c8      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d0:	4ba1      	ldr	r3, [pc, #644]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80015d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f1      	beq.n	80015be <HAL_RCC_OscConfig+0x3ee>
 80015da:	e018      	b.n	800160e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80015de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e0:	4b9d      	ldr	r3, [pc, #628]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	438a      	bics	r2, r1
 80015e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb74 	bl	8000cd4 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fb6f 	bl	8000cd4 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1ae      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001604:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d1f1      	bne.n	80015f2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2204      	movs	r2, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x44a>
 8001618:	e0ae      	b.n	8001778 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2023      	movs	r0, #35	; 0x23
 800161c:	183b      	adds	r3, r7, r0
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b8d      	ldr	r3, [pc, #564]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	055b      	lsls	r3, r3, #21
 800162a:	4013      	ands	r3, r2
 800162c:	d109      	bne.n	8001642 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b8a      	ldr	r3, [pc, #552]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	0549      	lsls	r1, r1, #21
 8001638:	430a      	orrs	r2, r1
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800163c:	183b      	adds	r3, r7, r0
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x694>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4013      	ands	r3, r2
 800164c:	d11a      	bne.n	8001684 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x694>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x694>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0049      	lsls	r1, r1, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165c:	f7ff fb3a 	bl	8000cd4 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fb35 	bl	8000cd4 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e174      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x694>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	429a      	cmp	r2, r3
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4d0>
 8001690:	4b71      	ldr	r3, [pc, #452]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0049      	lsls	r1, r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
 800169e:	e031      	b.n	8001704 <HAL_RCC_OscConfig+0x534>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4f2>
 80016a8:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016ae:	496c      	ldr	r1, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x690>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016ba:	496b      	ldr	r1, [pc, #428]	; (8001868 <HAL_RCC_OscConfig+0x698>)
 80016bc:	400a      	ands	r2, r1
 80016be:	651a      	str	r2, [r3, #80]	; 0x50
 80016c0:	e020      	b.n	8001704 <HAL_RCC_OscConfig+0x534>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	23a0      	movs	r3, #160	; 0xa0
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10e      	bne.n	80016ec <HAL_RCC_OscConfig+0x51c>
 80016ce:	4b62      	ldr	r3, [pc, #392]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d2:	4b61      	ldr	r3, [pc, #388]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	00c9      	lsls	r1, r1, #3
 80016d8:	430a      	orrs	r2, r1
 80016da:	651a      	str	r2, [r3, #80]	; 0x50
 80016dc:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0049      	lsls	r1, r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x534>
 80016ec:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016f2:	495b      	ldr	r1, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x690>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	651a      	str	r2, [r3, #80]	; 0x50
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fc:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80016fe:	495a      	ldr	r1, [pc, #360]	; (8001868 <HAL_RCC_OscConfig+0x698>)
 8001700:	400a      	ands	r2, r1
 8001702:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fae2 	bl	8000cd4 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff fadd 	bl	8000cd4 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_OscConfig+0x69c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e11b      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800172a:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800172c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d0ef      	beq.n	8001716 <HAL_RCC_OscConfig+0x546>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff facc 	bl	8000cd4 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001740:	e009      	b.n	8001756 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fac7 	bl	8000cd4 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_RCC_OscConfig+0x69c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e105      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d1ef      	bne.n	8001742 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001762:	2323      	movs	r3, #35	; 0x23
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800176e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001772:	493f      	ldr	r1, [pc, #252]	; (8001870 <HAL_RCC_OscConfig+0x6a0>)
 8001774:	400a      	ands	r2, r1
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2220      	movs	r2, #32
 800177e:	4013      	ands	r3, r2
 8001780:	d049      	beq.n	8001816 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d026      	beq.n	80017d8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001790:	2101      	movs	r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_OscConfig+0x6a4>)
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_RCC_OscConfig+0x6a4>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0189      	lsls	r1, r1, #6
 80017ac:	430a      	orrs	r2, r1
 80017ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa90 	bl	8000cd4 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ba:	f7ff fa8b 	bl	8000cd4 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0ca      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d0f1      	beq.n	80017ba <HAL_RCC_OscConfig+0x5ea>
 80017d6:	e01e      	b.n	8001816 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <HAL_RCC_OscConfig+0x6a4>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_OscConfig+0x6a4>)
 80017ea:	4923      	ldr	r1, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0x6a8>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa70 	bl	8000cd4 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fa:	f7ff fa6b 	bl	8000cd4 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0aa      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_RCC_OscConfig+0x650>
 800181e:	e09f      	b.n	8001960 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d100      	bne.n	8001828 <HAL_RCC_OscConfig+0x658>
 8001826:	e078      	b.n	800191a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	2b02      	cmp	r3, #2
 800182e:	d159      	bne.n	80018e4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_RCC_OscConfig+0x688>)
 8001836:	4911      	ldr	r1, [pc, #68]	; (800187c <HAL_RCC_OscConfig+0x6ac>)
 8001838:	400a      	ands	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fa4a 	bl	8000cd4 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fa45 	bl	8000cd4 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d915      	bls.n	8001880 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e084      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
 8001858:	40021000 	.word	0x40021000
 800185c:	ffff1fff 	.word	0xffff1fff
 8001860:	fffffeff 	.word	0xfffffeff
 8001864:	40007000 	.word	0x40007000
 8001868:	fffffbff 	.word	0xfffffbff
 800186c:	00001388 	.word	0x00001388
 8001870:	efffffff 	.word	0xefffffff
 8001874:	40010000 	.word	0x40010000
 8001878:	ffffdfff 	.word	0xffffdfff
 800187c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	049b      	lsls	r3, r3, #18
 8001888:	4013      	ands	r3, r2
 800188a:	d1dc      	bne.n	8001846 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a37      	ldr	r2, [pc, #220]	; (8001970 <HAL_RCC_OscConfig+0x7a0>)
 8001892:	4013      	ands	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	431a      	orrs	r2, r3
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0449      	lsls	r1, r1, #17
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fa0b 	bl	8000cd4 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fa06 	bl	8000cd4 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e045      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x6f4>
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 80018ea:	4922      	ldr	r1, [pc, #136]	; (8001974 <HAL_RCC_OscConfig+0x7a4>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff f9f0 	bl	8000cd4 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f9eb 	bl	8000cd4 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e02a      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	4013      	ands	r3, r2
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x72a>
 8001918:	e022      	b.n	8001960 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e01d      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_RCC_OscConfig+0x79c>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	025b      	lsls	r3, r3, #9
 8001932:	401a      	ands	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	429a      	cmp	r2, r3
 800193a:	d10f      	bne.n	800195c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	23f0      	movs	r3, #240	; 0xf0
 8001940:	039b      	lsls	r3, r3, #14
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	23c0      	movs	r3, #192	; 0xc0
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b00a      	add	sp, #40	; 0x28
 8001968:	bdb0      	pop	{r4, r5, r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	ff02ffff 	.word	0xff02ffff
 8001974:	feffffff 	.word	0xfeffffff

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e128      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b96      	ldr	r3, [pc, #600]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d91e      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b93      	ldr	r3, [pc, #588]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4393      	bics	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	4b90      	ldr	r3, [pc, #576]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019ac:	f7ff f992 	bl	8000cd4 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b4:	e009      	b.n	80019ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7ff f98d 	bl	8000cd4 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a8a      	ldr	r2, [pc, #552]	; (8001bec <HAL_RCC_ClockConfig+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e109      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1ee      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e2:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	22f0      	movs	r2, #240	; 0xf0
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d100      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
 8001a00:	e089      	b.n	8001b16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a0a:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	029b      	lsls	r3, r3, #10
 8001a12:	4013      	ands	r3, r2
 8001a14:	d120      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0e1      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	049b      	lsls	r3, r3, #18
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d114      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0d5      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4013      	ands	r3, r2
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0ca      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0c2      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4393      	bics	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6c:	f7ff f932 	bl	8000cd4 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d111      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff f929 	bl	8000cd4 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_RCC_ClockConfig+0x274>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0a5      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x106>
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aaa:	f7ff f913 	bl	8000cd4 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x274>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e08f      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_ClockConfig+0x132>
 8001aca:	e024      	b.n	8001b16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d11b      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad6:	f7ff f8fd 	bl	8000cd4 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a42      	ldr	r2, [pc, #264]	; (8001bec <HAL_RCC_ClockConfig+0x274>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e079      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	220c      	movs	r2, #12
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d1ef      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x15e>
 8001af6:	e00e      	b.n	8001b16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff f8ec 	bl	8000cd4 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <HAL_RCC_ClockConfig+0x274>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e068      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	220c      	movs	r2, #12
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d21e      	bcs.n	8001b62 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b36:	f7ff f8cd 	bl	8000cd4 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff f8c8 	bl	8000cd4 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_RCC_ClockConfig+0x274>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e044      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_ClockConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d1ee      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2204      	movs	r2, #4
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x27c>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2208      	movs	r2, #8
 8001b86:	4013      	ands	r3, r2
 8001b88:	d00a      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_RCC_ClockConfig+0x280>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	00da      	lsls	r2, r3, #3
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba0:	f000 f832 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001ba4:	0001      	movs	r1, r0
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	220f      	movs	r2, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x284>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	000a      	movs	r2, r1
 8001bb6:	40da      	lsrs	r2, r3
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_RCC_ClockConfig+0x288>)
 8001bba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_RCC_ClockConfig+0x28c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	250b      	movs	r5, #11
 8001bc2:	197c      	adds	r4, r7, r5
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff f83f 	bl	8000c48 <HAL_InitTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bce:	197b      	adds	r3, r7, r5
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bd6:	197b      	adds	r3, r7, r5
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	e000      	b.n	8001bde <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b004      	add	sp, #16
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40022000 	.word	0x40022000
 8001bec:	00001388 	.word	0x00001388
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	fffff8ff 	.word	0xfffff8ff
 8001bf8:	ffffc7ff 	.word	0xffffc7ff
 8001bfc:	08002e1c 	.word	0x08002e1c
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b08e      	sub	sp, #56	; 0x38
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	230c      	movs	r3, #12
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d014      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1e:	d900      	bls.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c20:	e07b      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x112>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x24>
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e076      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c2c:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2210      	movs	r2, #16
 8001c32:	4013      	ands	r3, r2
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c3a:	e07c      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c40:	e079      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c46:	e076      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	0c9a      	lsrs	r2, r3, #18
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	401a      	ands	r2, r3
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	0d9a      	lsrs	r2, r3, #22
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	3301      	adds	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d01a      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	4a35      	ldr	r2, [pc, #212]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	69b8      	ldr	r0, [r7, #24]
 8001c7c:	69f9      	ldr	r1, [r7, #28]
 8001c7e:	f7fe faef 	bl	8000260 <__aeabi_lmul>
 8001c82:	0002      	movs	r2, r0
 8001c84:	000b      	movs	r3, r1
 8001c86:	0010      	movs	r0, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f7fe fac3 	bl	8000220 <__aeabi_uldivmod>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	000b      	movs	r3, r1
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca2:	e037      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d01a      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	68b8      	ldr	r0, [r7, #8]
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	f7fe facf 	bl	8000260 <__aeabi_lmul>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	000b      	movs	r3, r1
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f7fe faa3 	bl	8000220 <__aeabi_uldivmod>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	000b      	movs	r3, r1
 8001cde:	0013      	movs	r3, r2
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce2:	e017      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	0019      	movs	r1, r3
 8001cec:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f7fe fab6 	bl	8000260 <__aeabi_lmul>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	000b      	movs	r3, r1
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	001c      	movs	r4, r3
 8001d00:	2300      	movs	r3, #0
 8001d02:	001d      	movs	r5, r3
 8001d04:	0022      	movs	r2, r4
 8001d06:	002b      	movs	r3, r5
 8001d08:	f7fe fa8a 	bl	8000220 <__aeabi_uldivmod>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	000b      	movs	r3, r1
 8001d10:	0013      	movs	r3, r2
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d18:	e00d      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	0b5b      	lsrs	r3, r3, #13
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	0212      	lsls	r2, r2, #8
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b00e      	add	sp, #56	; 0x38
 8001d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	003d0900 	.word	0x003d0900
 8001d48:	00f42400 	.word	0x00f42400
 8001d4c:	007a1200 	.word	0x007a1200
 8001d50:	08002e34 	.word	0x08002e34

08001d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	20000000 	.word	0x20000000

08001d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d6c:	f7ff fff2 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d70:	0001      	movs	r1, r0
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	2207      	movs	r2, #7
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	000b      	movs	r3, r1
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08002e2c 	.word	0x08002e2c

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffdc 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	0adb      	lsrs	r3, r3, #11
 8001da4:	2207      	movs	r2, #7
 8001da6:	4013      	ands	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	40d9      	lsrs	r1, r3
 8001dae:	000b      	movs	r3, r1
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08002e2c 	.word	0x08002e2c

08001dc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2317      	movs	r3, #23
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d100      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001de6:	e0d9      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de8:	4ba4      	ldr	r3, [pc, #656]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	055b      	lsls	r3, r3, #21
 8001df0:	4013      	ands	r3, r2
 8001df2:	d10a      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	4ba1      	ldr	r3, [pc, #644]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df8:	4ba0      	ldr	r3, [pc, #640]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	0549      	lsls	r1, r1, #21
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e02:	2317      	movs	r3, #23
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b9d      	ldr	r3, [pc, #628]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d11a      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4b9a      	ldr	r3, [pc, #616]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b99      	ldr	r3, [pc, #612]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	0049      	lsls	r1, r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7fe ff56 	bl	8000cd4 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe ff51 	bl	8000cd4 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	; 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e118      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	4b8f      	ldr	r3, [pc, #572]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e4c:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	23c0      	movs	r3, #192	; 0xc0
 8001e52:	039b      	lsls	r3, r3, #14
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	039b      	lsls	r3, r3, #14
 8001e60:	4013      	ands	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d107      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	039b      	lsls	r3, r3, #14
 8001e70:	4013      	ands	r3, r2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	401a      	ands	r2, r3
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10a      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	401a      	ands	r2, r3
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0e8      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ea0:	4b76      	ldr	r3, [pc, #472]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea4:	23c0      	movs	r3, #192	; 0xc0
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d049      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	4013      	ands	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d004      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	23c0      	movs	r3, #192	; 0xc0
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d034      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d02e      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ee8:	4b64      	ldr	r3, [pc, #400]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eec:	4a65      	ldr	r2, [pc, #404]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef2:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef6:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	0309      	lsls	r1, r1, #12
 8001efc:	430a      	orrs	r2, r1
 8001efe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f04:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f06:	4960      	ldr	r1, [pc, #384]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d014      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe feda 	bl	8000cd4 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f24:	e009      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fed5 	bl	8000cd4 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a56      	ldr	r2, [pc, #344]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e09b      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0ef      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	23c0      	movs	r3, #192	; 0xc0
 8001f4c:	029b      	lsls	r3, r3, #10
 8001f4e:	401a      	ands	r2, r3
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	23c0      	movs	r3, #192	; 0xc0
 8001f68:	039b      	lsls	r3, r3, #14
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	401a      	ands	r2, r3
 8001f80:	4b3e      	ldr	r3, [pc, #248]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f86:	2317      	movs	r3, #23
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f94:	4b39      	ldr	r3, [pc, #228]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f96:	493f      	ldr	r1, [pc, #252]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa6:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	2203      	movs	r2, #3
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	220c      	movs	r2, #12
 8001fca:	4393      	bics	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002010:	430a      	orrs	r2, r1
 8002012:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d009      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002026:	4013      	ands	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002030:	430a      	orrs	r2, r1
 8002032:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	4013      	ands	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800204e:	430a      	orrs	r2, r1
 8002050:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1a      	ldr	r2, [r3, #32]
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800206c:	430a      	orrs	r2, r1
 800206e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b006      	add	sp, #24
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
 8002084:	fffcffff 	.word	0xfffcffff
 8002088:	fff7ffff 	.word	0xfff7ffff
 800208c:	00001388 	.word	0x00001388
 8002090:	ffcfffff 	.word	0xffcfffff
 8002094:	efffffff 	.word	0xefffffff
 8002098:	fffff3ff 	.word	0xfffff3ff
 800209c:	ffffcfff 	.word	0xffffcfff
 80020a0:	fbffffff 	.word	0xfbffffff
 80020a4:	fff3ffff 	.word	0xfff3ffff

080020a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e044      	b.n	8002144 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2274      	movs	r2, #116	; 0x74
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe fd11 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2224      	movs	r2, #36	; 0x24
 80020d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f9c6 	bl	800247c <UART_SetConfig>
 80020f0:	0003      	movs	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e024      	b.n	8002144 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 fc77 	bl	80029f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	490d      	ldr	r1, [pc, #52]	; (800214c <HAL_UART_Init+0xa4>)
 8002116:	400a      	ands	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	212a      	movs	r1, #42	; 0x2a
 8002126:	438a      	bics	r2, r1
 8002128:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fd0f 	bl	8002b60 <UART_CheckIdleState>
 8002142:	0003      	movs	r3, r0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}
 800214c:	ffffb7ff 	.word	0xffffb7ff

08002150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002164:	2b20      	cmp	r3, #32
 8002166:	d000      	beq.n	800216a <HAL_UART_Transmit+0x1a>
 8002168:	e095      	b.n	8002296 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_UART_Transmit+0x28>
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e08d      	b.n	8002298 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	429a      	cmp	r2, r3
 8002186:	d109      	bne.n	800219c <HAL_UART_Transmit+0x4c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d001      	beq.n	800219c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e07d      	b.n	8002298 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2274      	movs	r2, #116	; 0x74
 80021a0:	5c9b      	ldrb	r3, [r3, r2]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Transmit+0x5a>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e076      	b.n	8002298 <HAL_UART_Transmit+0x148>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2274      	movs	r2, #116	; 0x74
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	2100      	movs	r1, #0
 80021b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2221      	movs	r2, #33	; 0x21
 80021be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c0:	f7fe fd88 	bl	8000cd4 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1dba      	adds	r2, r7, #6
 80021cc:	2150      	movs	r1, #80	; 0x50
 80021ce:	8812      	ldrh	r2, [r2, #0]
 80021d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1dba      	adds	r2, r7, #6
 80021d6:	2152      	movs	r1, #82	; 0x52
 80021d8:	8812      	ldrh	r2, [r2, #0]
 80021da:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	015b      	lsls	r3, r3, #5
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d108      	bne.n	80021fa <HAL_UART_Transmit+0xaa>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e003      	b.n	8002202 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2274      	movs	r2, #116	; 0x74
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800220a:	e02c      	b.n	8002266 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	0013      	movs	r3, r2
 8002216:	2200      	movs	r2, #0
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	f000 fce9 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d001      	beq.n	8002226 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e038      	b.n	8002298 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	05d2      	lsls	r2, r2, #23
 8002238:	0dd2      	lsrs	r2, r2, #23
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	3302      	adds	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e007      	b.n	8002254 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2252      	movs	r2, #82	; 0x52
 8002258:	5a9b      	ldrh	r3, [r3, r2]
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b299      	uxth	r1, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2252      	movs	r2, #82	; 0x52
 8002264:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2252      	movs	r2, #82	; 0x52
 800226a:	5a9b      	ldrh	r3, [r3, r2]
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1cc      	bne.n	800220c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	0013      	movs	r3, r2
 800227c:	2200      	movs	r2, #0
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	f000 fcb6 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e005      	b.n	8002298 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
  }
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b008      	add	sp, #32
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	1dbb      	adds	r3, r7, #6
 80022ae:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d000      	beq.n	80022ba <HAL_UART_Receive+0x1a>
 80022b8:	e0d9      	b.n	800246e <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_UART_Receive+0x28>
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d1      	b.n	8002470 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d109      	bne.n	80022ec <HAL_UART_Receive+0x4c>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d001      	beq.n	80022ec <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0c1      	b.n	8002470 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2274      	movs	r2, #116	; 0x74
 80022f0:	5c9b      	ldrb	r3, [r3, r2]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Receive+0x5a>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0ba      	b.n	8002470 <HAL_UART_Receive+0x1d0>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2274      	movs	r2, #116	; 0x74
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	2100      	movs	r1, #0
 8002308:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2222      	movs	r2, #34	; 0x22
 800230e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fcdd 	bl	8000cd4 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1dba      	adds	r2, r7, #6
 8002322:	2158      	movs	r1, #88	; 0x58
 8002324:	8812      	ldrh	r2, [r2, #0]
 8002326:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1dba      	adds	r2, r7, #6
 800232c:	215a      	movs	r1, #90	; 0x5a
 800232e:	8812      	ldrh	r2, [r2, #0]
 8002330:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	429a      	cmp	r2, r3
 800233c:	d10d      	bne.n	800235a <HAL_UART_Receive+0xba>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d104      	bne.n	8002350 <HAL_UART_Receive+0xb0>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	225c      	movs	r2, #92	; 0x5c
 800234a:	494b      	ldr	r1, [pc, #300]	; (8002478 <HAL_UART_Receive+0x1d8>)
 800234c:	5299      	strh	r1, [r3, r2]
 800234e:	e02e      	b.n	80023ae <HAL_UART_Receive+0x10e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	225c      	movs	r2, #92	; 0x5c
 8002354:	21ff      	movs	r1, #255	; 0xff
 8002356:	5299      	strh	r1, [r3, r2]
 8002358:	e029      	b.n	80023ae <HAL_UART_Receive+0x10e>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_UART_Receive+0xde>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <HAL_UART_Receive+0xd4>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	225c      	movs	r2, #92	; 0x5c
 800236e:	21ff      	movs	r1, #255	; 0xff
 8002370:	5299      	strh	r1, [r3, r2]
 8002372:	e01c      	b.n	80023ae <HAL_UART_Receive+0x10e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	225c      	movs	r2, #92	; 0x5c
 8002378:	217f      	movs	r1, #127	; 0x7f
 800237a:	5299      	strh	r1, [r3, r2]
 800237c:	e017      	b.n	80023ae <HAL_UART_Receive+0x10e>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	055b      	lsls	r3, r3, #21
 8002386:	429a      	cmp	r2, r3
 8002388:	d10d      	bne.n	80023a6 <HAL_UART_Receive+0x106>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_UART_Receive+0xfc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	225c      	movs	r2, #92	; 0x5c
 8002396:	217f      	movs	r1, #127	; 0x7f
 8002398:	5299      	strh	r1, [r3, r2]
 800239a:	e008      	b.n	80023ae <HAL_UART_Receive+0x10e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	225c      	movs	r2, #92	; 0x5c
 80023a0:	213f      	movs	r1, #63	; 0x3f
 80023a2:	5299      	strh	r1, [r3, r2]
 80023a4:	e003      	b.n	80023ae <HAL_UART_Receive+0x10e>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	225c      	movs	r2, #92	; 0x5c
 80023aa:	2100      	movs	r1, #0
 80023ac:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80023ae:	2312      	movs	r3, #18
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	215c      	movs	r1, #92	; 0x5c
 80023b6:	5a52      	ldrh	r2, [r2, r1]
 80023b8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	015b      	lsls	r3, r3, #5
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d108      	bne.n	80023d8 <HAL_UART_Receive+0x138>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	e003      	b.n	80023e0 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2274      	movs	r2, #116	; 0x74
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023e8:	e036      	b.n	8002458 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	0013      	movs	r3, r2
 80023f4:	2200      	movs	r2, #0
 80023f6:	2120      	movs	r1, #32
 80023f8:	f000 fbfa 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e035      	b.n	8002470 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	b29b      	uxth	r3, r3
 8002412:	2212      	movs	r2, #18
 8002414:	18ba      	adds	r2, r7, r2
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	4013      	ands	r3, r2
 800241a:	b29a      	uxth	r2, r3
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3302      	adds	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e00e      	b.n	8002446 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2212      	movs	r2, #18
 8002432:	18ba      	adds	r2, r7, r2
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4013      	ands	r3, r2
 800243a:	b2da      	uxtb	r2, r3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	225a      	movs	r2, #90	; 0x5a
 800244a:	5a9b      	ldrh	r3, [r3, r2]
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b299      	uxth	r1, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	225a      	movs	r2, #90	; 0x5a
 8002456:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	225a      	movs	r2, #90	; 0x5a
 800245c:	5a9b      	ldrh	r3, [r3, r2]
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1c2      	bne.n	80023ea <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800246e:	2302      	movs	r3, #2
  }
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b008      	add	sp, #32
 8002476:	bd80      	pop	{r7, pc}
 8002478:	000001ff 	.word	0x000001ff

0800247c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0
 8002482:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002484:	231a      	movs	r3, #26
 8002486:	2218      	movs	r2, #24
 8002488:	4694      	mov	ip, r2
 800248a:	44bc      	add	ip, r7
 800248c:	4463      	add	r3, ip
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	431a      	orrs	r2, r3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4ab0      	ldr	r2, [pc, #704]	; (8002774 <UART_SetConfig+0x2f8>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4aac      	ldr	r2, [pc, #688]	; (8002778 <UART_SetConfig+0x2fc>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4aa6      	ldr	r2, [pc, #664]	; (800277c <UART_SetConfig+0x300>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d004      	beq.n	80024f2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ee:	4313      	orrs	r3, r2
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4aa1      	ldr	r2, [pc, #644]	; (8002780 <UART_SetConfig+0x304>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a9d      	ldr	r2, [pc, #628]	; (8002784 <UART_SetConfig+0x308>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d136      	bne.n	8002580 <UART_SetConfig+0x104>
 8002512:	4b9d      	ldr	r3, [pc, #628]	; (8002788 <UART_SetConfig+0x30c>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	2203      	movs	r2, #3
 8002518:	4013      	ands	r3, r2
 800251a:	2b03      	cmp	r3, #3
 800251c:	d020      	beq.n	8002560 <UART_SetConfig+0xe4>
 800251e:	d827      	bhi.n	8002570 <UART_SetConfig+0xf4>
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00d      	beq.n	8002540 <UART_SetConfig+0xc4>
 8002524:	d824      	bhi.n	8002570 <UART_SetConfig+0xf4>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <UART_SetConfig+0xb4>
 800252a:	2b01      	cmp	r3, #1
 800252c:	d010      	beq.n	8002550 <UART_SetConfig+0xd4>
 800252e:	e01f      	b.n	8002570 <UART_SetConfig+0xf4>
 8002530:	231b      	movs	r3, #27
 8002532:	2218      	movs	r2, #24
 8002534:	4694      	mov	ip, r2
 8002536:	44bc      	add	ip, r7
 8002538:	4463      	add	r3, ip
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e0c5      	b.n	80026cc <UART_SetConfig+0x250>
 8002540:	231b      	movs	r3, #27
 8002542:	2218      	movs	r2, #24
 8002544:	4694      	mov	ip, r2
 8002546:	44bc      	add	ip, r7
 8002548:	4463      	add	r3, ip
 800254a:	2202      	movs	r2, #2
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e0bd      	b.n	80026cc <UART_SetConfig+0x250>
 8002550:	231b      	movs	r3, #27
 8002552:	2218      	movs	r2, #24
 8002554:	4694      	mov	ip, r2
 8002556:	44bc      	add	ip, r7
 8002558:	4463      	add	r3, ip
 800255a:	2204      	movs	r2, #4
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e0b5      	b.n	80026cc <UART_SetConfig+0x250>
 8002560:	231b      	movs	r3, #27
 8002562:	2218      	movs	r2, #24
 8002564:	4694      	mov	ip, r2
 8002566:	44bc      	add	ip, r7
 8002568:	4463      	add	r3, ip
 800256a:	2208      	movs	r2, #8
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e0ad      	b.n	80026cc <UART_SetConfig+0x250>
 8002570:	231b      	movs	r3, #27
 8002572:	2218      	movs	r2, #24
 8002574:	4694      	mov	ip, r2
 8002576:	44bc      	add	ip, r7
 8002578:	4463      	add	r3, ip
 800257a:	2210      	movs	r2, #16
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e0a5      	b.n	80026cc <UART_SetConfig+0x250>
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a81      	ldr	r2, [pc, #516]	; (800278c <UART_SetConfig+0x310>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d136      	bne.n	80025f8 <UART_SetConfig+0x17c>
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <UART_SetConfig+0x30c>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	220c      	movs	r2, #12
 8002590:	4013      	ands	r3, r2
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d020      	beq.n	80025d8 <UART_SetConfig+0x15c>
 8002596:	d827      	bhi.n	80025e8 <UART_SetConfig+0x16c>
 8002598:	2b08      	cmp	r3, #8
 800259a:	d00d      	beq.n	80025b8 <UART_SetConfig+0x13c>
 800259c:	d824      	bhi.n	80025e8 <UART_SetConfig+0x16c>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <UART_SetConfig+0x12c>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d010      	beq.n	80025c8 <UART_SetConfig+0x14c>
 80025a6:	e01f      	b.n	80025e8 <UART_SetConfig+0x16c>
 80025a8:	231b      	movs	r3, #27
 80025aa:	2218      	movs	r2, #24
 80025ac:	4694      	mov	ip, r2
 80025ae:	44bc      	add	ip, r7
 80025b0:	4463      	add	r3, ip
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e089      	b.n	80026cc <UART_SetConfig+0x250>
 80025b8:	231b      	movs	r3, #27
 80025ba:	2218      	movs	r2, #24
 80025bc:	4694      	mov	ip, r2
 80025be:	44bc      	add	ip, r7
 80025c0:	4463      	add	r3, ip
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e081      	b.n	80026cc <UART_SetConfig+0x250>
 80025c8:	231b      	movs	r3, #27
 80025ca:	2218      	movs	r2, #24
 80025cc:	4694      	mov	ip, r2
 80025ce:	44bc      	add	ip, r7
 80025d0:	4463      	add	r3, ip
 80025d2:	2204      	movs	r2, #4
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e079      	b.n	80026cc <UART_SetConfig+0x250>
 80025d8:	231b      	movs	r3, #27
 80025da:	2218      	movs	r2, #24
 80025dc:	4694      	mov	ip, r2
 80025de:	44bc      	add	ip, r7
 80025e0:	4463      	add	r3, ip
 80025e2:	2208      	movs	r2, #8
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e071      	b.n	80026cc <UART_SetConfig+0x250>
 80025e8:	231b      	movs	r3, #27
 80025ea:	2218      	movs	r2, #24
 80025ec:	4694      	mov	ip, r2
 80025ee:	44bc      	add	ip, r7
 80025f0:	4463      	add	r3, ip
 80025f2:	2210      	movs	r2, #16
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e069      	b.n	80026cc <UART_SetConfig+0x250>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a64      	ldr	r2, [pc, #400]	; (8002790 <UART_SetConfig+0x314>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d107      	bne.n	8002612 <UART_SetConfig+0x196>
 8002602:	231b      	movs	r3, #27
 8002604:	2218      	movs	r2, #24
 8002606:	4694      	mov	ip, r2
 8002608:	44bc      	add	ip, r7
 800260a:	4463      	add	r3, ip
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e05c      	b.n	80026cc <UART_SetConfig+0x250>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a5f      	ldr	r2, [pc, #380]	; (8002794 <UART_SetConfig+0x318>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d107      	bne.n	800262c <UART_SetConfig+0x1b0>
 800261c:	231b      	movs	r3, #27
 800261e:	2218      	movs	r2, #24
 8002620:	4694      	mov	ip, r2
 8002622:	44bc      	add	ip, r7
 8002624:	4463      	add	r3, ip
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e04f      	b.n	80026cc <UART_SetConfig+0x250>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <UART_SetConfig+0x300>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d143      	bne.n	80026be <UART_SetConfig+0x242>
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <UART_SetConfig+0x30c>)
 8002638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800263a:	23c0      	movs	r3, #192	; 0xc0
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4013      	ands	r3, r2
 8002640:	22c0      	movs	r2, #192	; 0xc0
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	4293      	cmp	r3, r2
 8002646:	d02a      	beq.n	800269e <UART_SetConfig+0x222>
 8002648:	22c0      	movs	r2, #192	; 0xc0
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	4293      	cmp	r3, r2
 800264e:	d82e      	bhi.n	80026ae <UART_SetConfig+0x232>
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	4293      	cmp	r3, r2
 8002656:	d012      	beq.n	800267e <UART_SetConfig+0x202>
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	4293      	cmp	r3, r2
 800265e:	d826      	bhi.n	80026ae <UART_SetConfig+0x232>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <UART_SetConfig+0x1f2>
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	00d2      	lsls	r2, r2, #3
 8002668:	4293      	cmp	r3, r2
 800266a:	d010      	beq.n	800268e <UART_SetConfig+0x212>
 800266c:	e01f      	b.n	80026ae <UART_SetConfig+0x232>
 800266e:	231b      	movs	r3, #27
 8002670:	2218      	movs	r2, #24
 8002672:	4694      	mov	ip, r2
 8002674:	44bc      	add	ip, r7
 8002676:	4463      	add	r3, ip
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e026      	b.n	80026cc <UART_SetConfig+0x250>
 800267e:	231b      	movs	r3, #27
 8002680:	2218      	movs	r2, #24
 8002682:	4694      	mov	ip, r2
 8002684:	44bc      	add	ip, r7
 8002686:	4463      	add	r3, ip
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e01e      	b.n	80026cc <UART_SetConfig+0x250>
 800268e:	231b      	movs	r3, #27
 8002690:	2218      	movs	r2, #24
 8002692:	4694      	mov	ip, r2
 8002694:	44bc      	add	ip, r7
 8002696:	4463      	add	r3, ip
 8002698:	2204      	movs	r2, #4
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e016      	b.n	80026cc <UART_SetConfig+0x250>
 800269e:	231b      	movs	r3, #27
 80026a0:	2218      	movs	r2, #24
 80026a2:	4694      	mov	ip, r2
 80026a4:	44bc      	add	ip, r7
 80026a6:	4463      	add	r3, ip
 80026a8:	2208      	movs	r2, #8
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e00e      	b.n	80026cc <UART_SetConfig+0x250>
 80026ae:	231b      	movs	r3, #27
 80026b0:	2218      	movs	r2, #24
 80026b2:	4694      	mov	ip, r2
 80026b4:	44bc      	add	ip, r7
 80026b6:	4463      	add	r3, ip
 80026b8:	2210      	movs	r2, #16
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e006      	b.n	80026cc <UART_SetConfig+0x250>
 80026be:	231b      	movs	r3, #27
 80026c0:	2218      	movs	r2, #24
 80026c2:	4694      	mov	ip, r2
 80026c4:	44bc      	add	ip, r7
 80026c6:	4463      	add	r3, ip
 80026c8:	2210      	movs	r2, #16
 80026ca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	; (800277c <UART_SetConfig+0x300>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d000      	beq.n	80026d8 <UART_SetConfig+0x25c>
 80026d6:	e09e      	b.n	8002816 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026d8:	231b      	movs	r3, #27
 80026da:	2218      	movs	r2, #24
 80026dc:	4694      	mov	ip, r2
 80026de:	44bc      	add	ip, r7
 80026e0:	4463      	add	r3, ip
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d01d      	beq.n	8002724 <UART_SetConfig+0x2a8>
 80026e8:	dc20      	bgt.n	800272c <UART_SetConfig+0x2b0>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d015      	beq.n	800271a <UART_SetConfig+0x29e>
 80026ee:	dc1d      	bgt.n	800272c <UART_SetConfig+0x2b0>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <UART_SetConfig+0x27e>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d005      	beq.n	8002704 <UART_SetConfig+0x288>
 80026f8:	e018      	b.n	800272c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026fa:	f7ff fb35 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 80026fe:	0003      	movs	r3, r0
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002702:	e01d      	b.n	8002740 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <UART_SetConfig+0x30c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	4013      	ands	r3, r2
 800270c:	d002      	beq.n	8002714 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <UART_SetConfig+0x31c>)
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002712:	e015      	b.n	8002740 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <UART_SetConfig+0x320>)
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002718:	e012      	b.n	8002740 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800271a:	f7ff fa75 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 800271e:	0003      	movs	r3, r0
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002722:	e00d      	b.n	8002740 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800272a:	e009      	b.n	8002740 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002730:	231a      	movs	r3, #26
 8002732:	2218      	movs	r2, #24
 8002734:	4694      	mov	ip, r2
 8002736:	44bc      	add	ip, r7
 8002738:	4463      	add	r3, ip
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
        break;
 800273e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d100      	bne.n	8002748 <UART_SetConfig+0x2cc>
 8002746:	e13c      	b.n	80029c2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	0013      	movs	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	189b      	adds	r3, r3, r2
 8002752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002754:	429a      	cmp	r2, r3
 8002756:	d305      	bcc.n	8002764 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800275e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002760:	429a      	cmp	r2, r3
 8002762:	d91d      	bls.n	80027a0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002764:	231a      	movs	r3, #26
 8002766:	2218      	movs	r2, #24
 8002768:	4694      	mov	ip, r2
 800276a:	44bc      	add	ip, r7
 800276c:	4463      	add	r3, ip
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e126      	b.n	80029c2 <UART_SetConfig+0x546>
 8002774:	efff69f3 	.word	0xefff69f3
 8002778:	ffffcfff 	.word	0xffffcfff
 800277c:	40004800 	.word	0x40004800
 8002780:	fffff4ff 	.word	0xfffff4ff
 8002784:	40013800 	.word	0x40013800
 8002788:	40021000 	.word	0x40021000
 800278c:	40004400 	.word	0x40004400
 8002790:	40004c00 	.word	0x40004c00
 8002794:	40005000 	.word	0x40005000
 8002798:	003d0900 	.word	0x003d0900
 800279c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	000b      	movs	r3, r1
 80027ae:	0e1b      	lsrs	r3, r3, #24
 80027b0:	0010      	movs	r0, r2
 80027b2:	0205      	lsls	r5, r0, #8
 80027b4:	431d      	orrs	r5, r3
 80027b6:	000b      	movs	r3, r1
 80027b8:	021c      	lsls	r4, r3, #8
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68b8      	ldr	r0, [r7, #8]
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	1900      	adds	r0, r0, r4
 80027cc:	4169      	adcs	r1, r5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	2300      	movs	r3, #0
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f7fd fd20 	bl	8000220 <__aeabi_uldivmod>
 80027e0:	0002      	movs	r2, r0
 80027e2:	000b      	movs	r3, r1
 80027e4:	0013      	movs	r3, r2
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ea:	23c0      	movs	r3, #192	; 0xc0
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d309      	bcc.n	8002806 <UART_SetConfig+0x38a>
 80027f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	035b      	lsls	r3, r3, #13
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d204      	bcs.n	8002806 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	e0dd      	b.n	80029c2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002806:	231a      	movs	r3, #26
 8002808:	2218      	movs	r2, #24
 800280a:	4694      	mov	ip, r2
 800280c:	44bc      	add	ip, r7
 800280e:	4463      	add	r3, ip
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e0d5      	b.n	80029c2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	429a      	cmp	r2, r3
 8002820:	d000      	beq.n	8002824 <UART_SetConfig+0x3a8>
 8002822:	e074      	b.n	800290e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002824:	231b      	movs	r3, #27
 8002826:	2218      	movs	r2, #24
 8002828:	4694      	mov	ip, r2
 800282a:	44bc      	add	ip, r7
 800282c:	4463      	add	r3, ip
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d822      	bhi.n	800287a <UART_SetConfig+0x3fe>
 8002834:	009a      	lsls	r2, r3, #2
 8002836:	4b6b      	ldr	r3, [pc, #428]	; (80029e4 <UART_SetConfig+0x568>)
 8002838:	18d3      	adds	r3, r2, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800283e:	f7ff fa93 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 8002842:	0003      	movs	r3, r0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002846:	e022      	b.n	800288e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002848:	f7ff faa4 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 800284c:	0003      	movs	r3, r0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002850:	e01d      	b.n	800288e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002852:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <UART_SetConfig+0x56c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	4013      	ands	r3, r2
 800285a:	d002      	beq.n	8002862 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800285c:	4b63      	ldr	r3, [pc, #396]	; (80029ec <UART_SetConfig+0x570>)
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002860:	e015      	b.n	800288e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <UART_SetConfig+0x574>)
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002866:	e012      	b.n	800288e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002868:	f7ff f9ce 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 800286c:	0003      	movs	r3, r0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002870:	e00d      	b.n	800288e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002878:	e009      	b.n	800288e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800287e:	231a      	movs	r3, #26
 8002880:	2218      	movs	r2, #24
 8002882:	4694      	mov	ip, r2
 8002884:	44bc      	add	ip, r7
 8002886:	4463      	add	r3, ip
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
        break;
 800288c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d100      	bne.n	8002896 <UART_SetConfig+0x41a>
 8002894:	e095      	b.n	80029c2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	005a      	lsls	r2, r3, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	18d2      	adds	r2, r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	0019      	movs	r1, r3
 80028a8:	0010      	movs	r0, r2
 80028aa:	f7fd fc2d 	bl	8000108 <__udivsi3>
 80028ae:	0003      	movs	r3, r0
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d921      	bls.n	80028fe <UART_SetConfig+0x482>
 80028ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d21c      	bcs.n	80028fe <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	200e      	movs	r0, #14
 80028ca:	2418      	movs	r4, #24
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	181b      	adds	r3, r3, r0
 80028d0:	210f      	movs	r1, #15
 80028d2:	438a      	bics	r2, r1
 80028d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2207      	movs	r2, #7
 80028de:	4013      	ands	r3, r2
 80028e0:	b299      	uxth	r1, r3
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	181b      	adds	r3, r3, r0
 80028e6:	193a      	adds	r2, r7, r4
 80028e8:	1812      	adds	r2, r2, r0
 80028ea:	8812      	ldrh	r2, [r2, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	1812      	adds	r2, r2, r0
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e061      	b.n	80029c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80028fe:	231a      	movs	r3, #26
 8002900:	2218      	movs	r2, #24
 8002902:	4694      	mov	ip, r2
 8002904:	44bc      	add	ip, r7
 8002906:	4463      	add	r3, ip
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e059      	b.n	80029c2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800290e:	231b      	movs	r3, #27
 8002910:	2218      	movs	r2, #24
 8002912:	4694      	mov	ip, r2
 8002914:	44bc      	add	ip, r7
 8002916:	4463      	add	r3, ip
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d822      	bhi.n	8002964 <UART_SetConfig+0x4e8>
 800291e:	009a      	lsls	r2, r3, #2
 8002920:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <UART_SetConfig+0x578>)
 8002922:	18d3      	adds	r3, r2, r3
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002928:	f7ff fa1e 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 800292c:	0003      	movs	r3, r0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002930:	e022      	b.n	8002978 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002932:	f7ff fa2f 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 8002936:	0003      	movs	r3, r0
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800293a:	e01d      	b.n	8002978 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <UART_SetConfig+0x56c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2210      	movs	r2, #16
 8002942:	4013      	ands	r3, r2
 8002944:	d002      	beq.n	800294c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <UART_SetConfig+0x570>)
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800294a:	e015      	b.n	8002978 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <UART_SetConfig+0x574>)
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002950:	e012      	b.n	8002978 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002952:	f7ff f959 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8002956:	0003      	movs	r3, r0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800295a:	e00d      	b.n	8002978 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002962:	e009      	b.n	8002978 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002968:	231a      	movs	r3, #26
 800296a:	2218      	movs	r2, #24
 800296c:	4694      	mov	ip, r2
 800296e:	44bc      	add	ip, r7
 8002970:	4463      	add	r3, ip
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
        break;
 8002976:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d021      	beq.n	80029c2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	085a      	lsrs	r2, r3, #1
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	18d2      	adds	r2, r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0019      	movs	r1, r3
 800298e:	0010      	movs	r0, r2
 8002990:	f7fd fbba 	bl	8000108 <__udivsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	b29b      	uxth	r3, r3
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	2b0f      	cmp	r3, #15
 800299e:	d909      	bls.n	80029b4 <UART_SetConfig+0x538>
 80029a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d204      	bcs.n	80029b4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	e006      	b.n	80029c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80029b4:	231a      	movs	r3, #26
 80029b6:	2218      	movs	r2, #24
 80029b8:	4694      	mov	ip, r2
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2200      	movs	r2, #0
 80029c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2200      	movs	r2, #0
 80029cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80029ce:	231a      	movs	r3, #26
 80029d0:	2218      	movs	r2, #24
 80029d2:	4694      	mov	ip, r2
 80029d4:	44bc      	add	ip, r7
 80029d6:	4463      	add	r3, ip
 80029d8:	781b      	ldrb	r3, [r3, #0]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b00e      	add	sp, #56	; 0x38
 80029e0:	bdb0      	pop	{r4, r5, r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	08002e40 	.word	0x08002e40
 80029e8:	40021000 	.word	0x40021000
 80029ec:	003d0900 	.word	0x003d0900
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	08002e64 	.word	0x08002e64

080029f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <UART_AdvFeatureConfig+0x144>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <UART_AdvFeatureConfig+0x148>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2204      	movs	r2, #4
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <UART_AdvFeatureConfig+0x14c>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <UART_AdvFeatureConfig+0x150>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <UART_AdvFeatureConfig+0x154>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <UART_AdvFeatureConfig+0x158>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <UART_AdvFeatureConfig+0x15c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	035b      	lsls	r3, r3, #13
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10b      	bne.n	8002b12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <UART_AdvFeatureConfig+0x160>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <UART_AdvFeatureConfig+0x164>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	fffdffff 	.word	0xfffdffff
 8002b40:	fffeffff 	.word	0xfffeffff
 8002b44:	fffbffff 	.word	0xfffbffff
 8002b48:	ffff7fff 	.word	0xffff7fff
 8002b4c:	ffffefff 	.word	0xffffefff
 8002b50:	ffffdfff 	.word	0xffffdfff
 8002b54:	ffefffff 	.word	0xffefffff
 8002b58:	ff9fffff 	.word	0xff9fffff
 8002b5c:	fff7ffff 	.word	0xfff7ffff

08002b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b70:	f7fe f8b0 	bl	8000cd4 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2208      	movs	r2, #8
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d10c      	bne.n	8002ba0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	0391      	lsls	r1, r2, #14
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <UART_CheckIdleState+0x8c>)
 8002b90:	9200      	str	r2, [sp, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f000 f82c 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e021      	b.n	8002be4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d10c      	bne.n	8002bc8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	03d1      	lsls	r1, r2, #15
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <UART_CheckIdleState+0x8c>)
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f000 f818 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d001      	beq.n	8002bc8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e00d      	b.n	8002be4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2274      	movs	r2, #116	; 0x74
 8002bde:	2100      	movs	r1, #0
 8002be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	01ffffff 	.word	0x01ffffff

08002bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c00:	e05e      	b.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3301      	adds	r3, #1
 8002c06:	d05b      	beq.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fe f864 	bl	8000cd4 <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11b      	bne.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	492f      	ldr	r1, [pc, #188]	; (8002ce8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2274      	movs	r2, #116	; 0x74
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e044      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d02e      	beq.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d124      	bne.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4917      	ldr	r1, [pc, #92]	; (8002ce8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2274      	movs	r2, #116	; 0x74
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e00f      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	425a      	negs	r2, r3
 8002cd0:	4153      	adcs	r3, r2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d091      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	fffffe5f 	.word	0xfffffe5f

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	2600      	movs	r6, #0
 8002cf0:	4d0c      	ldr	r5, [pc, #48]	; (8002d24 <__libc_init_array+0x38>)
 8002cf2:	4c0d      	ldr	r4, [pc, #52]	; (8002d28 <__libc_init_array+0x3c>)
 8002cf4:	1b64      	subs	r4, r4, r5
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	42a6      	cmp	r6, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	f000 f821 	bl	8002d44 <_init>
 8002d02:	4d0a      	ldr	r5, [pc, #40]	; (8002d2c <__libc_init_array+0x40>)
 8002d04:	4c0a      	ldr	r4, [pc, #40]	; (8002d30 <__libc_init_array+0x44>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	42a6      	cmp	r6, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	00b3      	lsls	r3, r6, #2
 8002d12:	58eb      	ldr	r3, [r5, r3]
 8002d14:	4798      	blx	r3
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	00b3      	lsls	r3, r6, #2
 8002d1c:	58eb      	ldr	r3, [r5, r3]
 8002d1e:	4798      	blx	r3
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08002e90 	.word	0x08002e90
 8002d28:	08002e90 	.word	0x08002e90
 8002d2c:	08002e90 	.word	0x08002e90
 8002d30:	08002e94 	.word	0x08002e94

08002d34 <memset>:
 8002d34:	0003      	movs	r3, r0
 8002d36:	1882      	adds	r2, r0, r2
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	7019      	strb	r1, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <_init>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr

08002d50 <_fini>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d56:	bc08      	pop	{r3}
 8002d58:	469e      	mov	lr, r3
 8002d5a:	4770      	bx	lr
