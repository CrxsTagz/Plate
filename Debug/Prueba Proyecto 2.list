
Prueba Proyecto 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003990  08003990  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003998  08003998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003a10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003a10  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e14  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d8  00000000  00000000  00026eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00028488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00028b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001382e  00000000  00000000  000291b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008543  00000000  00000000  0003c9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ae3f  00000000  00000000  00044f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bfd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  000bfdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003738 	.word	0x08003738

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003738 	.word	0x08003738

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <gameplay>:
 * Setting the plate velocity with the Dip-Switch
 *
 */

int gameplay()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

	//velocity variable.

	int velocity = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) //First Switch
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	00da      	lsls	r2, r3, #3
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 ff33 	bl	8001330 <HAL_GPIO_ReadPin>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d018      	beq.n	8000500 <gameplay+0x50>

	{
	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) //Second Switch
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <gameplay+0x60>)
 80004d0:	2108      	movs	r1, #8
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 ff2c 	bl	8001330 <HAL_GPIO_ReadPin>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d00e      	beq.n	80004fa <gameplay+0x4a>

	    {

	        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)) //Thrid Switch
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <gameplay+0x60>)
 80004de:	2120      	movs	r1, #32
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 ff25 	bl	8001330 <HAL_GPIO_ReadPin>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d003      	beq.n	80004f2 <gameplay+0x42>

	        {
	            velocity = 500; //Super Fast
 80004ea:	23fa      	movs	r3, #250	; 0xfa
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	e009      	b.n	8000506 <gameplay+0x56>

	        }
	        else
	        {
	        	velocity = 1000; //Fast
 80004f2:	23fa      	movs	r3, #250	; 0xfa
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	e005      	b.n	8000506 <gameplay+0x56>
	    }

	  else

	    {
	        velocity = 1500; //Medium
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <gameplay+0x64>)
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	e002      	b.n	8000506 <gameplay+0x56>
	}

	  else
	  {

		velocity = 2000; //Slow
 8000500:	23fa      	movs	r3, #250	; 0xfa
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	607b      	str	r3, [r7, #4]
	  }

	return velocity; //Variable Exit
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b002      	add	sp, #8
 800050e:	bd80      	pop	{r7, pc}
 8000510:	50000400 	.word	0x50000400
 8000514:	000005dc 	.word	0x000005dc

08000518 <shoot>:
/*
 * Setting the shooting configuration (amount of shots the players can make)
 */

int shoot()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	//Shooting variable

	int shoot = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]

	//available shots

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) //Fourth Switch (levels)
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <shoot+0x2c>)
 8000524:	2110      	movs	r1, #16
 8000526:	0018      	movs	r0, r3
 8000528:	f000 ff02 	bl	8001330 <HAL_GPIO_ReadPin>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d002      	beq.n	8000536 <shoot+0x1e>
		{
			shoot = 11; //If it's DOWN
 8000530:	230b      	movs	r3, #11
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e001      	b.n	800053a <shoot+0x22>
		}
		else
		{
			shoot = 25; //If it's UP
 8000536:	2319      	movs	r3, #25
 8000538:	607b      	str	r3, [r7, #4]
		}

		return shoot; //Variable Exit
 800053a:	687b      	ldr	r3, [r7, #4]

}
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}
 8000544:	50000400 	.word	0x50000400

08000548 <plate>:

/*
 * Plate and underscores printing
 */

int plate(int time, int rounds, int score){
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b095      	sub	sp, #84	; 0x54
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]

//Counter variable / Plate position marker

int cont = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	64fb      	str	r3, [r7, #76]	; 0x4c

char buffspace;

//Loop till level selected

for(int i = 1; i <= rounds; i++)
 8000558:	2301      	movs	r3, #1
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
 800055c:	e1ba      	b.n	80008d4 <plate+0x38c>
	char buffpoints[16];

	/*
	 * "Tiro" Transmission
	 * */
	HAL_UART_Transmit(&huart2, "\n\rTiro: ", 8 , HAL_MAX_DELAY);
 800055e:	2301      	movs	r3, #1
 8000560:	425b      	negs	r3, r3
 8000562:	49e1      	ldr	r1, [pc, #900]	; (80008e8 <plate+0x3a0>)
 8000564:	48e1      	ldr	r0, [pc, #900]	; (80008ec <plate+0x3a4>)
 8000566:	2208      	movs	r2, #8
 8000568:	f001 fec0 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffi,sprintf(buffi,"%d",i), 500);
 800056c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800056e:	49e0      	ldr	r1, [pc, #896]	; (80008f0 <plate+0x3a8>)
 8000570:	2424      	movs	r4, #36	; 0x24
 8000572:	193b      	adds	r3, r7, r4
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fcb9 	bl	8002eec <siprintf>
 800057a:	0003      	movs	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	23fa      	movs	r3, #250	; 0xfa
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	1939      	adds	r1, r7, r4
 8000584:	48d9      	ldr	r0, [pc, #868]	; (80008ec <plate+0x3a4>)
 8000586:	f001 feb1 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " de ", 4 , HAL_MAX_DELAY);
 800058a:	2301      	movs	r3, #1
 800058c:	425b      	negs	r3, r3
 800058e:	49d9      	ldr	r1, [pc, #868]	; (80008f4 <plate+0x3ac>)
 8000590:	48d6      	ldr	r0, [pc, #856]	; (80008ec <plate+0x3a4>)
 8000592:	2204      	movs	r2, #4
 8000594:	f001 feaa 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffrounds, sprintf(buffrounds,"%d",rounds), 500);
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	49d5      	ldr	r1, [pc, #852]	; (80008f0 <plate+0x3a8>)
 800059c:	2434      	movs	r4, #52	; 0x34
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 fca3 	bl	8002eec <siprintf>
 80005a6:	0003      	movs	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	1939      	adds	r1, r7, r4
 80005b0:	48ce      	ldr	r0, [pc, #824]	; (80008ec <plate+0x3a4>)
 80005b2:	f001 fe9b 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 1 , HAL_MAX_DELAY);
 80005b6:	2301      	movs	r3, #1
 80005b8:	425b      	negs	r3, r3
 80005ba:	49cf      	ldr	r1, [pc, #828]	; (80008f8 <plate+0x3b0>)
 80005bc:	48cb      	ldr	r0, [pc, #812]	; (80008ec <plate+0x3a4>)
 80005be:	2201      	movs	r2, #1
 80005c0:	f001 fe94 	bl	80022ec <HAL_UART_Transmit>


	/*
	 * "Puntuacion" Transmission
	 * */
	HAL_UART_Transmit(&huart2, "\rPuntuacion: ", 13, HAL_MAX_DELAY);
 80005c4:	2301      	movs	r3, #1
 80005c6:	425b      	negs	r3, r3
 80005c8:	49cc      	ldr	r1, [pc, #816]	; (80008fc <plate+0x3b4>)
 80005ca:	48c8      	ldr	r0, [pc, #800]	; (80008ec <plate+0x3a4>)
 80005cc:	220d      	movs	r2, #13
 80005ce:	f001 fe8d 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffpoints, sprintf(buffpoints,"%02d",score), 500);
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	49ca      	ldr	r1, [pc, #808]	; (8000900 <plate+0x3b8>)
 80005d6:	2414      	movs	r4, #20
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 fc86 	bl	8002eec <siprintf>
 80005e0:	0003      	movs	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	23fa      	movs	r3, #250	; 0xfa
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	1939      	adds	r1, r7, r4
 80005ea:	48c0      	ldr	r0, [pc, #768]	; (80008ec <plate+0x3a4>)
 80005ec:	f001 fe7e 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 1 , HAL_MAX_DELAY);
 80005f0:	2301      	movs	r3, #1
 80005f2:	425b      	negs	r3, r3
 80005f4:	49c0      	ldr	r1, [pc, #768]	; (80008f8 <plate+0x3b0>)
 80005f6:	48bd      	ldr	r0, [pc, #756]	; (80008ec <plate+0x3a4>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	f001 fe77 	bl	80022ec <HAL_UART_Transmit>

	/*
	 * Rail and Plate Transmission // 'Space' key to start printing
	 * */
	HAL_UART_Transmit(&huart2, "\r_\t_\t_\t_\t_\t_\t_\t*\t_\t_\t\n", 24, HAL_MAX_DELAY);
 80005fe:	2301      	movs	r3, #1
 8000600:	425b      	negs	r3, r3
 8000602:	49c0      	ldr	r1, [pc, #768]	; (8000904 <plate+0x3bc>)
 8000604:	48b9      	ldr	r0, [pc, #740]	; (80008ec <plate+0x3a4>)
 8000606:	2218      	movs	r2, #24
 8000608:	f001 fe70 	bl	80022ec <HAL_UART_Transmit>

	HAL_UART_Receive(&huart2, buffspace , 1, HAL_MAX_DELAY); //'SPACE' receiver
 800060c:	2347      	movs	r3, #71	; 0x47
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	0019      	movs	r1, r3
 8000614:	2301      	movs	r3, #1
 8000616:	425b      	negs	r3, r3
 8000618:	48b4      	ldr	r0, [pc, #720]	; (80008ec <plate+0x3a4>)
 800061a:	2201      	movs	r2, #1
 800061c:	f001 ff0e 	bl	800243c <HAL_UART_Receive>

	HAL_UART_Transmit(&huart2, "\r@", 2, HAL_MAX_DELAY);
 8000620:	2301      	movs	r3, #1
 8000622:	425b      	negs	r3, r3
 8000624:	49b8      	ldr	r1, [pc, #736]	; (8000908 <plate+0x3c0>)
 8000626:	48b1      	ldr	r0, [pc, #708]	; (80008ec <plate+0x3a4>)
 8000628:	2202      	movs	r2, #2
 800062a:	f001 fe5f 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 800062e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000630:	3301      	adds	r3, #1
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fc24 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800063c:	2301      	movs	r3, #1
 800063e:	425b      	negs	r3, r3
 8000640:	49b2      	ldr	r1, [pc, #712]	; (800090c <plate+0x3c4>)
 8000642:	48aa      	ldr	r0, [pc, #680]	; (80008ec <plate+0x3a4>)
 8000644:	2201      	movs	r2, #1
 8000646:	f001 fe51 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, " ",  1, HAL_MAX_DELAY);
 800064a:	2301      	movs	r3, #1
 800064c:	425b      	negs	r3, r3
 800064e:	49b0      	ldr	r1, [pc, #704]	; (8000910 <plate+0x3c8>)
 8000650:	48a6      	ldr	r0, [pc, #664]	; (80008ec <plate+0x3a4>)
 8000652:	2201      	movs	r2, #1
 8000654:	f001 fe4a 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000658:	2301      	movs	r3, #1
 800065a:	425b      	negs	r3, r3
 800065c:	49ab      	ldr	r1, [pc, #684]	; (800090c <plate+0x3c4>)
 800065e:	48a3      	ldr	r0, [pc, #652]	; (80008ec <plate+0x3a4>)
 8000660:	2201      	movs	r2, #1
 8000662:	f001 fe43 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t@",2, HAL_MAX_DELAY);
 8000666:	2301      	movs	r3, #1
 8000668:	425b      	negs	r3, r3
 800066a:	49aa      	ldr	r1, [pc, #680]	; (8000914 <plate+0x3cc>)
 800066c:	489f      	ldr	r0, [pc, #636]	; (80008ec <plate+0x3a4>)
 800066e:	2202      	movs	r2, #2
 8000670:	f001 fe3c 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 8000674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000676:	3301      	adds	r3, #1
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fc01 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000682:	2301      	movs	r3, #1
 8000684:	425b      	negs	r3, r3
 8000686:	49a1      	ldr	r1, [pc, #644]	; (800090c <plate+0x3c4>)
 8000688:	4898      	ldr	r0, [pc, #608]	; (80008ec <plate+0x3a4>)
 800068a:	2201      	movs	r2, #1
 800068c:	f001 fe2e 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t ", 2, HAL_MAX_DELAY);
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	49a0      	ldr	r1, [pc, #640]	; (8000918 <plate+0x3d0>)
 8000696:	4895      	ldr	r0, [pc, #596]	; (80008ec <plate+0x3a4>)
 8000698:	2202      	movs	r2, #2
 800069a:	f001 fe27 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800069e:	2301      	movs	r3, #1
 80006a0:	425b      	negs	r3, r3
 80006a2:	499a      	ldr	r1, [pc, #616]	; (800090c <plate+0x3c4>)
 80006a4:	4891      	ldr	r0, [pc, #580]	; (80008ec <plate+0x3a4>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	f001 fe20 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t@", 3, HAL_MAX_DELAY);
 80006ac:	2301      	movs	r3, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	499a      	ldr	r1, [pc, #616]	; (800091c <plate+0x3d4>)
 80006b2:	488e      	ldr	r0, [pc, #568]	; (80008ec <plate+0x3a4>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	f001 fe19 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 80006ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006bc:	3301      	adds	r3, #1
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fbde 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006c8:	2301      	movs	r3, #1
 80006ca:	425b      	negs	r3, r3
 80006cc:	498f      	ldr	r1, [pc, #572]	; (800090c <plate+0x3c4>)
 80006ce:	4887      	ldr	r0, [pc, #540]	; (80008ec <plate+0x3a4>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	f001 fe0b 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t ", 3, HAL_MAX_DELAY);
 80006d6:	2301      	movs	r3, #1
 80006d8:	425b      	negs	r3, r3
 80006da:	4991      	ldr	r1, [pc, #580]	; (8000920 <plate+0x3d8>)
 80006dc:	4883      	ldr	r0, [pc, #524]	; (80008ec <plate+0x3a4>)
 80006de:	2203      	movs	r2, #3
 80006e0:	f001 fe04 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80006e4:	2301      	movs	r3, #1
 80006e6:	425b      	negs	r3, r3
 80006e8:	4988      	ldr	r1, [pc, #544]	; (800090c <plate+0x3c4>)
 80006ea:	4880      	ldr	r0, [pc, #512]	; (80008ec <plate+0x3a4>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f001 fdfd 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t@", 4, HAL_MAX_DELAY);
 80006f2:	2301      	movs	r3, #1
 80006f4:	425b      	negs	r3, r3
 80006f6:	498b      	ldr	r1, [pc, #556]	; (8000924 <plate+0x3dc>)
 80006f8:	487c      	ldr	r0, [pc, #496]	; (80008ec <plate+0x3a4>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	f001 fdf6 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 8000700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000702:	3301      	adds	r3, #1
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fbbb 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800070e:	2301      	movs	r3, #1
 8000710:	425b      	negs	r3, r3
 8000712:	497e      	ldr	r1, [pc, #504]	; (800090c <plate+0x3c4>)
 8000714:	4875      	ldr	r0, [pc, #468]	; (80008ec <plate+0x3a4>)
 8000716:	2201      	movs	r2, #1
 8000718:	f001 fde8 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t ", 4, HAL_MAX_DELAY);
 800071c:	2301      	movs	r3, #1
 800071e:	425b      	negs	r3, r3
 8000720:	4981      	ldr	r1, [pc, #516]	; (8000928 <plate+0x3e0>)
 8000722:	4872      	ldr	r0, [pc, #456]	; (80008ec <plate+0x3a4>)
 8000724:	2204      	movs	r2, #4
 8000726:	f001 fde1 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800072a:	2301      	movs	r3, #1
 800072c:	425b      	negs	r3, r3
 800072e:	4977      	ldr	r1, [pc, #476]	; (800090c <plate+0x3c4>)
 8000730:	486e      	ldr	r0, [pc, #440]	; (80008ec <plate+0x3a4>)
 8000732:	2201      	movs	r2, #1
 8000734:	f001 fdda 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t@",5, HAL_MAX_DELAY);
 8000738:	2301      	movs	r3, #1
 800073a:	425b      	negs	r3, r3
 800073c:	497b      	ldr	r1, [pc, #492]	; (800092c <plate+0x3e4>)
 800073e:	486b      	ldr	r0, [pc, #428]	; (80008ec <plate+0x3a4>)
 8000740:	2205      	movs	r2, #5
 8000742:	f001 fdd3 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 8000746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000748:	3301      	adds	r3, #1
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fb98 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	496c      	ldr	r1, [pc, #432]	; (800090c <plate+0x3c4>)
 800075a:	4864      	ldr	r0, [pc, #400]	; (80008ec <plate+0x3a4>)
 800075c:	2201      	movs	r2, #1
 800075e:	f001 fdc5 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t ", 5, HAL_MAX_DELAY);
 8000762:	2301      	movs	r3, #1
 8000764:	425b      	negs	r3, r3
 8000766:	4972      	ldr	r1, [pc, #456]	; (8000930 <plate+0x3e8>)
 8000768:	4860      	ldr	r0, [pc, #384]	; (80008ec <plate+0x3a4>)
 800076a:	2205      	movs	r2, #5
 800076c:	f001 fdbe 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	4965      	ldr	r1, [pc, #404]	; (800090c <plate+0x3c4>)
 8000776:	485d      	ldr	r0, [pc, #372]	; (80008ec <plate+0x3a4>)
 8000778:	2201      	movs	r2, #1
 800077a:	f001 fdb7 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t@", 6, HAL_MAX_DELAY);
 800077e:	2301      	movs	r3, #1
 8000780:	425b      	negs	r3, r3
 8000782:	496c      	ldr	r1, [pc, #432]	; (8000934 <plate+0x3ec>)
 8000784:	4859      	ldr	r0, [pc, #356]	; (80008ec <plate+0x3a4>)
 8000786:	2206      	movs	r2, #6
 8000788:	f001 fdb0 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 800078c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800078e:	3301      	adds	r3, #1
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fb75 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800079a:	2301      	movs	r3, #1
 800079c:	425b      	negs	r3, r3
 800079e:	495b      	ldr	r1, [pc, #364]	; (800090c <plate+0x3c4>)
 80007a0:	4852      	ldr	r0, [pc, #328]	; (80008ec <plate+0x3a4>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	f001 fda2 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t ", 6, HAL_MAX_DELAY);
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	4962      	ldr	r1, [pc, #392]	; (8000938 <plate+0x3f0>)
 80007ae:	484f      	ldr	r0, [pc, #316]	; (80008ec <plate+0x3a4>)
 80007b0:	2206      	movs	r2, #6
 80007b2:	f001 fd9b 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007b6:	2301      	movs	r3, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	4954      	ldr	r1, [pc, #336]	; (800090c <plate+0x3c4>)
 80007bc:	484b      	ldr	r0, [pc, #300]	; (80008ec <plate+0x3a4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	f001 fd94 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t@", 7, HAL_MAX_DELAY);
 80007c4:	2301      	movs	r3, #1
 80007c6:	425b      	negs	r3, r3
 80007c8:	495c      	ldr	r1, [pc, #368]	; (800093c <plate+0x3f4>)
 80007ca:	4848      	ldr	r0, [pc, #288]	; (80008ec <plate+0x3a4>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	f001 fd8d 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 80007d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d4:	3301      	adds	r3, #1
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fb52 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007e0:	2301      	movs	r3, #1
 80007e2:	425b      	negs	r3, r3
 80007e4:	4949      	ldr	r1, [pc, #292]	; (800090c <plate+0x3c4>)
 80007e6:	4841      	ldr	r0, [pc, #260]	; (80008ec <plate+0x3a4>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	f001 fd7f 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t ", 7, HAL_MAX_DELAY);
 80007ee:	2301      	movs	r3, #1
 80007f0:	425b      	negs	r3, r3
 80007f2:	4953      	ldr	r1, [pc, #332]	; (8000940 <plate+0x3f8>)
 80007f4:	483d      	ldr	r0, [pc, #244]	; (80008ec <plate+0x3a4>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	f001 fd78 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80007fc:	2301      	movs	r3, #1
 80007fe:	425b      	negs	r3, r3
 8000800:	4942      	ldr	r1, [pc, #264]	; (800090c <plate+0x3c4>)
 8000802:	483a      	ldr	r0, [pc, #232]	; (80008ec <plate+0x3a4>)
 8000804:	2201      	movs	r2, #1
 8000806:	f001 fd71 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t@", 8, HAL_MAX_DELAY);
 800080a:	2301      	movs	r3, #1
 800080c:	425b      	negs	r3, r3
 800080e:	494d      	ldr	r1, [pc, #308]	; (8000944 <plate+0x3fc>)
 8000810:	4836      	ldr	r0, [pc, #216]	; (80008ec <plate+0x3a4>)
 8000812:	2208      	movs	r2, #8
 8000814:	f001 fd6a 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 8000818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800081a:	3301      	adds	r3, #1
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fb2f 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000826:	2301      	movs	r3, #1
 8000828:	425b      	negs	r3, r3
 800082a:	4938      	ldr	r1, [pc, #224]	; (800090c <plate+0x3c4>)
 800082c:	482f      	ldr	r0, [pc, #188]	; (80008ec <plate+0x3a4>)
 800082e:	2201      	movs	r2, #1
 8000830:	f001 fd5c 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t ", 8, HAL_MAX_DELAY);
 8000834:	2301      	movs	r3, #1
 8000836:	425b      	negs	r3, r3
 8000838:	4943      	ldr	r1, [pc, #268]	; (8000948 <plate+0x400>)
 800083a:	482c      	ldr	r0, [pc, #176]	; (80008ec <plate+0x3a4>)
 800083c:	2208      	movs	r2, #8
 800083e:	f001 fd55 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000842:	2301      	movs	r3, #1
 8000844:	425b      	negs	r3, r3
 8000846:	4931      	ldr	r1, [pc, #196]	; (800090c <plate+0x3c4>)
 8000848:	4828      	ldr	r0, [pc, #160]	; (80008ec <plate+0x3a4>)
 800084a:	2201      	movs	r2, #1
 800084c:	f001 fd4e 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t@", 9, HAL_MAX_DELAY);
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	493d      	ldr	r1, [pc, #244]	; (800094c <plate+0x404>)
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <plate+0x3a4>)
 8000858:	2209      	movs	r2, #9
 800085a:	f001 fd47 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 800085e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000860:	3301      	adds	r3, #1
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fb0c 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 800086c:	2301      	movs	r3, #1
 800086e:	425b      	negs	r3, r3
 8000870:	4926      	ldr	r1, [pc, #152]	; (800090c <plate+0x3c4>)
 8000872:	481e      	ldr	r0, [pc, #120]	; (80008ec <plate+0x3a4>)
 8000874:	2201      	movs	r2, #1
 8000876:	f001 fd39 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t ", 9, HAL_MAX_DELAY);
 800087a:	2301      	movs	r3, #1
 800087c:	425b      	negs	r3, r3
 800087e:	4934      	ldr	r1, [pc, #208]	; (8000950 <plate+0x408>)
 8000880:	481a      	ldr	r0, [pc, #104]	; (80008ec <plate+0x3a4>)
 8000882:	2209      	movs	r2, #9
 8000884:	f001 fd32 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 8000888:	2301      	movs	r3, #1
 800088a:	425b      	negs	r3, r3
 800088c:	491f      	ldr	r1, [pc, #124]	; (800090c <plate+0x3c4>)
 800088e:	4817      	ldr	r0, [pc, #92]	; (80008ec <plate+0x3a4>)
 8000890:	2201      	movs	r2, #1
 8000892:	f001 fd2b 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t@", 10, HAL_MAX_DELAY);
 8000896:	2301      	movs	r3, #1
 8000898:	425b      	negs	r3, r3
 800089a:	492e      	ldr	r1, [pc, #184]	; (8000954 <plate+0x40c>)
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <plate+0x3a4>)
 800089e:	220a      	movs	r2, #10
 80008a0:	f001 fd24 	bl	80022ec <HAL_UART_Transmit>
	cont++;
 80008a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008a6:	3301      	adds	r3, #1
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_Delay(time);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fae9 	bl	8000e84 <HAL_Delay>
	HAL_UART_Transmit(&huart2, "\r", 1, HAL_MAX_DELAY);
 80008b2:	2301      	movs	r3, #1
 80008b4:	425b      	negs	r3, r3
 80008b6:	4915      	ldr	r1, [pc, #84]	; (800090c <plate+0x3c4>)
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <plate+0x3a4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	f001 fd16 	bl	80022ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\t\t\t\t\t\t\t\t\t ", 10, HAL_MAX_DELAY);
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	4924      	ldr	r1, [pc, #144]	; (8000958 <plate+0x410>)
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <plate+0x3a4>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	f001 fd0f 	bl	80022ec <HAL_UART_Transmit>
for(int i = 1; i <= rounds; i++)
 80008ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008d0:	3301      	adds	r3, #1
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80008d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dc00      	bgt.n	80008de <plate+0x396>
 80008dc:	e63f      	b.n	800055e <plate+0x16>
}

	//Cont exit
	return cont; //check later
 80008de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b015      	add	sp, #84	; 0x54
 80008e6:	bd90      	pop	{r4, r7, pc}
 80008e8:	08003750 	.word	0x08003750
 80008ec:	20000098 	.word	0x20000098
 80008f0:	0800375c 	.word	0x0800375c
 80008f4:	08003760 	.word	0x08003760
 80008f8:	08003768 	.word	0x08003768
 80008fc:	0800376c 	.word	0x0800376c
 8000900:	0800377c 	.word	0x0800377c
 8000904:	08003784 	.word	0x08003784
 8000908:	0800379c 	.word	0x0800379c
 800090c:	080037a0 	.word	0x080037a0
 8000910:	080037a4 	.word	0x080037a4
 8000914:	080037a8 	.word	0x080037a8
 8000918:	080037ac 	.word	0x080037ac
 800091c:	080037b0 	.word	0x080037b0
 8000920:	080037b4 	.word	0x080037b4
 8000924:	080037b8 	.word	0x080037b8
 8000928:	080037c0 	.word	0x080037c0
 800092c:	080037c8 	.word	0x080037c8
 8000930:	080037d0 	.word	0x080037d0
 8000934:	080037d8 	.word	0x080037d8
 8000938:	080037e0 	.word	0x080037e0
 800093c:	080037e8 	.word	0x080037e8
 8000940:	080037f0 	.word	0x080037f0
 8000944:	080037f8 	.word	0x080037f8
 8000948:	08003804 	.word	0x08003804
 800094c:	08003810 	.word	0x08003810
 8000950:	0800381c 	.word	0x0800381c
 8000954:	08003828 	.word	0x08003828
 8000958:	08003834 	.word	0x08003834

0800095c <main>:

/* USER CODE END 0 */

int main(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000962:	f000 fa1f 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f841 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 f8db 	bl	8000b24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096e:	f000 f8a9 	bl	8000ac4 <MX_USART2_UART_Init>
  /*
   * Function variable receivers for init
   * */
  int velocity_1;
  int shoot_1;
  char num = "a"; //'ENTER' key buffer
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <main+0x7c>)
 8000974:	240f      	movs	r4, #15
 8000976:	193b      	adds	r3, r7, r4
 8000978:	701a      	strb	r2, [r3, #0]
  int score_1 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]

  /*
   * Welcome Message
   * */
  HAL_UART_Transmit(&huart2, "\n\rBienvenido a tiro al plato!\n", 28 , HAL_MAX_DELAY);
 800097e:	2301      	movs	r3, #1
 8000980:	425b      	negs	r3, r3
 8000982:	4916      	ldr	r1, [pc, #88]	; (80009dc <main+0x80>)
 8000984:	4816      	ldr	r0, [pc, #88]	; (80009e0 <main+0x84>)
 8000986:	221c      	movs	r2, #28
 8000988:	f001 fcb0 	bl	80022ec <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\n\rConfigure la velocidad y el nivel utilizando el dip-switch de cuatro posiciones.\n", 82 , HAL_MAX_DELAY);
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	4914      	ldr	r1, [pc, #80]	; (80009e4 <main+0x88>)
 8000992:	4813      	ldr	r0, [pc, #76]	; (80009e0 <main+0x84>)
 8000994:	2252      	movs	r2, #82	; 0x52
 8000996:	f001 fca9 	bl	80022ec <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\n\rCuando esté listo, presione ENTER para comenzar!\n ", 52 , HAL_MAX_DELAY);
 800099a:	2301      	movs	r3, #1
 800099c:	425b      	negs	r3, r3
 800099e:	4912      	ldr	r1, [pc, #72]	; (80009e8 <main+0x8c>)
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <main+0x84>)
 80009a2:	2234      	movs	r2, #52	; 0x34
 80009a4:	f001 fca2 	bl	80022ec <HAL_UART_Transmit>

  //Initialization of the functions
  velocity_1 = gameplay();
 80009a8:	f7ff fd82 	bl	80004b0 <gameplay>
 80009ac:	0003      	movs	r3, r0
 80009ae:	607b      	str	r3, [r7, #4]
  shoot_1 = shoot();
 80009b0:	f7ff fdb2 	bl	8000518 <shoot>
 80009b4:	0003      	movs	r3, r0
 80009b6:	603b      	str	r3, [r7, #0]


  HAL_UART_Receive(&huart2, num , 1, HAL_MAX_DELAY); //ENTER receiver
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	0019      	movs	r1, r3
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <main+0x84>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	f001 fd39 	bl	800243c <HAL_UART_Receive>


  plate(velocity_1,shoot_1, score_1); //GAME EXECUTION
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	6839      	ldr	r1, [r7, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fdb9 	bl	8000548 <plate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x7a>
 80009d8:	08003840 	.word	0x08003840
 80009dc:	08003844 	.word	0x08003844
 80009e0:	20000098 	.word	0x20000098
 80009e4:	08003864 	.word	0x08003864
 80009e8:	080038b8 	.word	0x080038b8

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b09f      	sub	sp, #124	; 0x7c
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	2440      	movs	r4, #64	; 0x40
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2338      	movs	r3, #56	; 0x38
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f002 fa6d 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a02:	232c      	movs	r3, #44	; 0x2c
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	2314      	movs	r3, #20
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f002 fa65 	bl	8002edc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	0018      	movs	r0, r3
 8000a16:	2328      	movs	r3, #40	; 0x28
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f002 fa5e 	bl	8002edc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a26:	401a      	ands	r2, r3
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <SystemClock_Config+0xd0>)
 8000a2a:	2180      	movs	r1, #128	; 0x80
 8000a2c:	0109      	lsls	r1, r1, #4
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2210      	movs	r2, #16
 8000a38:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22a0      	movs	r2, #160	; 0xa0
 8000a4a:	0212      	lsls	r2, r2, #8
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fc88 	bl	800136c <HAL_RCC_OscConfig>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a60:	f000 f8c4 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	212c      	movs	r1, #44	; 0x2c
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	220f      	movs	r2, #15
 8000a6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2100      	movs	r1, #0
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 f843 	bl	8001b14 <HAL_RCC_ClockConfig>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a92:	f000 f8ab 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2202      	movs	r2, #2
 8000a9a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fa59 	bl	8001f5c <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aae:	f000 f89d 	bl	8000bec <Error_Handler>
  }
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b01f      	add	sp, #124	; 0x7c
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	ffffe7ff 	.word	0xffffe7ff

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <MX_USART2_UART_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ad0:	2296      	movs	r2, #150	; 0x96
 8000ad2:	0192      	lsls	r2, r2, #6
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <MX_USART2_UART_Init+0x58>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fb9b 	bl	8002244 <HAL_UART_Init>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f86b 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000098 	.word	0x20000098
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	2414      	movs	r4, #20
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2314      	movs	r3, #20
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f002 f9d1 	bl	8002edc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b40:	2104      	movs	r1, #4
 8000b42:	430a      	orrs	r2, r1
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b88:	2102      	movs	r1, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	2202      	movs	r2, #2
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	193a      	adds	r2, r7, r4
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fa3c 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2238      	movs	r2, #56	; 0x38
 8000bc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	f000 fa2d 	bl	8001034 <HAL_GPIO_Init>

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b00b      	add	sp, #44	; 0x2c
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40021000 	.word	0x40021000
 8000be8:	50000400 	.word	0x50000400

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <HAL_MspInit+0x24>)
 8000bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x24>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <HAL_MspInit+0x24>)
 8000c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_MspInit+0x24>)
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	0549      	lsls	r1, r1, #21
 8000c12:	430a      	orrs	r2, r1
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	240c      	movs	r4, #12
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2314      	movs	r3, #20
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f002 f952 	bl	8002edc <memset>
  if(huart->Instance==USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0x80>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d129      	bne.n	8000c96 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0289      	lsls	r1, r1, #10
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	2201      	movs	r2, #1
 8000c62:	4013      	ands	r3, r2
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c68:	0021      	movs	r1, r4
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2202      	movs	r2, #2
 8000c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2204      	movs	r2, #4
 8000c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	187a      	adds	r2, r7, r1
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 f9cf 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b009      	add	sp, #36	; 0x24
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8be 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f002 f8be 	bl	8002e88 <__errno>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	425b      	negs	r3, r3
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	18d2      	adds	r2, r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b006      	add	sp, #24
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20005000 	.word	0x20005000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	20000130 	.word	0x20000130

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0b      	ldr	r4, [pc, #44]	; (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d7a:	f7ff ffe3 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f002 f889 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d82:	f7ff fdeb 	bl	800095c <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
   ldr   r0, =_estack
 8000d88:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d94:	080039a0 	.word	0x080039a0
  ldr r2, =_sbss
 8000d98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d9c:	20000130 	.word	0x20000130

08000da0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_COMP_IRQHandler>
	...

08000da4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_Init+0x3c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Init+0x3c>)
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f811 	bl	8000de4 <HAL_InitTick>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e001      	b.n	8000dd2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dce:	f7ff ff13 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40022000 	.word	0x40022000

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_InitTick+0x5c>)
 8000dee:	681c      	ldr	r4, [r3, #0]
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_InitTick+0x60>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	0019      	movs	r1, r3
 8000df6:	23fa      	movs	r3, #250	; 0xfa
 8000df8:	0098      	lsls	r0, r3, #2
 8000dfa:	f7ff f98f 	bl	800011c <__udivsi3>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	0019      	movs	r1, r3
 8000e02:	0020      	movs	r0, r4
 8000e04:	f7ff f98a 	bl	800011c <__udivsi3>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 f905 	bl	800101a <HAL_SYSTICK_Config>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e00f      	b.n	8000e38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d80b      	bhi.n	8000e36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	2301      	movs	r3, #1
 8000e22:	425b      	negs	r3, r3
 8000e24:	2200      	movs	r2, #0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 f8e2 	bl	8000ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_InitTick+0x64>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	001a      	movs	r2, r3
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x20>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	18d2      	adds	r2, r2, r3
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_IncTick+0x20>)
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	2000011c 	.word	0x2000011c

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <HAL_GetTick+0x10>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000011c 	.word	0x2000011c

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff fff0 	bl	8000e70 <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	189b      	adds	r3, r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	f7ff ffe0 	bl	8000e70 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee0:	d828      	bhi.n	8000f34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <__NVIC_SetPriority+0xd4>)
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	33c0      	adds	r3, #192	; 0xc0
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	589b      	ldr	r3, [r3, r2]
 8000ef2:	1dfa      	adds	r2, r7, #7
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	2203      	movs	r2, #3
 8000efa:	400a      	ands	r2, r1
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	21ff      	movs	r1, #255	; 0xff
 8000f00:	4091      	lsls	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	43d2      	mvns	r2, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	22ff      	movs	r2, #255	; 0xff
 8000f10:	401a      	ands	r2, r3
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	0018      	movs	r0, r3
 8000f18:	2303      	movs	r3, #3
 8000f1a:	4003      	ands	r3, r0
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <__NVIC_SetPriority+0xd4>)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	33c0      	adds	r3, #192	; 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f32:	e031      	b.n	8000f98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <__NVIC_SetPriority+0xd8>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	400b      	ands	r3, r1
 8000f40:	3b08      	subs	r3, #8
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3306      	adds	r3, #6
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0011      	movs	r1, r2
 8000f54:	2203      	movs	r2, #3
 8000f56:	400a      	ands	r2, r1
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	21ff      	movs	r1, #255	; 0xff
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	401a      	ands	r2, r3
 8000f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	2303      	movs	r3, #3
 8000f76:	4003      	ands	r3, r0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <__NVIC_SetPriority+0xd8>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	001c      	movs	r4, r3
 8000f84:	230f      	movs	r3, #15
 8000f86:	4023      	ands	r3, r4
 8000f88:	3b08      	subs	r3, #8
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	3306      	adds	r3, #6
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	18c3      	adds	r3, r0, r3
 8000f94:	3304      	adds	r3, #4
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	045b      	lsls	r3, r3, #17
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d301      	bcc.n	8000fc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e010      	b.n	8000fe2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <SysTick_Config+0x44>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	3a01      	subs	r2, #1
 8000fc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc8:	2301      	movs	r3, #1
 8000fca:	425b      	negs	r3, r3
 8000fcc:	2103      	movs	r1, #3
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff ff7c 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x44>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x44>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	1c02      	adds	r2, r0, #0
 8001000:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	187b      	adds	r3, r7, r1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ffbf 	bl	8000fa8 <SysTick_Config>
 800102a:	0003      	movs	r3, r0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800104a:	e155      	b.n	80012f8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <HAL_GPIO_Init+0x30>
 8001062:	e146      	b.n	80012f2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d00b      	beq.n	8001084 <HAL_GPIO_Init+0x50>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001078:	2b11      	cmp	r3, #17
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b12      	cmp	r3, #18
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	43da      	mvns	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	2201      	movs	r2, #1
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0xf2>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b12      	cmp	r3, #18
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	58d3      	ldr	r3, [r2, r3]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2207      	movs	r2, #7
 8001138:	4013      	ands	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2107      	movs	r1, #7
 8001152:	400b      	ands	r3, r1
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	401a      	ands	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	055b      	lsls	r3, r3, #21
 80011aa:	4013      	ands	r3, r2
 80011ac:	d100      	bne.n	80011b0 <HAL_GPIO_Init+0x17c>
 80011ae:	e0a0      	b.n	80012f2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x2dc>)
 80011b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b4:	4b56      	ldr	r3, [pc, #344]	; (8001310 <HAL_GPIO_Init+0x2dc>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <HAL_GPIO_Init+0x2e0>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	589b      	ldr	r3, [r3, r2]
 80011c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x1f6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4a      	ldr	r2, [pc, #296]	; (8001318 <HAL_GPIO_Init+0x2e4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x1f2>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a49      	ldr	r2, [pc, #292]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x1ee>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_GPIO_Init+0x2ec>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x1ea>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a47      	ldr	r2, [pc, #284]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x1e6>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a46      	ldr	r2, [pc, #280]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x1e2>
 8001212:	2305      	movs	r3, #5
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x1f8>
 8001216:	2306      	movs	r3, #6
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x1f8>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x1f8>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x1f8>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x1f8>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x1f8>
 800122a:	2300      	movs	r3, #0
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	2103      	movs	r1, #3
 8001230:	400a      	ands	r2, r1
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x2e0>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_GPIO_Init+0x2f8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	4013      	ands	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_GPIO_Init+0x2f8>)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_GPIO_Init+0x2f8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43da      	mvns	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_GPIO_Init+0x2f8>)
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	035b      	lsls	r3, r3, #13
 80012b6:	4013      	ands	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	039b      	lsls	r3, r3, #14
 80012e0:	4013      	ands	r3, r2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	40da      	lsrs	r2, r3
 8001300:	1e13      	subs	r3, r2, #0
 8001302:	d000      	beq.n	8001306 <HAL_GPIO_Init+0x2d2>
 8001304:	e6a2      	b.n	800104c <HAL_GPIO_Init+0x18>
  }
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	50000400 	.word	0x50000400
 800131c:	50000800 	.word	0x50000800
 8001320:	50000c00 	.word	0x50000c00
 8001324:	50001000 	.word	0x50001000
 8001328:	50001c00 	.word	0x50001c00
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	000a      	movs	r2, r1
 800133a:	1cbb      	adds	r3, r7, #2
 800133c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	1cba      	adds	r2, r7, #2
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	4013      	ands	r3, r2
 8001348:	d004      	beq.n	8001354 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e003      	b.n	800135c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001354:	230f      	movs	r3, #15
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800135c:	230f      	movs	r3, #15
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	f000 fbbf 	bl	8001afe <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001380:	4bc9      	ldr	r3, [pc, #804]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	220c      	movs	r2, #12
 8001386:	4013      	ands	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800138a:	4bc7      	ldr	r3, [pc, #796]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	025b      	lsls	r3, r3, #9
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_RCC_OscConfig+0x36>
 80013a0:	e07e      	b.n	80014a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d007      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d112      	bne.n	80013d4 <HAL_RCC_OscConfig+0x68>
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	025b      	lsls	r3, r3, #9
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d10d      	bne.n	80013d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4bbb      	ldr	r3, [pc, #748]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d100      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5a>
 80013c4:	e06b      	b.n	800149e <HAL_RCC_OscConfig+0x132>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d167      	bne.n	800149e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 fb95 	bl	8001afe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x84>
 80013e0:	4bb1      	ldr	r3, [pc, #708]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4bb0      	ldr	r3, [pc, #704]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0249      	lsls	r1, r1, #9
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e027      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	23a0      	movs	r3, #160	; 0xa0
 80013f6:	02db      	lsls	r3, r3, #11
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <HAL_RCC_OscConfig+0xae>
 80013fc:	4baa      	ldr	r3, [pc, #680]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4ba9      	ldr	r3, [pc, #676]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	02c9      	lsls	r1, r1, #11
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4ba7      	ldr	r3, [pc, #668]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4ba6      	ldr	r3, [pc, #664]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0249      	lsls	r1, r1, #9
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e012      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 800141a:	4ba3      	ldr	r3, [pc, #652]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4ba2      	ldr	r3, [pc, #648]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001420:	49a2      	ldr	r1, [pc, #648]	; (80016ac <HAL_RCC_OscConfig+0x340>)
 8001422:	400a      	ands	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	4ba0      	ldr	r3, [pc, #640]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	025b      	lsls	r3, r3, #9
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b9b      	ldr	r3, [pc, #620]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800143a:	499d      	ldr	r1, [pc, #628]	; (80016b0 <HAL_RCC_OscConfig+0x344>)
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d015      	beq.n	8001474 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fd12 	bl	8000e70 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001450:	e009      	b.n	8001466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001452:	f7ff fd0d 	bl	8000e70 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	; 0x64
 800145e:	d902      	bls.n	8001466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	f000 fb4c 	bl	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001466:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	029b      	lsls	r3, r3, #10
 800146e:	4013      	ands	r3, r2
 8001470:	d0ef      	beq.n	8001452 <HAL_RCC_OscConfig+0xe6>
 8001472:	e015      	b.n	80014a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fcfc 	bl	8000e70 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147e:	f7ff fcf7 	bl	8000e70 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b64      	cmp	r3, #100	; 0x64
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e336      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001490:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	029b      	lsls	r3, r3, #10
 8001498:	4013      	ands	r3, r2
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x112>
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d100      	bne.n	80014ac <HAL_RCC_OscConfig+0x140>
 80014aa:	e099      	b.n	80015e0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	2220      	movs	r2, #32
 80014b6:	4013      	ands	r3, r2
 80014b8:	d009      	beq.n	80014ce <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80014c0:	2120      	movs	r1, #32
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	2220      	movs	r2, #32
 80014ca:	4393      	bics	r3, r2
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d13e      	bne.n	8001558 <HAL_RCC_OscConfig+0x1ec>
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d13b      	bne.n	8001558 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014e0:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2204      	movs	r2, #4
 80014e6:	4013      	ands	r3, r2
 80014e8:	d004      	beq.n	80014f4 <HAL_RCC_OscConfig+0x188>
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e304      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a6e      	ldr	r2, [pc, #440]	; (80016b4 <HAL_RCC_OscConfig+0x348>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	021a      	lsls	r2, r3, #8
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001506:	430a      	orrs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2209      	movs	r2, #9
 8001510:	4393      	bics	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800151c:	f000 fc42 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001520:	0001      	movs	r1, r0
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	220f      	movs	r2, #15
 800152a:	4013      	ands	r3, r2
 800152c:	4a62      	ldr	r2, [pc, #392]	; (80016b8 <HAL_RCC_OscConfig+0x34c>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	000a      	movs	r2, r1
 8001532:	40da      	lsrs	r2, r3
 8001534:	4b61      	ldr	r3, [pc, #388]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001536:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001538:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_RCC_OscConfig+0x354>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2513      	movs	r5, #19
 800153e:	197c      	adds	r4, r7, r5
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fc4f 	bl	8000de4 <HAL_InitTick>
 8001546:	0003      	movs	r3, r0
 8001548:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800154a:	197b      	adds	r3, r7, r5
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d046      	beq.n	80015e0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001552:	197b      	adds	r3, r7, r5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	e2d2      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	2b00      	cmp	r3, #0
 800155c:	d027      	beq.n	80015ae <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2209      	movs	r2, #9
 8001564:	4393      	bics	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc7e 	bl	8000e70 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fc79 	bl	8000e70 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e2b8      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158c:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2204      	movs	r2, #4
 8001592:	4013      	ands	r3, r2
 8001594:	d0f1      	beq.n	800157a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <HAL_RCC_OscConfig+0x348>)
 800159c:	4013      	ands	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	021a      	lsls	r2, r3, #8
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	e018      	b.n	80015e0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	438a      	bics	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc59 	bl	8000e70 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc54 	bl	8000e70 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e293      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2204      	movs	r2, #4
 80015dc:	4013      	ands	r3, r2
 80015de:	d1f1      	bne.n	80015c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2210      	movs	r2, #16
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x280>
 80015ea:	e0a2      	b.n	8001732 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d140      	bne.n	8001674 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x29e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e279      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_RCC_OscConfig+0x358>)
 8001610:	4013      	ands	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	0a19      	lsrs	r1, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	061a      	lsls	r2, r3, #24
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	0b5b      	lsrs	r3, r3, #13
 8001638:	3301      	adds	r3, #1
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0212      	lsls	r2, r2, #8
 800163e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	210f      	movs	r1, #15
 8001648:	400b      	ands	r3, r1
 800164a:	491b      	ldr	r1, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x34c>)
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_RCC_OscConfig+0x350>)
 8001652:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x354>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2513      	movs	r5, #19
 800165a:	197c      	adds	r4, r7, r5
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fbc1 	bl	8000de4 <HAL_InitTick>
 8001662:	0003      	movs	r3, r0
 8001664:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001666:	197b      	adds	r3, r7, r5
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d061      	beq.n	8001732 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800166e:	197b      	adds	r3, r7, r5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	e244      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d040      	beq.n	80016fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_OscConfig+0x33c>)
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	0049      	lsls	r1, r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fbf1 	bl	8000e70 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001692:	e019      	b.n	80016c8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001694:	f7ff fbec 	bl	8000e70 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d912      	bls.n	80016c8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e22b      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40021000 	.word	0x40021000
 80016ac:	fffeffff 	.word	0xfffeffff
 80016b0:	fffbffff 	.word	0xfffbffff
 80016b4:	ffffe0ff 	.word	0xffffe0ff
 80016b8:	080038f0 	.word	0x080038f0
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004
 80016c4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016c8:	4bca      	ldr	r3, [pc, #808]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d0df      	beq.n	8001694 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d4:	4bc7      	ldr	r3, [pc, #796]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4ac7      	ldr	r2, [pc, #796]	; (80019f8 <HAL_RCC_OscConfig+0x68c>)
 80016da:	4013      	ands	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	4bc4      	ldr	r3, [pc, #784]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4bc2      	ldr	r3, [pc, #776]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	0a19      	lsrs	r1, r3, #8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	061a      	lsls	r2, r3, #24
 80016f6:	4bbf      	ldr	r3, [pc, #764]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	e019      	b.n	8001732 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016fe:	4bbd      	ldr	r3, [pc, #756]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4bbc      	ldr	r3, [pc, #752]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001704:	49bd      	ldr	r1, [pc, #756]	; (80019fc <HAL_RCC_OscConfig+0x690>)
 8001706:	400a      	ands	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fbb1 	bl	8000e70 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001714:	f7ff fbac 	bl	8000e70 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1eb      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001726:	4bb3      	ldr	r3, [pc, #716]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2208      	movs	r2, #8
 8001738:	4013      	ands	r3, r2
 800173a:	d036      	beq.n	80017aa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d019      	beq.n	8001778 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001744:	4bab      	ldr	r3, [pc, #684]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001748:	4baa      	ldr	r3, [pc, #680]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fb8e 	bl	8000e70 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175a:	f7ff fb89 	bl	8000e70 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1c8      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800176c:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800176e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d0f1      	beq.n	800175a <HAL_RCC_OscConfig+0x3ee>
 8001776:	e018      	b.n	80017aa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b9e      	ldr	r3, [pc, #632]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800177a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177c:	4b9d      	ldr	r3, [pc, #628]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb74 	bl	8000e70 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fb6f 	bl	8000e70 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1ae      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a0:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80017a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d1f1      	bne.n	800178e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	d100      	bne.n	80017b6 <HAL_RCC_OscConfig+0x44a>
 80017b4:	e0ae      	b.n	8001914 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2023      	movs	r0, #35	; 0x23
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80017c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	055b      	lsls	r3, r3, #21
 80017c6:	4013      	ands	r3, r2
 80017c8:	d109      	bne.n	80017de <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b8a      	ldr	r3, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80017cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0549      	lsls	r1, r1, #21
 80017d4:	430a      	orrs	r2, r1
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x694>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d11a      	bne.n	8001820 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <HAL_RCC_OscConfig+0x694>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b84      	ldr	r3, [pc, #528]	; (8001a00 <HAL_RCC_OscConfig+0x694>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0049      	lsls	r1, r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb3a 	bl	8000e70 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fb35 	bl	8000e70 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e174      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x694>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x4d0>
 800182c:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800182e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001830:	4b70      	ldr	r3, [pc, #448]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0049      	lsls	r1, r1, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	651a      	str	r2, [r3, #80]	; 0x50
 800183a:	e031      	b.n	80018a0 <HAL_RCC_OscConfig+0x534>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x4f2>
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800184a:	496c      	ldr	r1, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x690>)
 800184c:	400a      	ands	r2, r1
 800184e:	651a      	str	r2, [r3, #80]	; 0x50
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001854:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001856:	496b      	ldr	r1, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x698>)
 8001858:	400a      	ands	r2, r1
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
 800185c:	e020      	b.n	80018a0 <HAL_RCC_OscConfig+0x534>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	23a0      	movs	r3, #160	; 0xa0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	429a      	cmp	r2, r3
 8001868:	d10e      	bne.n	8001888 <HAL_RCC_OscConfig+0x51c>
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800186c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800186e:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	00c9      	lsls	r1, r1, #3
 8001874:	430a      	orrs	r2, r1
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800187a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800187c:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0049      	lsls	r1, r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	651a      	str	r2, [r3, #80]	; 0x50
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0x534>
 8001888:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800188a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800188e:	495b      	ldr	r1, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x690>)
 8001890:	400a      	ands	r2, r1
 8001892:	651a      	str	r2, [r3, #80]	; 0x50
 8001894:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800189a:	495a      	ldr	r1, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x698>)
 800189c:	400a      	ands	r2, r1
 800189e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff fae2 	bl	8000e70 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fadd 	bl	8000e70 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_OscConfig+0x69c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e11b      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80018c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d0ef      	beq.n	80018b2 <HAL_RCC_OscConfig+0x546>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff facc 	bl	8000e70 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018dc:	e009      	b.n	80018f2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fac7 	bl	8000e70 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a47      	ldr	r2, [pc, #284]	; (8001a08 <HAL_RCC_OscConfig+0x69c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e105      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80018f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1ef      	bne.n	80018de <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018fe:	2323      	movs	r3, #35	; 0x23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800190a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800190e:	493f      	ldr	r1, [pc, #252]	; (8001a0c <HAL_RCC_OscConfig+0x6a0>)
 8001910:	400a      	ands	r2, r1
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2220      	movs	r2, #32
 800191a:	4013      	ands	r3, r2
 800191c:	d049      	beq.n	80019b2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d026      	beq.n	8001974 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800192c:	2101      	movs	r1, #1
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001938:	2101      	movs	r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_OscConfig+0x6a4>)
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_RCC_OscConfig+0x6a4>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	0189      	lsls	r1, r1, #6
 8001948:	430a      	orrs	r2, r1
 800194a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fa90 	bl	8000e70 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001956:	f7ff fa8b 	bl	8000e70 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0ca      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d0f1      	beq.n	8001956 <HAL_RCC_OscConfig+0x5ea>
 8001972:	e01e      	b.n	80019b2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_RCC_OscConfig+0x6a4>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_OscConfig+0x6a4>)
 8001986:	4923      	ldr	r1, [pc, #140]	; (8001a14 <HAL_RCC_OscConfig+0x6a8>)
 8001988:	400a      	ands	r2, r1
 800198a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa70 	bl	8000e70 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001996:	f7ff fa6b 	bl	8000e70 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0aa      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2202      	movs	r2, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d1f1      	bne.n	8001996 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d100      	bne.n	80019bc <HAL_RCC_OscConfig+0x650>
 80019ba:	e09f      	b.n	8001afc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x658>
 80019c2:	e078      	b.n	8001ab6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d159      	bne.n	8001a80 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_RCC_OscConfig+0x688>)
 80019d2:	4911      	ldr	r1, [pc, #68]	; (8001a18 <HAL_RCC_OscConfig+0x6ac>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa4a 	bl	8000e70 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fa45 	bl	8000e70 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d915      	bls.n	8001a1c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e084      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	ffff1fff 	.word	0xffff1fff
 80019fc:	fffffeff 	.word	0xfffffeff
 8001a00:	40007000 	.word	0x40007000
 8001a04:	fffffbff 	.word	0xfffffbff
 8001a08:	00001388 	.word	0x00001388
 8001a0c:	efffffff 	.word	0xefffffff
 8001a10:	40010000 	.word	0x40010000
 8001a14:	ffffdfff 	.word	0xffffdfff
 8001a18:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	049b      	lsls	r3, r3, #18
 8001a24:	4013      	ands	r3, r2
 8001a26:	d1dc      	bne.n	80019e2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <HAL_RCC_OscConfig+0x7a0>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	431a      	orrs	r2, r3
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0449      	lsls	r1, r1, #17
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff fa0b 	bl	8000e70 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff fa06 	bl	8000e70 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e045      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x6f4>
 8001a7e:	e03d      	b.n	8001afc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001a86:	4922      	ldr	r1, [pc, #136]	; (8001b10 <HAL_RCC_OscConfig+0x7a4>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f9f0 	bl	8000e70 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f9eb 	bl	8000e70 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e02a      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	049b      	lsls	r3, r3, #18
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x72a>
 8001ab4:	e022      	b.n	8001afc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e01d      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_RCC_OscConfig+0x79c>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	025b      	lsls	r3, r3, #9
 8001ace:	401a      	ands	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10f      	bne.n	8001af8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	23f0      	movs	r3, #240	; 0xf0
 8001adc:	039b      	lsls	r3, r3, #14
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	23c0      	movs	r3, #192	; 0xc0
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b00a      	add	sp, #40	; 0x28
 8001b04:	bdb0      	pop	{r4, r5, r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	ff02ffff 	.word	0xff02ffff
 8001b10:	feffffff 	.word	0xfeffffff

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e128      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d91e      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f992 	bl	8000e70 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff f98d 	bl	8000e70 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a8a      	ldr	r2, [pc, #552]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e109      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b87      	ldr	r3, [pc, #540]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7e:	4b83      	ldr	r3, [pc, #524]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	22f0      	movs	r2, #240	; 0xf0
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x8a>
 8001b9c:	e089      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba6:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	029b      	lsls	r3, r3, #10
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d120      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0e1      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	049b      	lsls	r3, r3, #18
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d114      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0d5      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0ca      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001be4:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0c2      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf4:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f932 	bl	8000e70 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d111      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7ff f929 	bl	8000e70 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0a5      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	220c      	movs	r2, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x106>
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d111      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c46:	f7ff f913 	bl	8000e70 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e08f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x132>
 8001c66:	e024      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c70:	e009      	b.n	8001c86 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c72:	f7ff f8fd 	bl	8000e70 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e079      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d1ef      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x15e>
 8001c92:	e00e      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff f8ec 	bl	8000e70 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e068      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d21e      	bcs.n	8001cfe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4393      	bics	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd2:	f7ff f8cd 	bl	8000e70 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	e009      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f8c8 	bl	8000e70 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e044      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_RCC_ClockConfig+0x27c>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2208      	movs	r2, #8
 8001d22:	4013      	ands	r3, r2
 8001d24:	d00a      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_RCC_ClockConfig+0x280>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	00da      	lsls	r2, r3, #3
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3c:	f000 f832 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d40:	0001      	movs	r1, r0
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_ClockConfig+0x278>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	220f      	movs	r2, #15
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_RCC_ClockConfig+0x284>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	000a      	movs	r2, r1
 8001d52:	40da      	lsrs	r2, r3
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_RCC_ClockConfig+0x288>)
 8001d56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_ClockConfig+0x28c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	250b      	movs	r5, #11
 8001d5e:	197c      	adds	r4, r7, r5
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff f83f 	bl	8000de4 <HAL_InitTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d6a:	197b      	adds	r3, r7, r5
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d72:	197b      	adds	r3, r7, r5
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40022000 	.word	0x40022000
 8001d88:	00001388 	.word	0x00001388
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	fffff8ff 	.word	0xfffff8ff
 8001d94:	ffffc7ff 	.word	0xffffc7ff
 8001d98:	080038f0 	.word	0x080038f0
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	b08e      	sub	sp, #56	; 0x38
 8001da8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001daa:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_GetSysClockFreq+0x138>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db2:	230c      	movs	r3, #12
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d014      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dba:	d900      	bls.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1a>
 8001dbc:	e07b      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x112>
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x24>
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x3a>
 8001dc6:	e076      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dc8:	4b44      	ldr	r3, [pc, #272]	; (8001edc <HAL_RCC_GetSysClockFreq+0x138>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001dd6:	e07c      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ddc:	e079      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001de2:	e076      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	0c9a      	lsrs	r2, r3, #18
 8001de8:	230f      	movs	r3, #15
 8001dea:	401a      	ands	r2, r3
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_GetSysClockFreq+0x148>)
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	0d9a      	lsrs	r2, r3, #22
 8001df6:	2303      	movs	r3, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_GetSysClockFreq+0x138>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	025b      	lsls	r3, r3, #9
 8001e06:	4013      	ands	r3, r2
 8001e08:	d01a      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	4a35      	ldr	r2, [pc, #212]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e14:	2300      	movs	r3, #0
 8001e16:	69b8      	ldr	r0, [r7, #24]
 8001e18:	69f9      	ldr	r1, [r7, #28]
 8001e1a:	f7fe fa2b 	bl	8000274 <__aeabi_lmul>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	000b      	movs	r3, r1
 8001e22:	0010      	movs	r0, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f7fe f9ff 	bl	8000234 <__aeabi_uldivmod>
 8001e36:	0002      	movs	r2, r0
 8001e38:	000b      	movs	r3, r1
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e3e:	e037      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_GetSysClockFreq+0x138>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	4013      	ands	r3, r2
 8001e48:	d01a      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e54:	2300      	movs	r3, #0
 8001e56:	68b8      	ldr	r0, [r7, #8]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	f7fe fa0b 	bl	8000274 <__aeabi_lmul>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	000b      	movs	r3, r1
 8001e62:	0010      	movs	r0, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f7fe f9df 	bl	8000234 <__aeabi_uldivmod>
 8001e76:	0002      	movs	r2, r0
 8001e78:	000b      	movs	r3, r1
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7e:	e017      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	0018      	movs	r0, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	0019      	movs	r1, r3
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f7fe f9f2 	bl	8000274 <__aeabi_lmul>
 8001e90:	0002      	movs	r2, r0
 8001e92:	000b      	movs	r3, r1
 8001e94:	0010      	movs	r0, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	001c      	movs	r4, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	001d      	movs	r5, r3
 8001ea0:	0022      	movs	r2, r4
 8001ea2:	002b      	movs	r3, r5
 8001ea4:	f7fe f9c6 	bl	8000234 <__aeabi_uldivmod>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	000b      	movs	r3, r1
 8001eac:	0013      	movs	r3, r2
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb4:	e00d      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_GetSysClockFreq+0x138>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0b5b      	lsrs	r3, r3, #13
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	0212      	lsls	r2, r2, #8
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b00e      	add	sp, #56	; 0x38
 8001eda:	bdb0      	pop	{r4, r5, r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	003d0900 	.word	0x003d0900
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200
 8001eec:	08003908 	.word	0x08003908

08001ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000000 	.word	0x20000000

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f08:	f7ff fff2 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	40d9      	lsrs	r1, r3
 8001f1e:	000b      	movs	r3, r1
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003900 	.word	0x08003900

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f34:	f7ff ffdc 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f38:	0001      	movs	r1, r0
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0adb      	lsrs	r3, r3, #11
 8001f40:	2207      	movs	r2, #7
 8001f42:	4013      	ands	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	000b      	movs	r3, r1
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003900 	.word	0x08003900

08001f5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f64:	2317      	movs	r3, #23
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2220      	movs	r2, #32
 8001f72:	4013      	ands	r3, r2
 8001f74:	d106      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d100      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f82:	e0d9      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f84:	4ba4      	ldr	r3, [pc, #656]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	055b      	lsls	r3, r3, #21
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4ba1      	ldr	r3, [pc, #644]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f94:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0549      	lsls	r1, r1, #21
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f9e:	2317      	movs	r3, #23
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b9d      	ldr	r3, [pc, #628]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b9a      	ldr	r3, [pc, #616]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b99      	ldr	r3, [pc, #612]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0049      	lsls	r1, r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc0:	f7fe ff56 	bl	8000e70 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7fe ff51 	bl	8000e70 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e118      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fe8:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	23c0      	movs	r3, #192	; 0xc0
 8001fee:	039b      	lsls	r3, r3, #14
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	23c0      	movs	r3, #192	; 0xc0
 8001ffa:	039b      	lsls	r3, r3, #14
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d107      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	23c0      	movs	r3, #192	; 0xc0
 800200a:	039b      	lsls	r3, r3, #14
 800200c:	4013      	ands	r3, r2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d013      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	23c0      	movs	r3, #192	; 0xc0
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	401a      	ands	r2, r3
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	429a      	cmp	r2, r3
 8002024:	d10a      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002026:	4b7c      	ldr	r3, [pc, #496]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	401a      	ands	r2, r3
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	429a      	cmp	r2, r3
 8002036:	d101      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0e8      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800203c:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800203e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002040:	23c0      	movs	r3, #192	; 0xc0
 8002042:	029b      	lsls	r3, r3, #10
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d049      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	429a      	cmp	r2, r3
 800205c:	d004      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2220      	movs	r2, #32
 8002064:	4013      	ands	r3, r2
 8002066:	d10d      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	23c0      	movs	r3, #192	; 0xc0
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d034      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4013      	ands	r3, r2
 8002082:	d02e      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800208a:	4013      	ands	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800208e:	4b62      	ldr	r3, [pc, #392]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002092:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0309      	lsls	r1, r1, #12
 8002098:	430a      	orrs	r2, r1
 800209a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800209c:	4b5e      	ldr	r3, [pc, #376]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800209e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020a2:	4960      	ldr	r1, [pc, #384]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80020a8:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	d014      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe feda 	bl	8000e70 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020c0:	e009      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fed5 	bl	8000e70 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4a56      	ldr	r2, [pc, #344]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e09b      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020d6:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d0ef      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	401a      	ands	r2, r3
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10c      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80020f4:	4b48      	ldr	r3, [pc, #288]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	039b      	lsls	r3, r3, #14
 8002106:	401a      	ands	r2, r3
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002110:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	401a      	ands	r2, r3
 800211c:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800211e:	430a      	orrs	r2, r1
 8002120:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800212e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002130:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002132:	493f      	ldr	r1, [pc, #252]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002134:	400a      	ands	r2, r1
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	2203      	movs	r2, #3
 8002148:	4393      	bics	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002152:	430a      	orrs	r2, r1
 8002154:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	220c      	movs	r2, #12
 8002166:	4393      	bics	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002170:	430a      	orrs	r2, r1
 8002172:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2204      	movs	r2, #4
 800217a:	4013      	ands	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800218e:	430a      	orrs	r2, r1
 8002190:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2208      	movs	r2, #8
 8002198:	4013      	ands	r3, r2
 800219a:	d009      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	4013      	ands	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	4013      	ands	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002208:	430a      	orrs	r2, r1
 800220a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b006      	add	sp, #24
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
 8002220:	fffcffff 	.word	0xfffcffff
 8002224:	fff7ffff 	.word	0xfff7ffff
 8002228:	00001388 	.word	0x00001388
 800222c:	ffcfffff 	.word	0xffcfffff
 8002230:	efffffff 	.word	0xefffffff
 8002234:	fffff3ff 	.word	0xfffff3ff
 8002238:	ffffcfff 	.word	0xffffcfff
 800223c:	fbffffff 	.word	0xfbffffff
 8002240:	fff3ffff 	.word	0xfff3ffff

08002244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e044      	b.n	80022e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2274      	movs	r2, #116	; 0x74
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f7fe fcd9 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2224      	movs	r2, #36	; 0x24
 8002272:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f9c6 	bl	8002618 <UART_SetConfig>
 800228c:	0003      	movs	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e024      	b.n	80022e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fc77 	bl	8002b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	490d      	ldr	r1, [pc, #52]	; (80022e8 <HAL_UART_Init+0xa4>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	212a      	movs	r1, #42	; 0x2a
 80022c2:	438a      	bics	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 fd0f 	bl	8002cfc <UART_CheckIdleState>
 80022de:	0003      	movs	r3, r0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	ffffb7ff 	.word	0xffffb7ff

080022ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	1dbb      	adds	r3, r7, #6
 80022fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002300:	2b20      	cmp	r3, #32
 8002302:	d000      	beq.n	8002306 <HAL_UART_Transmit+0x1a>
 8002304:	e095      	b.n	8002432 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_UART_Transmit+0x28>
 800230c:	1dbb      	adds	r3, r7, #6
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e08d      	b.n	8002434 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	429a      	cmp	r2, r3
 8002322:	d109      	bne.n	8002338 <HAL_UART_Transmit+0x4c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	d001      	beq.n	8002338 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e07d      	b.n	8002434 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2274      	movs	r2, #116	; 0x74
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_UART_Transmit+0x5a>
 8002342:	2302      	movs	r3, #2
 8002344:	e076      	b.n	8002434 <HAL_UART_Transmit+0x148>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2274      	movs	r2, #116	; 0x74
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	2100      	movs	r1, #0
 8002354:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235c:	f7fe fd88 	bl	8000e70 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1dba      	adds	r2, r7, #6
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1dba      	adds	r2, r7, #6
 8002372:	2152      	movs	r1, #82	; 0x52
 8002374:	8812      	ldrh	r2, [r2, #0]
 8002376:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	429a      	cmp	r2, r3
 8002382:	d108      	bne.n	8002396 <HAL_UART_Transmit+0xaa>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e003      	b.n	800239e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2274      	movs	r2, #116	; 0x74
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80023a6:	e02c      	b.n	8002402 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	0013      	movs	r3, r2
 80023b2:	2200      	movs	r2, #0
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	f000 fce9 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e038      	b.n	8002434 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	001a      	movs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	05d2      	lsls	r2, r2, #23
 80023d4:	0dd2      	lsrs	r2, r2, #23
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	3302      	adds	r3, #2
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e007      	b.n	80023f0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2252      	movs	r2, #82	; 0x52
 80023f4:	5a9b      	ldrh	r3, [r3, r2]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b299      	uxth	r1, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2252      	movs	r2, #82	; 0x52
 8002400:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2252      	movs	r2, #82	; 0x52
 8002406:	5a9b      	ldrh	r3, [r3, r2]
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1cc      	bne.n	80023a8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	0013      	movs	r3, r2
 8002418:	2200      	movs	r2, #0
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	f000 fcb6 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e005      	b.n	8002434 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
  }
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b008      	add	sp, #32
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	1dbb      	adds	r3, r7, #6
 800244a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002450:	2b20      	cmp	r3, #32
 8002452:	d000      	beq.n	8002456 <HAL_UART_Receive+0x1a>
 8002454:	e0d9      	b.n	800260a <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_UART_Receive+0x28>
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d1      	b.n	800260c <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	429a      	cmp	r2, r3
 8002472:	d109      	bne.n	8002488 <HAL_UART_Receive+0x4c>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2201      	movs	r2, #1
 8002480:	4013      	ands	r3, r2
 8002482:	d001      	beq.n	8002488 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0c1      	b.n	800260c <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2274      	movs	r2, #116	; 0x74
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_UART_Receive+0x5a>
 8002492:	2302      	movs	r3, #2
 8002494:	e0ba      	b.n	800260c <HAL_UART_Receive+0x1d0>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2274      	movs	r2, #116	; 0x74
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	2100      	movs	r1, #0
 80024a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2222      	movs	r2, #34	; 0x22
 80024aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b2:	f7fe fcdd 	bl	8000e70 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1dba      	adds	r2, r7, #6
 80024be:	2158      	movs	r1, #88	; 0x58
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1dba      	adds	r2, r7, #6
 80024c8:	215a      	movs	r1, #90	; 0x5a
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10d      	bne.n	80024f6 <HAL_UART_Receive+0xba>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_UART_Receive+0xb0>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	225c      	movs	r2, #92	; 0x5c
 80024e6:	494b      	ldr	r1, [pc, #300]	; (8002614 <HAL_UART_Receive+0x1d8>)
 80024e8:	5299      	strh	r1, [r3, r2]
 80024ea:	e02e      	b.n	800254a <HAL_UART_Receive+0x10e>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	225c      	movs	r2, #92	; 0x5c
 80024f0:	21ff      	movs	r1, #255	; 0xff
 80024f2:	5299      	strh	r1, [r3, r2]
 80024f4:	e029      	b.n	800254a <HAL_UART_Receive+0x10e>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_UART_Receive+0xde>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <HAL_UART_Receive+0xd4>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	225c      	movs	r2, #92	; 0x5c
 800250a:	21ff      	movs	r1, #255	; 0xff
 800250c:	5299      	strh	r1, [r3, r2]
 800250e:	e01c      	b.n	800254a <HAL_UART_Receive+0x10e>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	225c      	movs	r2, #92	; 0x5c
 8002514:	217f      	movs	r1, #127	; 0x7f
 8002516:	5299      	strh	r1, [r3, r2]
 8002518:	e017      	b.n	800254a <HAL_UART_Receive+0x10e>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	055b      	lsls	r3, r3, #21
 8002522:	429a      	cmp	r2, r3
 8002524:	d10d      	bne.n	8002542 <HAL_UART_Receive+0x106>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <HAL_UART_Receive+0xfc>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	225c      	movs	r2, #92	; 0x5c
 8002532:	217f      	movs	r1, #127	; 0x7f
 8002534:	5299      	strh	r1, [r3, r2]
 8002536:	e008      	b.n	800254a <HAL_UART_Receive+0x10e>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	225c      	movs	r2, #92	; 0x5c
 800253c:	213f      	movs	r1, #63	; 0x3f
 800253e:	5299      	strh	r1, [r3, r2]
 8002540:	e003      	b.n	800254a <HAL_UART_Receive+0x10e>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	225c      	movs	r2, #92	; 0x5c
 8002546:	2100      	movs	r1, #0
 8002548:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800254a:	2312      	movs	r3, #18
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	215c      	movs	r1, #92	; 0x5c
 8002552:	5a52      	ldrh	r2, [r2, r1]
 8002554:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	429a      	cmp	r2, r3
 8002560:	d108      	bne.n	8002574 <HAL_UART_Receive+0x138>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e003      	b.n	800257c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2274      	movs	r2, #116	; 0x74
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002584:	e036      	b.n	80025f4 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	0013      	movs	r3, r2
 8002590:	2200      	movs	r2, #0
 8002592:	2120      	movs	r1, #32
 8002594:	f000 fbfa 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e035      	b.n	800260c <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10e      	bne.n	80025c4 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2212      	movs	r2, #18
 80025b0:	18ba      	adds	r2, r7, r2
 80025b2:	8812      	ldrh	r2, [r2, #0]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	3302      	adds	r3, #2
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e00e      	b.n	80025e2 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2212      	movs	r2, #18
 80025ce:	18ba      	adds	r2, r7, r2
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	225a      	movs	r2, #90	; 0x5a
 80025e6:	5a9b      	ldrh	r3, [r3, r2]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b299      	uxth	r1, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	225a      	movs	r2, #90	; 0x5a
 80025f2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	225a      	movs	r2, #90	; 0x5a
 80025f8:	5a9b      	ldrh	r3, [r3, r2]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1c2      	bne.n	8002586 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b008      	add	sp, #32
 8002612:	bd80      	pop	{r7, pc}
 8002614:	000001ff 	.word	0x000001ff

08002618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002620:	231a      	movs	r3, #26
 8002622:	2218      	movs	r2, #24
 8002624:	4694      	mov	ip, r2
 8002626:	44bc      	add	ip, r7
 8002628:	4463      	add	r3, ip
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	431a      	orrs	r2, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	431a      	orrs	r2, r3
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4313      	orrs	r3, r2
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4ab0      	ldr	r2, [pc, #704]	; (8002910 <UART_SetConfig+0x2f8>)
 800264e:	4013      	ands	r3, r2
 8002650:	0019      	movs	r1, r3
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4aac      	ldr	r2, [pc, #688]	; (8002914 <UART_SetConfig+0x2fc>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4aa6      	ldr	r2, [pc, #664]	; (8002918 <UART_SetConfig+0x300>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268a:	4313      	orrs	r3, r2
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4aa1      	ldr	r2, [pc, #644]	; (800291c <UART_SetConfig+0x304>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a9d      	ldr	r2, [pc, #628]	; (8002920 <UART_SetConfig+0x308>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d136      	bne.n	800271c <UART_SetConfig+0x104>
 80026ae:	4b9d      	ldr	r3, [pc, #628]	; (8002924 <UART_SetConfig+0x30c>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	2203      	movs	r2, #3
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d020      	beq.n	80026fc <UART_SetConfig+0xe4>
 80026ba:	d827      	bhi.n	800270c <UART_SetConfig+0xf4>
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d00d      	beq.n	80026dc <UART_SetConfig+0xc4>
 80026c0:	d824      	bhi.n	800270c <UART_SetConfig+0xf4>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <UART_SetConfig+0xb4>
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d010      	beq.n	80026ec <UART_SetConfig+0xd4>
 80026ca:	e01f      	b.n	800270c <UART_SetConfig+0xf4>
 80026cc:	231b      	movs	r3, #27
 80026ce:	2218      	movs	r2, #24
 80026d0:	4694      	mov	ip, r2
 80026d2:	44bc      	add	ip, r7
 80026d4:	4463      	add	r3, ip
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e0c5      	b.n	8002868 <UART_SetConfig+0x250>
 80026dc:	231b      	movs	r3, #27
 80026de:	2218      	movs	r2, #24
 80026e0:	4694      	mov	ip, r2
 80026e2:	44bc      	add	ip, r7
 80026e4:	4463      	add	r3, ip
 80026e6:	2202      	movs	r2, #2
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e0bd      	b.n	8002868 <UART_SetConfig+0x250>
 80026ec:	231b      	movs	r3, #27
 80026ee:	2218      	movs	r2, #24
 80026f0:	4694      	mov	ip, r2
 80026f2:	44bc      	add	ip, r7
 80026f4:	4463      	add	r3, ip
 80026f6:	2204      	movs	r2, #4
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e0b5      	b.n	8002868 <UART_SetConfig+0x250>
 80026fc:	231b      	movs	r3, #27
 80026fe:	2218      	movs	r2, #24
 8002700:	4694      	mov	ip, r2
 8002702:	44bc      	add	ip, r7
 8002704:	4463      	add	r3, ip
 8002706:	2208      	movs	r2, #8
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e0ad      	b.n	8002868 <UART_SetConfig+0x250>
 800270c:	231b      	movs	r3, #27
 800270e:	2218      	movs	r2, #24
 8002710:	4694      	mov	ip, r2
 8002712:	44bc      	add	ip, r7
 8002714:	4463      	add	r3, ip
 8002716:	2210      	movs	r2, #16
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e0a5      	b.n	8002868 <UART_SetConfig+0x250>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a81      	ldr	r2, [pc, #516]	; (8002928 <UART_SetConfig+0x310>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d136      	bne.n	8002794 <UART_SetConfig+0x17c>
 8002726:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <UART_SetConfig+0x30c>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	220c      	movs	r2, #12
 800272c:	4013      	ands	r3, r2
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d020      	beq.n	8002774 <UART_SetConfig+0x15c>
 8002732:	d827      	bhi.n	8002784 <UART_SetConfig+0x16c>
 8002734:	2b08      	cmp	r3, #8
 8002736:	d00d      	beq.n	8002754 <UART_SetConfig+0x13c>
 8002738:	d824      	bhi.n	8002784 <UART_SetConfig+0x16c>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <UART_SetConfig+0x12c>
 800273e:	2b04      	cmp	r3, #4
 8002740:	d010      	beq.n	8002764 <UART_SetConfig+0x14c>
 8002742:	e01f      	b.n	8002784 <UART_SetConfig+0x16c>
 8002744:	231b      	movs	r3, #27
 8002746:	2218      	movs	r2, #24
 8002748:	4694      	mov	ip, r2
 800274a:	44bc      	add	ip, r7
 800274c:	4463      	add	r3, ip
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e089      	b.n	8002868 <UART_SetConfig+0x250>
 8002754:	231b      	movs	r3, #27
 8002756:	2218      	movs	r2, #24
 8002758:	4694      	mov	ip, r2
 800275a:	44bc      	add	ip, r7
 800275c:	4463      	add	r3, ip
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e081      	b.n	8002868 <UART_SetConfig+0x250>
 8002764:	231b      	movs	r3, #27
 8002766:	2218      	movs	r2, #24
 8002768:	4694      	mov	ip, r2
 800276a:	44bc      	add	ip, r7
 800276c:	4463      	add	r3, ip
 800276e:	2204      	movs	r2, #4
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e079      	b.n	8002868 <UART_SetConfig+0x250>
 8002774:	231b      	movs	r3, #27
 8002776:	2218      	movs	r2, #24
 8002778:	4694      	mov	ip, r2
 800277a:	44bc      	add	ip, r7
 800277c:	4463      	add	r3, ip
 800277e:	2208      	movs	r2, #8
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e071      	b.n	8002868 <UART_SetConfig+0x250>
 8002784:	231b      	movs	r3, #27
 8002786:	2218      	movs	r2, #24
 8002788:	4694      	mov	ip, r2
 800278a:	44bc      	add	ip, r7
 800278c:	4463      	add	r3, ip
 800278e:	2210      	movs	r2, #16
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e069      	b.n	8002868 <UART_SetConfig+0x250>
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a64      	ldr	r2, [pc, #400]	; (800292c <UART_SetConfig+0x314>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d107      	bne.n	80027ae <UART_SetConfig+0x196>
 800279e:	231b      	movs	r3, #27
 80027a0:	2218      	movs	r2, #24
 80027a2:	4694      	mov	ip, r2
 80027a4:	44bc      	add	ip, r7
 80027a6:	4463      	add	r3, ip
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e05c      	b.n	8002868 <UART_SetConfig+0x250>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5f      	ldr	r2, [pc, #380]	; (8002930 <UART_SetConfig+0x318>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d107      	bne.n	80027c8 <UART_SetConfig+0x1b0>
 80027b8:	231b      	movs	r3, #27
 80027ba:	2218      	movs	r2, #24
 80027bc:	4694      	mov	ip, r2
 80027be:	44bc      	add	ip, r7
 80027c0:	4463      	add	r3, ip
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e04f      	b.n	8002868 <UART_SetConfig+0x250>
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <UART_SetConfig+0x300>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d143      	bne.n	800285a <UART_SetConfig+0x242>
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <UART_SetConfig+0x30c>)
 80027d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4013      	ands	r3, r2
 80027dc:	22c0      	movs	r2, #192	; 0xc0
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d02a      	beq.n	800283a <UART_SetConfig+0x222>
 80027e4:	22c0      	movs	r2, #192	; 0xc0
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d82e      	bhi.n	800284a <UART_SetConfig+0x232>
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d012      	beq.n	800281a <UART_SetConfig+0x202>
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d826      	bhi.n	800284a <UART_SetConfig+0x232>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <UART_SetConfig+0x1f2>
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	00d2      	lsls	r2, r2, #3
 8002804:	4293      	cmp	r3, r2
 8002806:	d010      	beq.n	800282a <UART_SetConfig+0x212>
 8002808:	e01f      	b.n	800284a <UART_SetConfig+0x232>
 800280a:	231b      	movs	r3, #27
 800280c:	2218      	movs	r2, #24
 800280e:	4694      	mov	ip, r2
 8002810:	44bc      	add	ip, r7
 8002812:	4463      	add	r3, ip
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e026      	b.n	8002868 <UART_SetConfig+0x250>
 800281a:	231b      	movs	r3, #27
 800281c:	2218      	movs	r2, #24
 800281e:	4694      	mov	ip, r2
 8002820:	44bc      	add	ip, r7
 8002822:	4463      	add	r3, ip
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e01e      	b.n	8002868 <UART_SetConfig+0x250>
 800282a:	231b      	movs	r3, #27
 800282c:	2218      	movs	r2, #24
 800282e:	4694      	mov	ip, r2
 8002830:	44bc      	add	ip, r7
 8002832:	4463      	add	r3, ip
 8002834:	2204      	movs	r2, #4
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e016      	b.n	8002868 <UART_SetConfig+0x250>
 800283a:	231b      	movs	r3, #27
 800283c:	2218      	movs	r2, #24
 800283e:	4694      	mov	ip, r2
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	2208      	movs	r2, #8
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e00e      	b.n	8002868 <UART_SetConfig+0x250>
 800284a:	231b      	movs	r3, #27
 800284c:	2218      	movs	r2, #24
 800284e:	4694      	mov	ip, r2
 8002850:	44bc      	add	ip, r7
 8002852:	4463      	add	r3, ip
 8002854:	2210      	movs	r2, #16
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e006      	b.n	8002868 <UART_SetConfig+0x250>
 800285a:	231b      	movs	r3, #27
 800285c:	2218      	movs	r2, #24
 800285e:	4694      	mov	ip, r2
 8002860:	44bc      	add	ip, r7
 8002862:	4463      	add	r3, ip
 8002864:	2210      	movs	r2, #16
 8002866:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <UART_SetConfig+0x300>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d000      	beq.n	8002874 <UART_SetConfig+0x25c>
 8002872:	e09e      	b.n	80029b2 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002874:	231b      	movs	r3, #27
 8002876:	2218      	movs	r2, #24
 8002878:	4694      	mov	ip, r2
 800287a:	44bc      	add	ip, r7
 800287c:	4463      	add	r3, ip
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d01d      	beq.n	80028c0 <UART_SetConfig+0x2a8>
 8002884:	dc20      	bgt.n	80028c8 <UART_SetConfig+0x2b0>
 8002886:	2b04      	cmp	r3, #4
 8002888:	d015      	beq.n	80028b6 <UART_SetConfig+0x29e>
 800288a:	dc1d      	bgt.n	80028c8 <UART_SetConfig+0x2b0>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <UART_SetConfig+0x27e>
 8002890:	2b02      	cmp	r3, #2
 8002892:	d005      	beq.n	80028a0 <UART_SetConfig+0x288>
 8002894:	e018      	b.n	80028c8 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002896:	f7ff fb35 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 800289a:	0003      	movs	r3, r0
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800289e:	e01d      	b.n	80028dc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <UART_SetConfig+0x30c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2210      	movs	r2, #16
 80028a6:	4013      	ands	r3, r2
 80028a8:	d002      	beq.n	80028b0 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <UART_SetConfig+0x31c>)
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028ae:	e015      	b.n	80028dc <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <UART_SetConfig+0x320>)
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028b4:	e012      	b.n	80028dc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b6:	f7ff fa75 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 80028ba:	0003      	movs	r3, r0
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028be:	e00d      	b.n	80028dc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c6:	e009      	b.n	80028dc <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028cc:	231a      	movs	r3, #26
 80028ce:	2218      	movs	r2, #24
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
        break;
 80028da:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d100      	bne.n	80028e4 <UART_SetConfig+0x2cc>
 80028e2:	e13c      	b.n	8002b5e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	0013      	movs	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	189b      	adds	r3, r3, r2
 80028ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d305      	bcc.n	8002900 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d91d      	bls.n	800293c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002900:	231a      	movs	r3, #26
 8002902:	2218      	movs	r2, #24
 8002904:	4694      	mov	ip, r2
 8002906:	44bc      	add	ip, r7
 8002908:	4463      	add	r3, ip
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e126      	b.n	8002b5e <UART_SetConfig+0x546>
 8002910:	efff69f3 	.word	0xefff69f3
 8002914:	ffffcfff 	.word	0xffffcfff
 8002918:	40004800 	.word	0x40004800
 800291c:	fffff4ff 	.word	0xfffff4ff
 8002920:	40013800 	.word	0x40013800
 8002924:	40021000 	.word	0x40021000
 8002928:	40004400 	.word	0x40004400
 800292c:	40004c00 	.word	0x40004c00
 8002930:	40005000 	.word	0x40005000
 8002934:	003d0900 	.word	0x003d0900
 8002938:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	6939      	ldr	r1, [r7, #16]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	000b      	movs	r3, r1
 800294a:	0e1b      	lsrs	r3, r3, #24
 800294c:	0010      	movs	r0, r2
 800294e:	0205      	lsls	r5, r0, #8
 8002950:	431d      	orrs	r5, r3
 8002952:	000b      	movs	r3, r1
 8002954:	021c      	lsls	r4, r3, #8
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68b8      	ldr	r0, [r7, #8]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	1900      	adds	r0, r0, r4
 8002968:	4169      	adcs	r1, r5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f7fd fc5c 	bl	8000234 <__aeabi_uldivmod>
 800297c:	0002      	movs	r2, r0
 800297e:	000b      	movs	r3, r1
 8002980:	0013      	movs	r3, r2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	429a      	cmp	r2, r3
 800298c:	d309      	bcc.n	80029a2 <UART_SetConfig+0x38a>
 800298e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	035b      	lsls	r3, r3, #13
 8002994:	429a      	cmp	r2, r3
 8002996:	d204      	bcs.n	80029a2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	e0dd      	b.n	8002b5e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80029a2:	231a      	movs	r3, #26
 80029a4:	2218      	movs	r2, #24
 80029a6:	4694      	mov	ip, r2
 80029a8:	44bc      	add	ip, r7
 80029aa:	4463      	add	r3, ip
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e0d5      	b.n	8002b5e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d000      	beq.n	80029c0 <UART_SetConfig+0x3a8>
 80029be:	e074      	b.n	8002aaa <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80029c0:	231b      	movs	r3, #27
 80029c2:	2218      	movs	r2, #24
 80029c4:	4694      	mov	ip, r2
 80029c6:	44bc      	add	ip, r7
 80029c8:	4463      	add	r3, ip
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d822      	bhi.n	8002a16 <UART_SetConfig+0x3fe>
 80029d0:	009a      	lsls	r2, r3, #2
 80029d2:	4b6b      	ldr	r3, [pc, #428]	; (8002b80 <UART_SetConfig+0x568>)
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029da:	f7ff fa93 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 80029de:	0003      	movs	r3, r0
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029e2:	e022      	b.n	8002a2a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029e4:	f7ff faa4 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 80029e8:	0003      	movs	r3, r0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ec:	e01d      	b.n	8002a2a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <UART_SetConfig+0x56c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2210      	movs	r2, #16
 80029f4:	4013      	ands	r3, r2
 80029f6:	d002      	beq.n	80029fe <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029f8:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <UART_SetConfig+0x570>)
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029fc:	e015      	b.n	8002a2a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80029fe:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <UART_SetConfig+0x574>)
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a02:	e012      	b.n	8002a2a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a04:	f7ff f9ce 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a0c:	e00d      	b.n	8002a2a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a14:	e009      	b.n	8002a2a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a1a:	231a      	movs	r3, #26
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	4694      	mov	ip, r2
 8002a20:	44bc      	add	ip, r7
 8002a22:	4463      	add	r3, ip
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
        break;
 8002a28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d100      	bne.n	8002a32 <UART_SetConfig+0x41a>
 8002a30:	e095      	b.n	8002b5e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	005a      	lsls	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	18d2      	adds	r2, r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f7fd fb69 	bl	800011c <__udivsi3>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d921      	bls.n	8002a9a <UART_SetConfig+0x482>
 8002a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d21c      	bcs.n	8002a9a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	200e      	movs	r0, #14
 8002a66:	2418      	movs	r4, #24
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	181b      	adds	r3, r3, r0
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	438a      	bics	r2, r1
 8002a70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	b299      	uxth	r1, r3
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	181b      	adds	r3, r3, r0
 8002a82:	193a      	adds	r2, r7, r4
 8002a84:	1812      	adds	r2, r2, r0
 8002a86:	8812      	ldrh	r2, [r2, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	193a      	adds	r2, r7, r4
 8002a92:	1812      	adds	r2, r2, r0
 8002a94:	8812      	ldrh	r2, [r2, #0]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	e061      	b.n	8002b5e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002a9a:	231a      	movs	r3, #26
 8002a9c:	2218      	movs	r2, #24
 8002a9e:	4694      	mov	ip, r2
 8002aa0:	44bc      	add	ip, r7
 8002aa2:	4463      	add	r3, ip
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e059      	b.n	8002b5e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aaa:	231b      	movs	r3, #27
 8002aac:	2218      	movs	r2, #24
 8002aae:	4694      	mov	ip, r2
 8002ab0:	44bc      	add	ip, r7
 8002ab2:	4463      	add	r3, ip
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d822      	bhi.n	8002b00 <UART_SetConfig+0x4e8>
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <UART_SetConfig+0x578>)
 8002abe:	18d3      	adds	r3, r2, r3
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f7ff fa1e 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002acc:	e022      	b.n	8002b14 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ace:	f7ff fa2f 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad6:	e01d      	b.n	8002b14 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <UART_SetConfig+0x56c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2210      	movs	r2, #16
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d002      	beq.n	8002ae8 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <UART_SetConfig+0x570>)
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ae6:	e015      	b.n	8002b14 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <UART_SetConfig+0x574>)
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aec:	e012      	b.n	8002b14 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aee:	f7ff f959 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8002af2:	0003      	movs	r3, r0
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af6:	e00d      	b.n	8002b14 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002afe:	e009      	b.n	8002b14 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b04:	231a      	movs	r3, #26
 8002b06:	2218      	movs	r2, #24
 8002b08:	4694      	mov	ip, r2
 8002b0a:	44bc      	add	ip, r7
 8002b0c:	4463      	add	r3, ip
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
        break;
 8002b12:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d021      	beq.n	8002b5e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	085a      	lsrs	r2, r3, #1
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	18d2      	adds	r2, r2, r3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0019      	movs	r1, r3
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	f7fd faf6 	bl	800011c <__udivsi3>
 8002b30:	0003      	movs	r3, r0
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d909      	bls.n	8002b50 <UART_SetConfig+0x538>
 8002b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	025b      	lsls	r3, r3, #9
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d204      	bcs.n	8002b50 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	e006      	b.n	8002b5e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002b50:	231a      	movs	r3, #26
 8002b52:	2218      	movs	r2, #24
 8002b54:	4694      	mov	ip, r2
 8002b56:	44bc      	add	ip, r7
 8002b58:	4463      	add	r3, ip
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2200      	movs	r2, #0
 8002b62:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2200      	movs	r2, #0
 8002b68:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b6a:	231a      	movs	r3, #26
 8002b6c:	2218      	movs	r2, #24
 8002b6e:	4694      	mov	ip, r2
 8002b70:	44bc      	add	ip, r7
 8002b72:	4463      	add	r3, ip
 8002b74:	781b      	ldrb	r3, [r3, #0]
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b00e      	add	sp, #56	; 0x38
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	08003914 	.word	0x08003914
 8002b84:	40021000 	.word	0x40021000
 8002b88:	003d0900 	.word	0x003d0900
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	08003938 	.word	0x08003938

08002b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <UART_AdvFeatureConfig+0x144>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a43      	ldr	r2, [pc, #268]	; (8002cdc <UART_AdvFeatureConfig+0x148>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <UART_AdvFeatureConfig+0x14c>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2208      	movs	r2, #8
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d00b      	beq.n	8002c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <UART_AdvFeatureConfig+0x150>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2210      	movs	r2, #16
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d00b      	beq.n	8002c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <UART_AdvFeatureConfig+0x154>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4a25      	ldr	r2, [pc, #148]	; (8002cec <UART_AdvFeatureConfig+0x158>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d01d      	beq.n	8002cae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <UART_AdvFeatureConfig+0x15c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	035b      	lsls	r3, r3, #13
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d10b      	bne.n	8002cae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <UART_AdvFeatureConfig+0x160>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <UART_AdvFeatureConfig+0x164>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
  }
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	fffdffff 	.word	0xfffdffff
 8002cdc:	fffeffff 	.word	0xfffeffff
 8002ce0:	fffbffff 	.word	0xfffbffff
 8002ce4:	ffff7fff 	.word	0xffff7fff
 8002ce8:	ffffefff 	.word	0xffffefff
 8002cec:	ffffdfff 	.word	0xffffdfff
 8002cf0:	ffefffff 	.word	0xffefffff
 8002cf4:	ff9fffff 	.word	0xff9fffff
 8002cf8:	fff7ffff 	.word	0xfff7ffff

08002cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d0c:	f7fe f8b0 	bl	8000e70 <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d10c      	bne.n	8002d3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	0391      	lsls	r1, r2, #14
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <UART_CheckIdleState+0x8c>)
 8002d2c:	9200      	str	r2, [sp, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f000 f82c 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e021      	b.n	8002d80 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d10c      	bne.n	8002d64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	03d1      	lsls	r1, r2, #15
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <UART_CheckIdleState+0x8c>)
 8002d54:	9200      	str	r2, [sp, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f000 f818 	bl	8002d8c <UART_WaitOnFlagUntilTimeout>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e00d      	b.n	8002d80 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2274      	movs	r2, #116	; 0x74
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b004      	add	sp, #16
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	01ffffff 	.word	0x01ffffff

08002d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9c:	e05e      	b.n	8002e5c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3301      	adds	r3, #1
 8002da2:	d05b      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da4:	f7fe f864 	bl	8000e70 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d302      	bcc.n	8002dba <UART_WaitOnFlagUntilTimeout+0x2e>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11b      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	492f      	ldr	r1, [pc, #188]	; (8002e84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2274      	movs	r2, #116	; 0x74
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e044      	b.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d02e      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	401a      	ands	r2, r3
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d124      	bne.n	8002e5c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4917      	ldr	r1, [pc, #92]	; (8002e84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2274      	movs	r2, #116	; 0x74
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e00f      	b.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	425a      	negs	r2, r3
 8002e6c:	4153      	adcs	r3, r2
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	001a      	movs	r2, r3
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d091      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	fffffe5f 	.word	0xfffffe5f

08002e88 <__errno>:
 8002e88:	4b01      	ldr	r3, [pc, #4]	; (8002e90 <__errno+0x8>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	4770      	bx	lr
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	2600      	movs	r6, #0
 8002e98:	4d0c      	ldr	r5, [pc, #48]	; (8002ecc <__libc_init_array+0x38>)
 8002e9a:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9c:	1b64      	subs	r4, r4, r5
 8002e9e:	10a4      	asrs	r4, r4, #2
 8002ea0:	42a6      	cmp	r6, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	f000 fc47 	bl	8003738 <_init>
 8002eaa:	4d0a      	ldr	r5, [pc, #40]	; (8002ed4 <__libc_init_array+0x40>)
 8002eac:	4c0a      	ldr	r4, [pc, #40]	; (8002ed8 <__libc_init_array+0x44>)
 8002eae:	1b64      	subs	r4, r4, r5
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	42a6      	cmp	r6, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	00b3      	lsls	r3, r6, #2
 8002eba:	58eb      	ldr	r3, [r5, r3]
 8002ebc:	4798      	blx	r3
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	00b3      	lsls	r3, r6, #2
 8002ec4:	58eb      	ldr	r3, [r5, r3]
 8002ec6:	4798      	blx	r3
 8002ec8:	3601      	adds	r6, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08003998 	.word	0x08003998
 8002ed0:	08003998 	.word	0x08003998
 8002ed4:	08003998 	.word	0x08003998
 8002ed8:	0800399c 	.word	0x0800399c

08002edc <memset>:
 8002edc:	0003      	movs	r3, r0
 8002ede:	1882      	adds	r2, r0, r2
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	7019      	strb	r1, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <siprintf>:
 8002eec:	b40e      	push	{r1, r2, r3}
 8002eee:	b500      	push	{lr}
 8002ef0:	490b      	ldr	r1, [pc, #44]	; (8002f20 <siprintf+0x34>)
 8002ef2:	b09c      	sub	sp, #112	; 0x70
 8002ef4:	ab1d      	add	r3, sp, #116	; 0x74
 8002ef6:	9002      	str	r0, [sp, #8]
 8002ef8:	9006      	str	r0, [sp, #24]
 8002efa:	9107      	str	r1, [sp, #28]
 8002efc:	9104      	str	r1, [sp, #16]
 8002efe:	4809      	ldr	r0, [pc, #36]	; (8002f24 <siprintf+0x38>)
 8002f00:	4909      	ldr	r1, [pc, #36]	; (8002f28 <siprintf+0x3c>)
 8002f02:	cb04      	ldmia	r3!, {r2}
 8002f04:	9105      	str	r1, [sp, #20]
 8002f06:	6800      	ldr	r0, [r0, #0]
 8002f08:	a902      	add	r1, sp, #8
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	f000 f870 	bl	8002ff0 <_svfiprintf_r>
 8002f10:	2300      	movs	r3, #0
 8002f12:	9a02      	ldr	r2, [sp, #8]
 8002f14:	7013      	strb	r3, [r2, #0]
 8002f16:	b01c      	add	sp, #112	; 0x70
 8002f18:	bc08      	pop	{r3}
 8002f1a:	b003      	add	sp, #12
 8002f1c:	4718      	bx	r3
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	7fffffff 	.word	0x7fffffff
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	ffff0208 	.word	0xffff0208

08002f2c <__ssputs_r>:
 8002f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2e:	688e      	ldr	r6, [r1, #8]
 8002f30:	b085      	sub	sp, #20
 8002f32:	0007      	movs	r7, r0
 8002f34:	000c      	movs	r4, r1
 8002f36:	9203      	str	r2, [sp, #12]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	429e      	cmp	r6, r3
 8002f3c:	d83c      	bhi.n	8002fb8 <__ssputs_r+0x8c>
 8002f3e:	2390      	movs	r3, #144	; 0x90
 8002f40:	898a      	ldrh	r2, [r1, #12]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	421a      	tst	r2, r3
 8002f46:	d034      	beq.n	8002fb2 <__ssputs_r+0x86>
 8002f48:	2503      	movs	r5, #3
 8002f4a:	6909      	ldr	r1, [r1, #16]
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	9302      	str	r3, [sp, #8]
 8002f52:	6963      	ldr	r3, [r4, #20]
 8002f54:	9802      	ldr	r0, [sp, #8]
 8002f56:	435d      	muls	r5, r3
 8002f58:	0feb      	lsrs	r3, r5, #31
 8002f5a:	195d      	adds	r5, r3, r5
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	106d      	asrs	r5, r5, #1
 8002f60:	3301      	adds	r3, #1
 8002f62:	181b      	adds	r3, r3, r0
 8002f64:	42ab      	cmp	r3, r5
 8002f66:	d900      	bls.n	8002f6a <__ssputs_r+0x3e>
 8002f68:	001d      	movs	r5, r3
 8002f6a:	0553      	lsls	r3, r2, #21
 8002f6c:	d532      	bpl.n	8002fd4 <__ssputs_r+0xa8>
 8002f6e:	0029      	movs	r1, r5
 8002f70:	0038      	movs	r0, r7
 8002f72:	f000 fb31 	bl	80035d8 <_malloc_r>
 8002f76:	1e06      	subs	r6, r0, #0
 8002f78:	d109      	bne.n	8002f8e <__ssputs_r+0x62>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	2340      	movs	r3, #64	; 0x40
 8002f80:	2001      	movs	r0, #1
 8002f82:	89a2      	ldrh	r2, [r4, #12]
 8002f84:	4240      	negs	r0, r0
 8002f86:	4313      	orrs	r3, r2
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	b005      	add	sp, #20
 8002f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8e:	9a02      	ldr	r2, [sp, #8]
 8002f90:	6921      	ldr	r1, [r4, #16]
 8002f92:	f000 faba 	bl	800350a <memcpy>
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <__ssputs_r+0xc0>)
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	9b02      	ldr	r3, [sp, #8]
 8002fa4:	6126      	str	r6, [r4, #16]
 8002fa6:	18f6      	adds	r6, r6, r3
 8002fa8:	6026      	str	r6, [r4, #0]
 8002faa:	6165      	str	r5, [r4, #20]
 8002fac:	9e01      	ldr	r6, [sp, #4]
 8002fae:	1aed      	subs	r5, r5, r3
 8002fb0:	60a5      	str	r5, [r4, #8]
 8002fb2:	9b01      	ldr	r3, [sp, #4]
 8002fb4:	429e      	cmp	r6, r3
 8002fb6:	d900      	bls.n	8002fba <__ssputs_r+0x8e>
 8002fb8:	9e01      	ldr	r6, [sp, #4]
 8002fba:	0032      	movs	r2, r6
 8002fbc:	9903      	ldr	r1, [sp, #12]
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	f000 faac 	bl	800351c <memmove>
 8002fc4:	68a3      	ldr	r3, [r4, #8]
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	1b9b      	subs	r3, r3, r6
 8002fca:	60a3      	str	r3, [r4, #8]
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	199e      	adds	r6, r3, r6
 8002fd0:	6026      	str	r6, [r4, #0]
 8002fd2:	e7da      	b.n	8002f8a <__ssputs_r+0x5e>
 8002fd4:	002a      	movs	r2, r5
 8002fd6:	0038      	movs	r0, r7
 8002fd8:	f000 fb5c 	bl	8003694 <_realloc_r>
 8002fdc:	1e06      	subs	r6, r0, #0
 8002fde:	d1e0      	bne.n	8002fa2 <__ssputs_r+0x76>
 8002fe0:	0038      	movs	r0, r7
 8002fe2:	6921      	ldr	r1, [r4, #16]
 8002fe4:	f000 faae 	bl	8003544 <_free_r>
 8002fe8:	e7c7      	b.n	8002f7a <__ssputs_r+0x4e>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	fffffb7f 	.word	0xfffffb7f

08002ff0 <_svfiprintf_r>:
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b0a1      	sub	sp, #132	; 0x84
 8002ff4:	9003      	str	r0, [sp, #12]
 8002ff6:	001d      	movs	r5, r3
 8002ff8:	898b      	ldrh	r3, [r1, #12]
 8002ffa:	000f      	movs	r7, r1
 8002ffc:	0016      	movs	r6, r2
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	d511      	bpl.n	8003026 <_svfiprintf_r+0x36>
 8003002:	690b      	ldr	r3, [r1, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10e      	bne.n	8003026 <_svfiprintf_r+0x36>
 8003008:	2140      	movs	r1, #64	; 0x40
 800300a:	f000 fae5 	bl	80035d8 <_malloc_r>
 800300e:	6038      	str	r0, [r7, #0]
 8003010:	6138      	str	r0, [r7, #16]
 8003012:	2800      	cmp	r0, #0
 8003014:	d105      	bne.n	8003022 <_svfiprintf_r+0x32>
 8003016:	230c      	movs	r3, #12
 8003018:	9a03      	ldr	r2, [sp, #12]
 800301a:	3801      	subs	r0, #1
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	b021      	add	sp, #132	; 0x84
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003022:	2340      	movs	r3, #64	; 0x40
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	2300      	movs	r3, #0
 8003028:	ac08      	add	r4, sp, #32
 800302a:	6163      	str	r3, [r4, #20]
 800302c:	3320      	adds	r3, #32
 800302e:	7663      	strb	r3, [r4, #25]
 8003030:	3310      	adds	r3, #16
 8003032:	76a3      	strb	r3, [r4, #26]
 8003034:	9507      	str	r5, [sp, #28]
 8003036:	0035      	movs	r5, r6
 8003038:	782b      	ldrb	r3, [r5, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <_svfiprintf_r+0x52>
 800303e:	2b25      	cmp	r3, #37	; 0x25
 8003040:	d147      	bne.n	80030d2 <_svfiprintf_r+0xe2>
 8003042:	1bab      	subs	r3, r5, r6
 8003044:	9305      	str	r3, [sp, #20]
 8003046:	42b5      	cmp	r5, r6
 8003048:	d00c      	beq.n	8003064 <_svfiprintf_r+0x74>
 800304a:	0032      	movs	r2, r6
 800304c:	0039      	movs	r1, r7
 800304e:	9803      	ldr	r0, [sp, #12]
 8003050:	f7ff ff6c 	bl	8002f2c <__ssputs_r>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d100      	bne.n	800305a <_svfiprintf_r+0x6a>
 8003058:	e0ae      	b.n	80031b8 <_svfiprintf_r+0x1c8>
 800305a:	6962      	ldr	r2, [r4, #20]
 800305c:	9b05      	ldr	r3, [sp, #20]
 800305e:	4694      	mov	ip, r2
 8003060:	4463      	add	r3, ip
 8003062:	6163      	str	r3, [r4, #20]
 8003064:	782b      	ldrb	r3, [r5, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d100      	bne.n	800306c <_svfiprintf_r+0x7c>
 800306a:	e0a5      	b.n	80031b8 <_svfiprintf_r+0x1c8>
 800306c:	2201      	movs	r2, #1
 800306e:	2300      	movs	r3, #0
 8003070:	4252      	negs	r2, r2
 8003072:	6062      	str	r2, [r4, #4]
 8003074:	a904      	add	r1, sp, #16
 8003076:	3254      	adds	r2, #84	; 0x54
 8003078:	1852      	adds	r2, r2, r1
 800307a:	1c6e      	adds	r6, r5, #1
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	60e3      	str	r3, [r4, #12]
 8003080:	60a3      	str	r3, [r4, #8]
 8003082:	7013      	strb	r3, [r2, #0]
 8003084:	65a3      	str	r3, [r4, #88]	; 0x58
 8003086:	2205      	movs	r2, #5
 8003088:	7831      	ldrb	r1, [r6, #0]
 800308a:	4854      	ldr	r0, [pc, #336]	; (80031dc <_svfiprintf_r+0x1ec>)
 800308c:	f000 fa32 	bl	80034f4 <memchr>
 8003090:	1c75      	adds	r5, r6, #1
 8003092:	2800      	cmp	r0, #0
 8003094:	d11f      	bne.n	80030d6 <_svfiprintf_r+0xe6>
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	06d3      	lsls	r3, r2, #27
 800309a:	d504      	bpl.n	80030a6 <_svfiprintf_r+0xb6>
 800309c:	2353      	movs	r3, #83	; 0x53
 800309e:	a904      	add	r1, sp, #16
 80030a0:	185b      	adds	r3, r3, r1
 80030a2:	2120      	movs	r1, #32
 80030a4:	7019      	strb	r1, [r3, #0]
 80030a6:	0713      	lsls	r3, r2, #28
 80030a8:	d504      	bpl.n	80030b4 <_svfiprintf_r+0xc4>
 80030aa:	2353      	movs	r3, #83	; 0x53
 80030ac:	a904      	add	r1, sp, #16
 80030ae:	185b      	adds	r3, r3, r1
 80030b0:	212b      	movs	r1, #43	; 0x2b
 80030b2:	7019      	strb	r1, [r3, #0]
 80030b4:	7833      	ldrb	r3, [r6, #0]
 80030b6:	2b2a      	cmp	r3, #42	; 0x2a
 80030b8:	d016      	beq.n	80030e8 <_svfiprintf_r+0xf8>
 80030ba:	0035      	movs	r5, r6
 80030bc:	2100      	movs	r1, #0
 80030be:	200a      	movs	r0, #10
 80030c0:	68e3      	ldr	r3, [r4, #12]
 80030c2:	782a      	ldrb	r2, [r5, #0]
 80030c4:	1c6e      	adds	r6, r5, #1
 80030c6:	3a30      	subs	r2, #48	; 0x30
 80030c8:	2a09      	cmp	r2, #9
 80030ca:	d94e      	bls.n	800316a <_svfiprintf_r+0x17a>
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d111      	bne.n	80030f4 <_svfiprintf_r+0x104>
 80030d0:	e017      	b.n	8003102 <_svfiprintf_r+0x112>
 80030d2:	3501      	adds	r5, #1
 80030d4:	e7b0      	b.n	8003038 <_svfiprintf_r+0x48>
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <_svfiprintf_r+0x1ec>)
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	1ac0      	subs	r0, r0, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	4083      	lsls	r3, r0
 80030e0:	4313      	orrs	r3, r2
 80030e2:	002e      	movs	r6, r5
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	e7ce      	b.n	8003086 <_svfiprintf_r+0x96>
 80030e8:	9b07      	ldr	r3, [sp, #28]
 80030ea:	1d19      	adds	r1, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	9107      	str	r1, [sp, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db01      	blt.n	80030f8 <_svfiprintf_r+0x108>
 80030f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80030f6:	e004      	b.n	8003102 <_svfiprintf_r+0x112>
 80030f8:	425b      	negs	r3, r3
 80030fa:	60e3      	str	r3, [r4, #12]
 80030fc:	2302      	movs	r3, #2
 80030fe:	4313      	orrs	r3, r2
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	782b      	ldrb	r3, [r5, #0]
 8003104:	2b2e      	cmp	r3, #46	; 0x2e
 8003106:	d10a      	bne.n	800311e <_svfiprintf_r+0x12e>
 8003108:	786b      	ldrb	r3, [r5, #1]
 800310a:	2b2a      	cmp	r3, #42	; 0x2a
 800310c:	d135      	bne.n	800317a <_svfiprintf_r+0x18a>
 800310e:	9b07      	ldr	r3, [sp, #28]
 8003110:	3502      	adds	r5, #2
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	9207      	str	r2, [sp, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db2b      	blt.n	8003174 <_svfiprintf_r+0x184>
 800311c:	9309      	str	r3, [sp, #36]	; 0x24
 800311e:	4e30      	ldr	r6, [pc, #192]	; (80031e0 <_svfiprintf_r+0x1f0>)
 8003120:	2203      	movs	r2, #3
 8003122:	0030      	movs	r0, r6
 8003124:	7829      	ldrb	r1, [r5, #0]
 8003126:	f000 f9e5 	bl	80034f4 <memchr>
 800312a:	2800      	cmp	r0, #0
 800312c:	d006      	beq.n	800313c <_svfiprintf_r+0x14c>
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	1b80      	subs	r0, r0, r6
 8003132:	4083      	lsls	r3, r0
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	3501      	adds	r5, #1
 8003138:	4313      	orrs	r3, r2
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	7829      	ldrb	r1, [r5, #0]
 800313e:	2206      	movs	r2, #6
 8003140:	4828      	ldr	r0, [pc, #160]	; (80031e4 <_svfiprintf_r+0x1f4>)
 8003142:	1c6e      	adds	r6, r5, #1
 8003144:	7621      	strb	r1, [r4, #24]
 8003146:	f000 f9d5 	bl	80034f4 <memchr>
 800314a:	2800      	cmp	r0, #0
 800314c:	d03c      	beq.n	80031c8 <_svfiprintf_r+0x1d8>
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <_svfiprintf_r+0x1f8>)
 8003150:	2b00      	cmp	r3, #0
 8003152:	d125      	bne.n	80031a0 <_svfiprintf_r+0x1b0>
 8003154:	2207      	movs	r2, #7
 8003156:	9b07      	ldr	r3, [sp, #28]
 8003158:	3307      	adds	r3, #7
 800315a:	4393      	bics	r3, r2
 800315c:	3308      	adds	r3, #8
 800315e:	9307      	str	r3, [sp, #28]
 8003160:	6963      	ldr	r3, [r4, #20]
 8003162:	9a04      	ldr	r2, [sp, #16]
 8003164:	189b      	adds	r3, r3, r2
 8003166:	6163      	str	r3, [r4, #20]
 8003168:	e765      	b.n	8003036 <_svfiprintf_r+0x46>
 800316a:	4343      	muls	r3, r0
 800316c:	0035      	movs	r5, r6
 800316e:	2101      	movs	r1, #1
 8003170:	189b      	adds	r3, r3, r2
 8003172:	e7a6      	b.n	80030c2 <_svfiprintf_r+0xd2>
 8003174:	2301      	movs	r3, #1
 8003176:	425b      	negs	r3, r3
 8003178:	e7d0      	b.n	800311c <_svfiprintf_r+0x12c>
 800317a:	2300      	movs	r3, #0
 800317c:	200a      	movs	r0, #10
 800317e:	001a      	movs	r2, r3
 8003180:	3501      	adds	r5, #1
 8003182:	6063      	str	r3, [r4, #4]
 8003184:	7829      	ldrb	r1, [r5, #0]
 8003186:	1c6e      	adds	r6, r5, #1
 8003188:	3930      	subs	r1, #48	; 0x30
 800318a:	2909      	cmp	r1, #9
 800318c:	d903      	bls.n	8003196 <_svfiprintf_r+0x1a6>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0c5      	beq.n	800311e <_svfiprintf_r+0x12e>
 8003192:	9209      	str	r2, [sp, #36]	; 0x24
 8003194:	e7c3      	b.n	800311e <_svfiprintf_r+0x12e>
 8003196:	4342      	muls	r2, r0
 8003198:	0035      	movs	r5, r6
 800319a:	2301      	movs	r3, #1
 800319c:	1852      	adds	r2, r2, r1
 800319e:	e7f1      	b.n	8003184 <_svfiprintf_r+0x194>
 80031a0:	ab07      	add	r3, sp, #28
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	003a      	movs	r2, r7
 80031a6:	0021      	movs	r1, r4
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_svfiprintf_r+0x1fc>)
 80031aa:	9803      	ldr	r0, [sp, #12]
 80031ac:	e000      	b.n	80031b0 <_svfiprintf_r+0x1c0>
 80031ae:	bf00      	nop
 80031b0:	9004      	str	r0, [sp, #16]
 80031b2:	9b04      	ldr	r3, [sp, #16]
 80031b4:	3301      	adds	r3, #1
 80031b6:	d1d3      	bne.n	8003160 <_svfiprintf_r+0x170>
 80031b8:	89bb      	ldrh	r3, [r7, #12]
 80031ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80031bc:	065b      	lsls	r3, r3, #25
 80031be:	d400      	bmi.n	80031c2 <_svfiprintf_r+0x1d2>
 80031c0:	e72d      	b.n	800301e <_svfiprintf_r+0x2e>
 80031c2:	2001      	movs	r0, #1
 80031c4:	4240      	negs	r0, r0
 80031c6:	e72a      	b.n	800301e <_svfiprintf_r+0x2e>
 80031c8:	ab07      	add	r3, sp, #28
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	003a      	movs	r2, r7
 80031ce:	0021      	movs	r1, r4
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <_svfiprintf_r+0x1fc>)
 80031d2:	9803      	ldr	r0, [sp, #12]
 80031d4:	f000 f87c 	bl	80032d0 <_printf_i>
 80031d8:	e7ea      	b.n	80031b0 <_svfiprintf_r+0x1c0>
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	0800395c 	.word	0x0800395c
 80031e0:	08003962 	.word	0x08003962
 80031e4:	08003966 	.word	0x08003966
 80031e8:	00000000 	.word	0x00000000
 80031ec:	08002f2d 	.word	0x08002f2d

080031f0 <_printf_common>:
 80031f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031f2:	0015      	movs	r5, r2
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	688a      	ldr	r2, [r1, #8]
 80031f8:	690b      	ldr	r3, [r1, #16]
 80031fa:	000c      	movs	r4, r1
 80031fc:	9000      	str	r0, [sp, #0]
 80031fe:	4293      	cmp	r3, r2
 8003200:	da00      	bge.n	8003204 <_printf_common+0x14>
 8003202:	0013      	movs	r3, r2
 8003204:	0022      	movs	r2, r4
 8003206:	602b      	str	r3, [r5, #0]
 8003208:	3243      	adds	r2, #67	; 0x43
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	2a00      	cmp	r2, #0
 800320e:	d001      	beq.n	8003214 <_printf_common+0x24>
 8003210:	3301      	adds	r3, #1
 8003212:	602b      	str	r3, [r5, #0]
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	d502      	bpl.n	8003220 <_printf_common+0x30>
 800321a:	682b      	ldr	r3, [r5, #0]
 800321c:	3302      	adds	r3, #2
 800321e:	602b      	str	r3, [r5, #0]
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	2306      	movs	r3, #6
 8003224:	0017      	movs	r7, r2
 8003226:	401f      	ands	r7, r3
 8003228:	421a      	tst	r2, r3
 800322a:	d027      	beq.n	800327c <_printf_common+0x8c>
 800322c:	0023      	movs	r3, r4
 800322e:	3343      	adds	r3, #67	; 0x43
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	4193      	sbcs	r3, r2
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	0692      	lsls	r2, r2, #26
 800323a:	d430      	bmi.n	800329e <_printf_common+0xae>
 800323c:	0022      	movs	r2, r4
 800323e:	9901      	ldr	r1, [sp, #4]
 8003240:	9800      	ldr	r0, [sp, #0]
 8003242:	9e08      	ldr	r6, [sp, #32]
 8003244:	3243      	adds	r2, #67	; 0x43
 8003246:	47b0      	blx	r6
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d025      	beq.n	8003298 <_printf_common+0xa8>
 800324c:	2306      	movs	r3, #6
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	682a      	ldr	r2, [r5, #0]
 8003252:	68e1      	ldr	r1, [r4, #12]
 8003254:	2500      	movs	r5, #0
 8003256:	4003      	ands	r3, r0
 8003258:	2b04      	cmp	r3, #4
 800325a:	d103      	bne.n	8003264 <_printf_common+0x74>
 800325c:	1a8d      	subs	r5, r1, r2
 800325e:	43eb      	mvns	r3, r5
 8003260:	17db      	asrs	r3, r3, #31
 8003262:	401d      	ands	r5, r3
 8003264:	68a3      	ldr	r3, [r4, #8]
 8003266:	6922      	ldr	r2, [r4, #16]
 8003268:	4293      	cmp	r3, r2
 800326a:	dd01      	ble.n	8003270 <_printf_common+0x80>
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	18ed      	adds	r5, r5, r3
 8003270:	2700      	movs	r7, #0
 8003272:	42bd      	cmp	r5, r7
 8003274:	d120      	bne.n	80032b8 <_printf_common+0xc8>
 8003276:	2000      	movs	r0, #0
 8003278:	e010      	b.n	800329c <_printf_common+0xac>
 800327a:	3701      	adds	r7, #1
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	682a      	ldr	r2, [r5, #0]
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	42bb      	cmp	r3, r7
 8003284:	ddd2      	ble.n	800322c <_printf_common+0x3c>
 8003286:	0022      	movs	r2, r4
 8003288:	2301      	movs	r3, #1
 800328a:	9901      	ldr	r1, [sp, #4]
 800328c:	9800      	ldr	r0, [sp, #0]
 800328e:	9e08      	ldr	r6, [sp, #32]
 8003290:	3219      	adds	r2, #25
 8003292:	47b0      	blx	r6
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	d1f0      	bne.n	800327a <_printf_common+0x8a>
 8003298:	2001      	movs	r0, #1
 800329a:	4240      	negs	r0, r0
 800329c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800329e:	2030      	movs	r0, #48	; 0x30
 80032a0:	18e1      	adds	r1, r4, r3
 80032a2:	3143      	adds	r1, #67	; 0x43
 80032a4:	7008      	strb	r0, [r1, #0]
 80032a6:	0021      	movs	r1, r4
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	3145      	adds	r1, #69	; 0x45
 80032ac:	7809      	ldrb	r1, [r1, #0]
 80032ae:	18a2      	adds	r2, r4, r2
 80032b0:	3243      	adds	r2, #67	; 0x43
 80032b2:	3302      	adds	r3, #2
 80032b4:	7011      	strb	r1, [r2, #0]
 80032b6:	e7c1      	b.n	800323c <_printf_common+0x4c>
 80032b8:	0022      	movs	r2, r4
 80032ba:	2301      	movs	r3, #1
 80032bc:	9901      	ldr	r1, [sp, #4]
 80032be:	9800      	ldr	r0, [sp, #0]
 80032c0:	9e08      	ldr	r6, [sp, #32]
 80032c2:	321a      	adds	r2, #26
 80032c4:	47b0      	blx	r6
 80032c6:	1c43      	adds	r3, r0, #1
 80032c8:	d0e6      	beq.n	8003298 <_printf_common+0xa8>
 80032ca:	3701      	adds	r7, #1
 80032cc:	e7d1      	b.n	8003272 <_printf_common+0x82>
	...

080032d0 <_printf_i>:
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b08b      	sub	sp, #44	; 0x2c
 80032d4:	9206      	str	r2, [sp, #24]
 80032d6:	000a      	movs	r2, r1
 80032d8:	3243      	adds	r2, #67	; 0x43
 80032da:	9307      	str	r3, [sp, #28]
 80032dc:	9005      	str	r0, [sp, #20]
 80032de:	9204      	str	r2, [sp, #16]
 80032e0:	7e0a      	ldrb	r2, [r1, #24]
 80032e2:	000c      	movs	r4, r1
 80032e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032e6:	2a78      	cmp	r2, #120	; 0x78
 80032e8:	d806      	bhi.n	80032f8 <_printf_i+0x28>
 80032ea:	2a62      	cmp	r2, #98	; 0x62
 80032ec:	d808      	bhi.n	8003300 <_printf_i+0x30>
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d100      	bne.n	80032f4 <_printf_i+0x24>
 80032f2:	e0c0      	b.n	8003476 <_printf_i+0x1a6>
 80032f4:	2a58      	cmp	r2, #88	; 0x58
 80032f6:	d052      	beq.n	800339e <_printf_i+0xce>
 80032f8:	0026      	movs	r6, r4
 80032fa:	3642      	adds	r6, #66	; 0x42
 80032fc:	7032      	strb	r2, [r6, #0]
 80032fe:	e022      	b.n	8003346 <_printf_i+0x76>
 8003300:	0010      	movs	r0, r2
 8003302:	3863      	subs	r0, #99	; 0x63
 8003304:	2815      	cmp	r0, #21
 8003306:	d8f7      	bhi.n	80032f8 <_printf_i+0x28>
 8003308:	f7fc fefe 	bl	8000108 <__gnu_thumb1_case_shi>
 800330c:	001f0016 	.word	0x001f0016
 8003310:	fff6fff6 	.word	0xfff6fff6
 8003314:	fff6fff6 	.word	0xfff6fff6
 8003318:	fff6001f 	.word	0xfff6001f
 800331c:	fff6fff6 	.word	0xfff6fff6
 8003320:	00a8fff6 	.word	0x00a8fff6
 8003324:	009a0036 	.word	0x009a0036
 8003328:	fff6fff6 	.word	0xfff6fff6
 800332c:	fff600b9 	.word	0xfff600b9
 8003330:	fff60036 	.word	0xfff60036
 8003334:	009efff6 	.word	0x009efff6
 8003338:	0026      	movs	r6, r4
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	3642      	adds	r6, #66	; 0x42
 800333e:	1d11      	adds	r1, r2, #4
 8003340:	6019      	str	r1, [r3, #0]
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	7033      	strb	r3, [r6, #0]
 8003346:	2301      	movs	r3, #1
 8003348:	e0a7      	b.n	800349a <_printf_i+0x1ca>
 800334a:	6808      	ldr	r0, [r1, #0]
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	1d0a      	adds	r2, r1, #4
 8003350:	0605      	lsls	r5, r0, #24
 8003352:	d50b      	bpl.n	800336c <_printf_i+0x9c>
 8003354:	680d      	ldr	r5, [r1, #0]
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	2d00      	cmp	r5, #0
 800335a:	da03      	bge.n	8003364 <_printf_i+0x94>
 800335c:	232d      	movs	r3, #45	; 0x2d
 800335e:	9a04      	ldr	r2, [sp, #16]
 8003360:	426d      	negs	r5, r5
 8003362:	7013      	strb	r3, [r2, #0]
 8003364:	4b61      	ldr	r3, [pc, #388]	; (80034ec <_printf_i+0x21c>)
 8003366:	270a      	movs	r7, #10
 8003368:	9303      	str	r3, [sp, #12]
 800336a:	e032      	b.n	80033d2 <_printf_i+0x102>
 800336c:	680d      	ldr	r5, [r1, #0]
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	0641      	lsls	r1, r0, #25
 8003372:	d5f1      	bpl.n	8003358 <_printf_i+0x88>
 8003374:	b22d      	sxth	r5, r5
 8003376:	e7ef      	b.n	8003358 <_printf_i+0x88>
 8003378:	680d      	ldr	r5, [r1, #0]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	1d08      	adds	r0, r1, #4
 800337e:	6018      	str	r0, [r3, #0]
 8003380:	062e      	lsls	r6, r5, #24
 8003382:	d501      	bpl.n	8003388 <_printf_i+0xb8>
 8003384:	680d      	ldr	r5, [r1, #0]
 8003386:	e003      	b.n	8003390 <_printf_i+0xc0>
 8003388:	066d      	lsls	r5, r5, #25
 800338a:	d5fb      	bpl.n	8003384 <_printf_i+0xb4>
 800338c:	680d      	ldr	r5, [r1, #0]
 800338e:	b2ad      	uxth	r5, r5
 8003390:	4b56      	ldr	r3, [pc, #344]	; (80034ec <_printf_i+0x21c>)
 8003392:	270a      	movs	r7, #10
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	2a6f      	cmp	r2, #111	; 0x6f
 8003398:	d117      	bne.n	80033ca <_printf_i+0xfa>
 800339a:	2708      	movs	r7, #8
 800339c:	e015      	b.n	80033ca <_printf_i+0xfa>
 800339e:	3145      	adds	r1, #69	; 0x45
 80033a0:	700a      	strb	r2, [r1, #0]
 80033a2:	4a52      	ldr	r2, [pc, #328]	; (80034ec <_printf_i+0x21c>)
 80033a4:	9203      	str	r2, [sp, #12]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	6821      	ldr	r1, [r4, #0]
 80033aa:	ca20      	ldmia	r2!, {r5}
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	0608      	lsls	r0, r1, #24
 80033b0:	d550      	bpl.n	8003454 <_printf_i+0x184>
 80033b2:	07cb      	lsls	r3, r1, #31
 80033b4:	d502      	bpl.n	80033bc <_printf_i+0xec>
 80033b6:	2320      	movs	r3, #32
 80033b8:	4319      	orrs	r1, r3
 80033ba:	6021      	str	r1, [r4, #0]
 80033bc:	2710      	movs	r7, #16
 80033be:	2d00      	cmp	r5, #0
 80033c0:	d103      	bne.n	80033ca <_printf_i+0xfa>
 80033c2:	2320      	movs	r3, #32
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	439a      	bics	r2, r3
 80033c8:	6022      	str	r2, [r4, #0]
 80033ca:	0023      	movs	r3, r4
 80033cc:	2200      	movs	r2, #0
 80033ce:	3343      	adds	r3, #67	; 0x43
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	6863      	ldr	r3, [r4, #4]
 80033d4:	60a3      	str	r3, [r4, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	db03      	blt.n	80033e2 <_printf_i+0x112>
 80033da:	2204      	movs	r2, #4
 80033dc:	6821      	ldr	r1, [r4, #0]
 80033de:	4391      	bics	r1, r2
 80033e0:	6021      	str	r1, [r4, #0]
 80033e2:	2d00      	cmp	r5, #0
 80033e4:	d102      	bne.n	80033ec <_printf_i+0x11c>
 80033e6:	9e04      	ldr	r6, [sp, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <_printf_i+0x136>
 80033ec:	9e04      	ldr	r6, [sp, #16]
 80033ee:	0028      	movs	r0, r5
 80033f0:	0039      	movs	r1, r7
 80033f2:	f7fc ff19 	bl	8000228 <__aeabi_uidivmod>
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	3e01      	subs	r6, #1
 80033fa:	5c5b      	ldrb	r3, [r3, r1]
 80033fc:	7033      	strb	r3, [r6, #0]
 80033fe:	002b      	movs	r3, r5
 8003400:	0005      	movs	r5, r0
 8003402:	429f      	cmp	r7, r3
 8003404:	d9f3      	bls.n	80033ee <_printf_i+0x11e>
 8003406:	2f08      	cmp	r7, #8
 8003408:	d109      	bne.n	800341e <_printf_i+0x14e>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	07db      	lsls	r3, r3, #31
 800340e:	d506      	bpl.n	800341e <_printf_i+0x14e>
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	6922      	ldr	r2, [r4, #16]
 8003414:	4293      	cmp	r3, r2
 8003416:	dc02      	bgt.n	800341e <_printf_i+0x14e>
 8003418:	2330      	movs	r3, #48	; 0x30
 800341a:	3e01      	subs	r6, #1
 800341c:	7033      	strb	r3, [r6, #0]
 800341e:	9b04      	ldr	r3, [sp, #16]
 8003420:	1b9b      	subs	r3, r3, r6
 8003422:	6123      	str	r3, [r4, #16]
 8003424:	9b07      	ldr	r3, [sp, #28]
 8003426:	0021      	movs	r1, r4
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	9805      	ldr	r0, [sp, #20]
 800342c:	9b06      	ldr	r3, [sp, #24]
 800342e:	aa09      	add	r2, sp, #36	; 0x24
 8003430:	f7ff fede 	bl	80031f0 <_printf_common>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d135      	bne.n	80034a4 <_printf_i+0x1d4>
 8003438:	2001      	movs	r0, #1
 800343a:	4240      	negs	r0, r0
 800343c:	b00b      	add	sp, #44	; 0x2c
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003440:	2220      	movs	r2, #32
 8003442:	6809      	ldr	r1, [r1, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	6022      	str	r2, [r4, #0]
 8003448:	0022      	movs	r2, r4
 800344a:	2178      	movs	r1, #120	; 0x78
 800344c:	3245      	adds	r2, #69	; 0x45
 800344e:	7011      	strb	r1, [r2, #0]
 8003450:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <_printf_i+0x220>)
 8003452:	e7a7      	b.n	80033a4 <_printf_i+0xd4>
 8003454:	0648      	lsls	r0, r1, #25
 8003456:	d5ac      	bpl.n	80033b2 <_printf_i+0xe2>
 8003458:	b2ad      	uxth	r5, r5
 800345a:	e7aa      	b.n	80033b2 <_printf_i+0xe2>
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	680d      	ldr	r5, [r1, #0]
 8003460:	1d10      	adds	r0, r2, #4
 8003462:	6949      	ldr	r1, [r1, #20]
 8003464:	6018      	str	r0, [r3, #0]
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	062e      	lsls	r6, r5, #24
 800346a:	d501      	bpl.n	8003470 <_printf_i+0x1a0>
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	e002      	b.n	8003476 <_printf_i+0x1a6>
 8003470:	066d      	lsls	r5, r5, #25
 8003472:	d5fb      	bpl.n	800346c <_printf_i+0x19c>
 8003474:	8019      	strh	r1, [r3, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	9e04      	ldr	r6, [sp, #16]
 800347a:	6123      	str	r3, [r4, #16]
 800347c:	e7d2      	b.n	8003424 <_printf_i+0x154>
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	1d11      	adds	r1, r2, #4
 8003482:	6019      	str	r1, [r3, #0]
 8003484:	6816      	ldr	r6, [r2, #0]
 8003486:	2100      	movs	r1, #0
 8003488:	0030      	movs	r0, r6
 800348a:	6862      	ldr	r2, [r4, #4]
 800348c:	f000 f832 	bl	80034f4 <memchr>
 8003490:	2800      	cmp	r0, #0
 8003492:	d001      	beq.n	8003498 <_printf_i+0x1c8>
 8003494:	1b80      	subs	r0, r0, r6
 8003496:	6060      	str	r0, [r4, #4]
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	2300      	movs	r3, #0
 800349e:	9a04      	ldr	r2, [sp, #16]
 80034a0:	7013      	strb	r3, [r2, #0]
 80034a2:	e7bf      	b.n	8003424 <_printf_i+0x154>
 80034a4:	6923      	ldr	r3, [r4, #16]
 80034a6:	0032      	movs	r2, r6
 80034a8:	9906      	ldr	r1, [sp, #24]
 80034aa:	9805      	ldr	r0, [sp, #20]
 80034ac:	9d07      	ldr	r5, [sp, #28]
 80034ae:	47a8      	blx	r5
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d0c1      	beq.n	8003438 <_printf_i+0x168>
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	079b      	lsls	r3, r3, #30
 80034b8:	d415      	bmi.n	80034e6 <_printf_i+0x216>
 80034ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034bc:	68e0      	ldr	r0, [r4, #12]
 80034be:	4298      	cmp	r0, r3
 80034c0:	dabc      	bge.n	800343c <_printf_i+0x16c>
 80034c2:	0018      	movs	r0, r3
 80034c4:	e7ba      	b.n	800343c <_printf_i+0x16c>
 80034c6:	0022      	movs	r2, r4
 80034c8:	2301      	movs	r3, #1
 80034ca:	9906      	ldr	r1, [sp, #24]
 80034cc:	9805      	ldr	r0, [sp, #20]
 80034ce:	9e07      	ldr	r6, [sp, #28]
 80034d0:	3219      	adds	r2, #25
 80034d2:	47b0      	blx	r6
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d0af      	beq.n	8003438 <_printf_i+0x168>
 80034d8:	3501      	adds	r5, #1
 80034da:	68e3      	ldr	r3, [r4, #12]
 80034dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	42ab      	cmp	r3, r5
 80034e2:	dcf0      	bgt.n	80034c6 <_printf_i+0x1f6>
 80034e4:	e7e9      	b.n	80034ba <_printf_i+0x1ea>
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7f7      	b.n	80034da <_printf_i+0x20a>
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	0800396d 	.word	0x0800396d
 80034f0:	0800397e 	.word	0x0800397e

080034f4 <memchr>:
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	1882      	adds	r2, r0, r2
 80034f8:	4290      	cmp	r0, r2
 80034fa:	d101      	bne.n	8003500 <memchr+0xc>
 80034fc:	2000      	movs	r0, #0
 80034fe:	4770      	bx	lr
 8003500:	7803      	ldrb	r3, [r0, #0]
 8003502:	428b      	cmp	r3, r1
 8003504:	d0fb      	beq.n	80034fe <memchr+0xa>
 8003506:	3001      	adds	r0, #1
 8003508:	e7f6      	b.n	80034f8 <memchr+0x4>

0800350a <memcpy>:
 800350a:	2300      	movs	r3, #0
 800350c:	b510      	push	{r4, lr}
 800350e:	429a      	cmp	r2, r3
 8003510:	d100      	bne.n	8003514 <memcpy+0xa>
 8003512:	bd10      	pop	{r4, pc}
 8003514:	5ccc      	ldrb	r4, [r1, r3]
 8003516:	54c4      	strb	r4, [r0, r3]
 8003518:	3301      	adds	r3, #1
 800351a:	e7f8      	b.n	800350e <memcpy+0x4>

0800351c <memmove>:
 800351c:	b510      	push	{r4, lr}
 800351e:	4288      	cmp	r0, r1
 8003520:	d902      	bls.n	8003528 <memmove+0xc>
 8003522:	188b      	adds	r3, r1, r2
 8003524:	4298      	cmp	r0, r3
 8003526:	d303      	bcc.n	8003530 <memmove+0x14>
 8003528:	2300      	movs	r3, #0
 800352a:	e007      	b.n	800353c <memmove+0x20>
 800352c:	5c8b      	ldrb	r3, [r1, r2]
 800352e:	5483      	strb	r3, [r0, r2]
 8003530:	3a01      	subs	r2, #1
 8003532:	d2fb      	bcs.n	800352c <memmove+0x10>
 8003534:	bd10      	pop	{r4, pc}
 8003536:	5ccc      	ldrb	r4, [r1, r3]
 8003538:	54c4      	strb	r4, [r0, r3]
 800353a:	3301      	adds	r3, #1
 800353c:	429a      	cmp	r2, r3
 800353e:	d1fa      	bne.n	8003536 <memmove+0x1a>
 8003540:	e7f8      	b.n	8003534 <memmove+0x18>
	...

08003544 <_free_r>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	0005      	movs	r5, r0
 8003548:	2900      	cmp	r1, #0
 800354a:	d010      	beq.n	800356e <_free_r+0x2a>
 800354c:	1f0c      	subs	r4, r1, #4
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <_free_r+0x12>
 8003554:	18e4      	adds	r4, r4, r3
 8003556:	0028      	movs	r0, r5
 8003558:	f000 f8d4 	bl	8003704 <__malloc_lock>
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <_free_r+0x90>)
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <_free_r+0x2c>
 8003564:	6063      	str	r3, [r4, #4]
 8003566:	6014      	str	r4, [r2, #0]
 8003568:	0028      	movs	r0, r5
 800356a:	f000 f8d3 	bl	8003714 <__malloc_unlock>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	42a3      	cmp	r3, r4
 8003572:	d908      	bls.n	8003586 <_free_r+0x42>
 8003574:	6821      	ldr	r1, [r4, #0]
 8003576:	1860      	adds	r0, r4, r1
 8003578:	4283      	cmp	r3, r0
 800357a:	d1f3      	bne.n	8003564 <_free_r+0x20>
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	1841      	adds	r1, r0, r1
 8003582:	6021      	str	r1, [r4, #0]
 8003584:	e7ee      	b.n	8003564 <_free_r+0x20>
 8003586:	001a      	movs	r2, r3
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <_free_r+0x4e>
 800358e:	42a3      	cmp	r3, r4
 8003590:	d9f9      	bls.n	8003586 <_free_r+0x42>
 8003592:	6811      	ldr	r1, [r2, #0]
 8003594:	1850      	adds	r0, r2, r1
 8003596:	42a0      	cmp	r0, r4
 8003598:	d10b      	bne.n	80035b2 <_free_r+0x6e>
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	1809      	adds	r1, r1, r0
 800359e:	1850      	adds	r0, r2, r1
 80035a0:	6011      	str	r1, [r2, #0]
 80035a2:	4283      	cmp	r3, r0
 80035a4:	d1e0      	bne.n	8003568 <_free_r+0x24>
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	1841      	adds	r1, r0, r1
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e7da      	b.n	8003568 <_free_r+0x24>
 80035b2:	42a0      	cmp	r0, r4
 80035b4:	d902      	bls.n	80035bc <_free_r+0x78>
 80035b6:	230c      	movs	r3, #12
 80035b8:	602b      	str	r3, [r5, #0]
 80035ba:	e7d5      	b.n	8003568 <_free_r+0x24>
 80035bc:	6821      	ldr	r1, [r4, #0]
 80035be:	1860      	adds	r0, r4, r1
 80035c0:	4283      	cmp	r3, r0
 80035c2:	d103      	bne.n	80035cc <_free_r+0x88>
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	1841      	adds	r1, r0, r1
 80035ca:	6021      	str	r1, [r4, #0]
 80035cc:	6063      	str	r3, [r4, #4]
 80035ce:	6054      	str	r4, [r2, #4]
 80035d0:	e7ca      	b.n	8003568 <_free_r+0x24>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000090 	.word	0x20000090

080035d8 <_malloc_r>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	2303      	movs	r3, #3
 80035dc:	1ccd      	adds	r5, r1, #3
 80035de:	439d      	bics	r5, r3
 80035e0:	3508      	adds	r5, #8
 80035e2:	0006      	movs	r6, r0
 80035e4:	2d0c      	cmp	r5, #12
 80035e6:	d21f      	bcs.n	8003628 <_malloc_r+0x50>
 80035e8:	250c      	movs	r5, #12
 80035ea:	42a9      	cmp	r1, r5
 80035ec:	d81e      	bhi.n	800362c <_malloc_r+0x54>
 80035ee:	0030      	movs	r0, r6
 80035f0:	f000 f888 	bl	8003704 <__malloc_lock>
 80035f4:	4925      	ldr	r1, [pc, #148]	; (800368c <_malloc_r+0xb4>)
 80035f6:	680a      	ldr	r2, [r1, #0]
 80035f8:	0014      	movs	r4, r2
 80035fa:	2c00      	cmp	r4, #0
 80035fc:	d11a      	bne.n	8003634 <_malloc_r+0x5c>
 80035fe:	4f24      	ldr	r7, [pc, #144]	; (8003690 <_malloc_r+0xb8>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <_malloc_r+0x38>
 8003606:	0021      	movs	r1, r4
 8003608:	0030      	movs	r0, r6
 800360a:	f000 f869 	bl	80036e0 <_sbrk_r>
 800360e:	6038      	str	r0, [r7, #0]
 8003610:	0029      	movs	r1, r5
 8003612:	0030      	movs	r0, r6
 8003614:	f000 f864 	bl	80036e0 <_sbrk_r>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d12b      	bne.n	8003674 <_malloc_r+0x9c>
 800361c:	230c      	movs	r3, #12
 800361e:	0030      	movs	r0, r6
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	f000 f877 	bl	8003714 <__malloc_unlock>
 8003626:	e003      	b.n	8003630 <_malloc_r+0x58>
 8003628:	2d00      	cmp	r5, #0
 800362a:	dade      	bge.n	80035ea <_malloc_r+0x12>
 800362c:	230c      	movs	r3, #12
 800362e:	6033      	str	r3, [r6, #0]
 8003630:	2000      	movs	r0, #0
 8003632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	1b5b      	subs	r3, r3, r5
 8003638:	d419      	bmi.n	800366e <_malloc_r+0x96>
 800363a:	2b0b      	cmp	r3, #11
 800363c:	d903      	bls.n	8003646 <_malloc_r+0x6e>
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	18e4      	adds	r4, r4, r3
 8003642:	6025      	str	r5, [r4, #0]
 8003644:	e003      	b.n	800364e <_malloc_r+0x76>
 8003646:	6863      	ldr	r3, [r4, #4]
 8003648:	42a2      	cmp	r2, r4
 800364a:	d10e      	bne.n	800366a <_malloc_r+0x92>
 800364c:	600b      	str	r3, [r1, #0]
 800364e:	0030      	movs	r0, r6
 8003650:	f000 f860 	bl	8003714 <__malloc_unlock>
 8003654:	0020      	movs	r0, r4
 8003656:	2207      	movs	r2, #7
 8003658:	300b      	adds	r0, #11
 800365a:	1d23      	adds	r3, r4, #4
 800365c:	4390      	bics	r0, r2
 800365e:	1ac2      	subs	r2, r0, r3
 8003660:	4298      	cmp	r0, r3
 8003662:	d0e6      	beq.n	8003632 <_malloc_r+0x5a>
 8003664:	1a1b      	subs	r3, r3, r0
 8003666:	50a3      	str	r3, [r4, r2]
 8003668:	e7e3      	b.n	8003632 <_malloc_r+0x5a>
 800366a:	6053      	str	r3, [r2, #4]
 800366c:	e7ef      	b.n	800364e <_malloc_r+0x76>
 800366e:	0022      	movs	r2, r4
 8003670:	6864      	ldr	r4, [r4, #4]
 8003672:	e7c2      	b.n	80035fa <_malloc_r+0x22>
 8003674:	2303      	movs	r3, #3
 8003676:	1cc4      	adds	r4, r0, #3
 8003678:	439c      	bics	r4, r3
 800367a:	42a0      	cmp	r0, r4
 800367c:	d0e1      	beq.n	8003642 <_malloc_r+0x6a>
 800367e:	1a21      	subs	r1, r4, r0
 8003680:	0030      	movs	r0, r6
 8003682:	f000 f82d 	bl	80036e0 <_sbrk_r>
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	d1db      	bne.n	8003642 <_malloc_r+0x6a>
 800368a:	e7c7      	b.n	800361c <_malloc_r+0x44>
 800368c:	20000090 	.word	0x20000090
 8003690:	20000094 	.word	0x20000094

08003694 <_realloc_r>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	0007      	movs	r7, r0
 8003698:	000d      	movs	r5, r1
 800369a:	0016      	movs	r6, r2
 800369c:	2900      	cmp	r1, #0
 800369e:	d105      	bne.n	80036ac <_realloc_r+0x18>
 80036a0:	0011      	movs	r1, r2
 80036a2:	f7ff ff99 	bl	80035d8 <_malloc_r>
 80036a6:	0004      	movs	r4, r0
 80036a8:	0020      	movs	r0, r4
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d103      	bne.n	80036b8 <_realloc_r+0x24>
 80036b0:	f7ff ff48 	bl	8003544 <_free_r>
 80036b4:	0034      	movs	r4, r6
 80036b6:	e7f7      	b.n	80036a8 <_realloc_r+0x14>
 80036b8:	f000 f834 	bl	8003724 <_malloc_usable_size_r>
 80036bc:	002c      	movs	r4, r5
 80036be:	42b0      	cmp	r0, r6
 80036c0:	d2f2      	bcs.n	80036a8 <_realloc_r+0x14>
 80036c2:	0031      	movs	r1, r6
 80036c4:	0038      	movs	r0, r7
 80036c6:	f7ff ff87 	bl	80035d8 <_malloc_r>
 80036ca:	1e04      	subs	r4, r0, #0
 80036cc:	d0ec      	beq.n	80036a8 <_realloc_r+0x14>
 80036ce:	0029      	movs	r1, r5
 80036d0:	0032      	movs	r2, r6
 80036d2:	f7ff ff1a 	bl	800350a <memcpy>
 80036d6:	0029      	movs	r1, r5
 80036d8:	0038      	movs	r0, r7
 80036da:	f7ff ff33 	bl	8003544 <_free_r>
 80036de:	e7e3      	b.n	80036a8 <_realloc_r+0x14>

080036e0 <_sbrk_r>:
 80036e0:	2300      	movs	r3, #0
 80036e2:	b570      	push	{r4, r5, r6, lr}
 80036e4:	4d06      	ldr	r5, [pc, #24]	; (8003700 <_sbrk_r+0x20>)
 80036e6:	0004      	movs	r4, r0
 80036e8:	0008      	movs	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd faf4 	bl	8000cd8 <_sbrk>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d103      	bne.n	80036fc <_sbrk_r+0x1c>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d000      	beq.n	80036fc <_sbrk_r+0x1c>
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000120 	.word	0x20000120

08003704 <__malloc_lock>:
 8003704:	b510      	push	{r4, lr}
 8003706:	4802      	ldr	r0, [pc, #8]	; (8003710 <__malloc_lock+0xc>)
 8003708:	f000 f814 	bl	8003734 <__retarget_lock_acquire_recursive>
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000128 	.word	0x20000128

08003714 <__malloc_unlock>:
 8003714:	b510      	push	{r4, lr}
 8003716:	4802      	ldr	r0, [pc, #8]	; (8003720 <__malloc_unlock+0xc>)
 8003718:	f000 f80d 	bl	8003736 <__retarget_lock_release_recursive>
 800371c:	bd10      	pop	{r4, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	20000128 	.word	0x20000128

08003724 <_malloc_usable_size_r>:
 8003724:	1f0b      	subs	r3, r1, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1f18      	subs	r0, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	da01      	bge.n	8003732 <_malloc_usable_size_r+0xe>
 800372e:	580b      	ldr	r3, [r1, r0]
 8003730:	18c0      	adds	r0, r0, r3
 8003732:	4770      	bx	lr

08003734 <__retarget_lock_acquire_recursive>:
 8003734:	4770      	bx	lr

08003736 <__retarget_lock_release_recursive>:
 8003736:	4770      	bx	lr

08003738 <_init>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr

08003744 <_fini>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr
